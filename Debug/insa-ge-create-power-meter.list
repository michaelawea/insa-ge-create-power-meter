
insa-ge-create-power-meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f4  08006bc8  08006bc8  00007bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cbc  08007cbc  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007cbc  08007cbc  00009070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007cbc  08007cbc  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007cc4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000070  08007d34  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08007d34  0000969c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e05c  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e4  00000000  00000000  000170f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000194d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0c  00000000  00000000  0001a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015487  00000000  00000000  0001ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef6  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843cf  00000000  00000000  000411b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a74  00000000  00000000  000c55cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c9040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bb0 	.word	0x08006bb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006bb0 	.word	0x08006bb0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fbc3 	bl	8000b9c <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fb4b 	bl	8000abc <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fbb5 	bl	8000b9c <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fbab 	bl	8000b9c <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb59 	bl	8000b0c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fb4f 	bl	8000b0c <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_f2uiz>:
 800047c:	219e      	movs	r1, #158	@ 0x9e
 800047e:	b510      	push	{r4, lr}
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	1c04      	adds	r4, r0, #0
 8000484:	f7ff fff0 	bl	8000468 <__aeabi_fcmpge>
 8000488:	2800      	cmp	r0, #0
 800048a:	d103      	bne.n	8000494 <__aeabi_f2uiz+0x18>
 800048c:	1c20      	adds	r0, r4, #0
 800048e:	f000 ff8b 	bl	80013a8 <__aeabi_f2iz>
 8000492:	bd10      	pop	{r4, pc}
 8000494:	219e      	movs	r1, #158	@ 0x9e
 8000496:	1c20      	adds	r0, r4, #0
 8000498:	05c9      	lsls	r1, r1, #23
 800049a:	f000 fd21 	bl	8000ee0 <__aeabi_fsub>
 800049e:	f000 ff83 	bl	80013a8 <__aeabi_f2iz>
 80004a2:	2380      	movs	r3, #128	@ 0x80
 80004a4:	061b      	lsls	r3, r3, #24
 80004a6:	469c      	mov	ip, r3
 80004a8:	4460      	add	r0, ip
 80004aa:	e7f2      	b.n	8000492 <__aeabi_f2uiz+0x16>

080004ac <__aeabi_fadd>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	024b      	lsls	r3, r1, #9
 80004b0:	0a5a      	lsrs	r2, r3, #9
 80004b2:	4694      	mov	ip, r2
 80004b4:	004a      	lsls	r2, r1, #1
 80004b6:	0fc9      	lsrs	r1, r1, #31
 80004b8:	46ce      	mov	lr, r9
 80004ba:	4647      	mov	r7, r8
 80004bc:	4689      	mov	r9, r1
 80004be:	0045      	lsls	r5, r0, #1
 80004c0:	0246      	lsls	r6, r0, #9
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e12      	lsrs	r2, r2, #24
 80004c6:	b580      	push	{r7, lr}
 80004c8:	0999      	lsrs	r1, r3, #6
 80004ca:	0a77      	lsrs	r7, r6, #9
 80004cc:	0fc4      	lsrs	r4, r0, #31
 80004ce:	09b6      	lsrs	r6, r6, #6
 80004d0:	1aab      	subs	r3, r5, r2
 80004d2:	454c      	cmp	r4, r9
 80004d4:	d020      	beq.n	8000518 <__aeabi_fadd+0x6c>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dd0c      	ble.n	80004f4 <__aeabi_fadd+0x48>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d134      	bne.n	8000548 <__aeabi_fadd+0x9c>
 80004de:	2900      	cmp	r1, #0
 80004e0:	d02a      	beq.n	8000538 <__aeabi_fadd+0x8c>
 80004e2:	1e5a      	subs	r2, r3, #1
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x3e>
 80004e8:	e08f      	b.n	800060a <__aeabi_fadd+0x15e>
 80004ea:	2bff      	cmp	r3, #255	@ 0xff
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x44>
 80004ee:	e0cd      	b.n	800068c <__aeabi_fadd+0x1e0>
 80004f0:	0013      	movs	r3, r2
 80004f2:	e02f      	b.n	8000554 <__aeabi_fadd+0xa8>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d060      	beq.n	80005ba <__aeabi_fadd+0x10e>
 80004f8:	1b53      	subs	r3, r2, r5
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_fadd+0x54>
 80004fe:	e0ee      	b.n	80006de <__aeabi_fadd+0x232>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_fadd+0x5a>
 8000504:	e13e      	b.n	8000784 <__aeabi_fadd+0x2d8>
 8000506:	1e5c      	subs	r4, r3, #1
 8000508:	2b01      	cmp	r3, #1
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x62>
 800050c:	e16b      	b.n	80007e6 <__aeabi_fadd+0x33a>
 800050e:	2bff      	cmp	r3, #255	@ 0xff
 8000510:	d100      	bne.n	8000514 <__aeabi_fadd+0x68>
 8000512:	e0b9      	b.n	8000688 <__aeabi_fadd+0x1dc>
 8000514:	0023      	movs	r3, r4
 8000516:	e0e7      	b.n	80006e8 <__aeabi_fadd+0x23c>
 8000518:	2b00      	cmp	r3, #0
 800051a:	dc00      	bgt.n	800051e <__aeabi_fadd+0x72>
 800051c:	e0a4      	b.n	8000668 <__aeabi_fadd+0x1bc>
 800051e:	2a00      	cmp	r2, #0
 8000520:	d069      	beq.n	80005f6 <__aeabi_fadd+0x14a>
 8000522:	2dff      	cmp	r5, #255	@ 0xff
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x7c>
 8000526:	e0b1      	b.n	800068c <__aeabi_fadd+0x1e0>
 8000528:	2280      	movs	r2, #128	@ 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4311      	orrs	r1, r2
 800052e:	2b1b      	cmp	r3, #27
 8000530:	dc00      	bgt.n	8000534 <__aeabi_fadd+0x88>
 8000532:	e0e9      	b.n	8000708 <__aeabi_fadd+0x25c>
 8000534:	002b      	movs	r3, r5
 8000536:	3605      	adds	r6, #5
 8000538:	08f7      	lsrs	r7, r6, #3
 800053a:	2bff      	cmp	r3, #255	@ 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x94>
 800053e:	e0a5      	b.n	800068c <__aeabi_fadd+0x1e0>
 8000540:	027a      	lsls	r2, r7, #9
 8000542:	0a52      	lsrs	r2, r2, #9
 8000544:	b2d8      	uxtb	r0, r3
 8000546:	e030      	b.n	80005aa <__aeabi_fadd+0xfe>
 8000548:	2dff      	cmp	r5, #255	@ 0xff
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0xa2>
 800054c:	e09e      	b.n	800068c <__aeabi_fadd+0x1e0>
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	04d2      	lsls	r2, r2, #19
 8000552:	4311      	orrs	r1, r2
 8000554:	2001      	movs	r0, #1
 8000556:	2b1b      	cmp	r3, #27
 8000558:	dc08      	bgt.n	800056c <__aeabi_fadd+0xc0>
 800055a:	0008      	movs	r0, r1
 800055c:	2220      	movs	r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	4099      	lsls	r1, r3
 8000564:	000b      	movs	r3, r1
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	4193      	sbcs	r3, r2
 800056a:	4318      	orrs	r0, r3
 800056c:	1a36      	subs	r6, r6, r0
 800056e:	0173      	lsls	r3, r6, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fadd+0xc8>
 8000572:	e071      	b.n	8000658 <__aeabi_fadd+0x1ac>
 8000574:	01b6      	lsls	r6, r6, #6
 8000576:	09b7      	lsrs	r7, r6, #6
 8000578:	0038      	movs	r0, r7
 800057a:	f000 ffcb 	bl	8001514 <__clzsi2>
 800057e:	003b      	movs	r3, r7
 8000580:	3805      	subs	r0, #5
 8000582:	4083      	lsls	r3, r0
 8000584:	4285      	cmp	r5, r0
 8000586:	dd4d      	ble.n	8000624 <__aeabi_fadd+0x178>
 8000588:	4eb4      	ldr	r6, [pc, #720]	@ (800085c <__aeabi_fadd+0x3b0>)
 800058a:	1a2d      	subs	r5, r5, r0
 800058c:	401e      	ands	r6, r3
 800058e:	075a      	lsls	r2, r3, #29
 8000590:	d068      	beq.n	8000664 <__aeabi_fadd+0x1b8>
 8000592:	220f      	movs	r2, #15
 8000594:	4013      	ands	r3, r2
 8000596:	2b04      	cmp	r3, #4
 8000598:	d064      	beq.n	8000664 <__aeabi_fadd+0x1b8>
 800059a:	3604      	adds	r6, #4
 800059c:	0173      	lsls	r3, r6, #5
 800059e:	d561      	bpl.n	8000664 <__aeabi_fadd+0x1b8>
 80005a0:	1c68      	adds	r0, r5, #1
 80005a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80005a4:	d154      	bne.n	8000650 <__aeabi_fadd+0x1a4>
 80005a6:	20ff      	movs	r0, #255	@ 0xff
 80005a8:	2200      	movs	r2, #0
 80005aa:	05c0      	lsls	r0, r0, #23
 80005ac:	4310      	orrs	r0, r2
 80005ae:	07e4      	lsls	r4, r4, #31
 80005b0:	4320      	orrs	r0, r4
 80005b2:	bcc0      	pop	{r6, r7}
 80005b4:	46b9      	mov	r9, r7
 80005b6:	46b0      	mov	r8, r6
 80005b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ba:	22fe      	movs	r2, #254	@ 0xfe
 80005bc:	4690      	mov	r8, r2
 80005be:	1c68      	adds	r0, r5, #1
 80005c0:	0002      	movs	r2, r0
 80005c2:	4640      	mov	r0, r8
 80005c4:	4210      	tst	r0, r2
 80005c6:	d16b      	bne.n	80006a0 <__aeabi_fadd+0x1f4>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0x122>
 80005cc:	e0dd      	b.n	800078a <__aeabi_fadd+0x2de>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x128>
 80005d2:	e102      	b.n	80007da <__aeabi_fadd+0x32e>
 80005d4:	2900      	cmp	r1, #0
 80005d6:	d0b3      	beq.n	8000540 <__aeabi_fadd+0x94>
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	1a77      	subs	r7, r6, r1
 80005dc:	04d2      	lsls	r2, r2, #19
 80005de:	4217      	tst	r7, r2
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fadd+0x138>
 80005e2:	e136      	b.n	8000852 <__aeabi_fadd+0x3a6>
 80005e4:	464c      	mov	r4, r9
 80005e6:	1b8e      	subs	r6, r1, r6
 80005e8:	d061      	beq.n	80006ae <__aeabi_fadd+0x202>
 80005ea:	2001      	movs	r0, #1
 80005ec:	4216      	tst	r6, r2
 80005ee:	d130      	bne.n	8000652 <__aeabi_fadd+0x1a6>
 80005f0:	2300      	movs	r3, #0
 80005f2:	08f7      	lsrs	r7, r6, #3
 80005f4:	e7a4      	b.n	8000540 <__aeabi_fadd+0x94>
 80005f6:	2900      	cmp	r1, #0
 80005f8:	d09e      	beq.n	8000538 <__aeabi_fadd+0x8c>
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x156>
 8000600:	e0ca      	b.n	8000798 <__aeabi_fadd+0x2ec>
 8000602:	2bff      	cmp	r3, #255	@ 0xff
 8000604:	d042      	beq.n	800068c <__aeabi_fadd+0x1e0>
 8000606:	0013      	movs	r3, r2
 8000608:	e791      	b.n	800052e <__aeabi_fadd+0x82>
 800060a:	1a71      	subs	r1, r6, r1
 800060c:	014b      	lsls	r3, r1, #5
 800060e:	d400      	bmi.n	8000612 <__aeabi_fadd+0x166>
 8000610:	e0d1      	b.n	80007b6 <__aeabi_fadd+0x30a>
 8000612:	018f      	lsls	r7, r1, #6
 8000614:	09bf      	lsrs	r7, r7, #6
 8000616:	0038      	movs	r0, r7
 8000618:	f000 ff7c 	bl	8001514 <__clzsi2>
 800061c:	003b      	movs	r3, r7
 800061e:	3805      	subs	r0, #5
 8000620:	4083      	lsls	r3, r0
 8000622:	2501      	movs	r5, #1
 8000624:	2220      	movs	r2, #32
 8000626:	1b40      	subs	r0, r0, r5
 8000628:	3001      	adds	r0, #1
 800062a:	1a12      	subs	r2, r2, r0
 800062c:	001e      	movs	r6, r3
 800062e:	4093      	lsls	r3, r2
 8000630:	40c6      	lsrs	r6, r0
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
 8000636:	431e      	orrs	r6, r3
 8000638:	d039      	beq.n	80006ae <__aeabi_fadd+0x202>
 800063a:	0773      	lsls	r3, r6, #29
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x194>
 800063e:	e11b      	b.n	8000878 <__aeabi_fadd+0x3cc>
 8000640:	230f      	movs	r3, #15
 8000642:	2500      	movs	r5, #0
 8000644:	4033      	ands	r3, r6
 8000646:	2b04      	cmp	r3, #4
 8000648:	d1a7      	bne.n	800059a <__aeabi_fadd+0xee>
 800064a:	2001      	movs	r0, #1
 800064c:	0172      	lsls	r2, r6, #5
 800064e:	d57c      	bpl.n	800074a <__aeabi_fadd+0x29e>
 8000650:	b2c0      	uxtb	r0, r0
 8000652:	01b2      	lsls	r2, r6, #6
 8000654:	0a52      	lsrs	r2, r2, #9
 8000656:	e7a8      	b.n	80005aa <__aeabi_fadd+0xfe>
 8000658:	0773      	lsls	r3, r6, #29
 800065a:	d003      	beq.n	8000664 <__aeabi_fadd+0x1b8>
 800065c:	230f      	movs	r3, #15
 800065e:	4033      	ands	r3, r6
 8000660:	2b04      	cmp	r3, #4
 8000662:	d19a      	bne.n	800059a <__aeabi_fadd+0xee>
 8000664:	002b      	movs	r3, r5
 8000666:	e767      	b.n	8000538 <__aeabi_fadd+0x8c>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d023      	beq.n	80006b4 <__aeabi_fadd+0x208>
 800066c:	1b53      	subs	r3, r2, r5
 800066e:	2d00      	cmp	r5, #0
 8000670:	d17b      	bne.n	800076a <__aeabi_fadd+0x2be>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d100      	bne.n	8000678 <__aeabi_fadd+0x1cc>
 8000676:	e086      	b.n	8000786 <__aeabi_fadd+0x2da>
 8000678:	1e5d      	subs	r5, r3, #1
 800067a:	2b01      	cmp	r3, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x1d4>
 800067e:	e08b      	b.n	8000798 <__aeabi_fadd+0x2ec>
 8000680:	2bff      	cmp	r3, #255	@ 0xff
 8000682:	d002      	beq.n	800068a <__aeabi_fadd+0x1de>
 8000684:	002b      	movs	r3, r5
 8000686:	e075      	b.n	8000774 <__aeabi_fadd+0x2c8>
 8000688:	464c      	mov	r4, r9
 800068a:	4667      	mov	r7, ip
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1e6>
 8000690:	e789      	b.n	80005a6 <__aeabi_fadd+0xfa>
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	03d2      	lsls	r2, r2, #15
 8000696:	433a      	orrs	r2, r7
 8000698:	0252      	lsls	r2, r2, #9
 800069a:	20ff      	movs	r0, #255	@ 0xff
 800069c:	0a52      	lsrs	r2, r2, #9
 800069e:	e784      	b.n	80005aa <__aeabi_fadd+0xfe>
 80006a0:	1a77      	subs	r7, r6, r1
 80006a2:	017b      	lsls	r3, r7, #5
 80006a4:	d46b      	bmi.n	800077e <__aeabi_fadd+0x2d2>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x200>
 80006aa:	e765      	b.n	8000578 <__aeabi_fadd+0xcc>
 80006ac:	2400      	movs	r4, #0
 80006ae:	2000      	movs	r0, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	e77a      	b.n	80005aa <__aeabi_fadd+0xfe>
 80006b4:	22fe      	movs	r2, #254	@ 0xfe
 80006b6:	1c6b      	adds	r3, r5, #1
 80006b8:	421a      	tst	r2, r3
 80006ba:	d149      	bne.n	8000750 <__aeabi_fadd+0x2a4>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x216>
 80006c0:	e09f      	b.n	8000802 <__aeabi_fadd+0x356>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x21c>
 80006c6:	e0ba      	b.n	800083e <__aeabi_fadd+0x392>
 80006c8:	2900      	cmp	r1, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x222>
 80006cc:	e0cf      	b.n	800086e <__aeabi_fadd+0x3c2>
 80006ce:	1872      	adds	r2, r6, r1
 80006d0:	0153      	lsls	r3, r2, #5
 80006d2:	d400      	bmi.n	80006d6 <__aeabi_fadd+0x22a>
 80006d4:	e0cd      	b.n	8000872 <__aeabi_fadd+0x3c6>
 80006d6:	0192      	lsls	r2, r2, #6
 80006d8:	2001      	movs	r0, #1
 80006da:	0a52      	lsrs	r2, r2, #9
 80006dc:	e765      	b.n	80005aa <__aeabi_fadd+0xfe>
 80006de:	2aff      	cmp	r2, #255	@ 0xff
 80006e0:	d0d2      	beq.n	8000688 <__aeabi_fadd+0x1dc>
 80006e2:	2080      	movs	r0, #128	@ 0x80
 80006e4:	04c0      	lsls	r0, r0, #19
 80006e6:	4306      	orrs	r6, r0
 80006e8:	2001      	movs	r0, #1
 80006ea:	2b1b      	cmp	r3, #27
 80006ec:	dc08      	bgt.n	8000700 <__aeabi_fadd+0x254>
 80006ee:	0030      	movs	r0, r6
 80006f0:	2420      	movs	r4, #32
 80006f2:	40d8      	lsrs	r0, r3
 80006f4:	1ae3      	subs	r3, r4, r3
 80006f6:	409e      	lsls	r6, r3
 80006f8:	0033      	movs	r3, r6
 80006fa:	1e5c      	subs	r4, r3, #1
 80006fc:	41a3      	sbcs	r3, r4
 80006fe:	4318      	orrs	r0, r3
 8000700:	464c      	mov	r4, r9
 8000702:	0015      	movs	r5, r2
 8000704:	1a0e      	subs	r6, r1, r0
 8000706:	e732      	b.n	800056e <__aeabi_fadd+0xc2>
 8000708:	0008      	movs	r0, r1
 800070a:	2220      	movs	r2, #32
 800070c:	40d8      	lsrs	r0, r3
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	4099      	lsls	r1, r3
 8000712:	000b      	movs	r3, r1
 8000714:	1e5a      	subs	r2, r3, #1
 8000716:	4193      	sbcs	r3, r2
 8000718:	4303      	orrs	r3, r0
 800071a:	18f6      	adds	r6, r6, r3
 800071c:	0173      	lsls	r3, r6, #5
 800071e:	d59b      	bpl.n	8000658 <__aeabi_fadd+0x1ac>
 8000720:	3501      	adds	r5, #1
 8000722:	2dff      	cmp	r5, #255	@ 0xff
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0x27c>
 8000726:	e73e      	b.n	80005a6 <__aeabi_fadd+0xfa>
 8000728:	2301      	movs	r3, #1
 800072a:	494d      	ldr	r1, [pc, #308]	@ (8000860 <__aeabi_fadd+0x3b4>)
 800072c:	0872      	lsrs	r2, r6, #1
 800072e:	4033      	ands	r3, r6
 8000730:	400a      	ands	r2, r1
 8000732:	431a      	orrs	r2, r3
 8000734:	0016      	movs	r6, r2
 8000736:	0753      	lsls	r3, r2, #29
 8000738:	d004      	beq.n	8000744 <__aeabi_fadd+0x298>
 800073a:	230f      	movs	r3, #15
 800073c:	4013      	ands	r3, r2
 800073e:	2b04      	cmp	r3, #4
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x298>
 8000742:	e72a      	b.n	800059a <__aeabi_fadd+0xee>
 8000744:	0173      	lsls	r3, r6, #5
 8000746:	d500      	bpl.n	800074a <__aeabi_fadd+0x29e>
 8000748:	e72a      	b.n	80005a0 <__aeabi_fadd+0xf4>
 800074a:	002b      	movs	r3, r5
 800074c:	08f7      	lsrs	r7, r6, #3
 800074e:	e6f7      	b.n	8000540 <__aeabi_fadd+0x94>
 8000750:	2bff      	cmp	r3, #255	@ 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x2aa>
 8000754:	e727      	b.n	80005a6 <__aeabi_fadd+0xfa>
 8000756:	1871      	adds	r1, r6, r1
 8000758:	0849      	lsrs	r1, r1, #1
 800075a:	074a      	lsls	r2, r1, #29
 800075c:	d02f      	beq.n	80007be <__aeabi_fadd+0x312>
 800075e:	220f      	movs	r2, #15
 8000760:	400a      	ands	r2, r1
 8000762:	2a04      	cmp	r2, #4
 8000764:	d02b      	beq.n	80007be <__aeabi_fadd+0x312>
 8000766:	1d0e      	adds	r6, r1, #4
 8000768:	e6e6      	b.n	8000538 <__aeabi_fadd+0x8c>
 800076a:	2aff      	cmp	r2, #255	@ 0xff
 800076c:	d08d      	beq.n	800068a <__aeabi_fadd+0x1de>
 800076e:	2080      	movs	r0, #128	@ 0x80
 8000770:	04c0      	lsls	r0, r0, #19
 8000772:	4306      	orrs	r6, r0
 8000774:	2b1b      	cmp	r3, #27
 8000776:	dd24      	ble.n	80007c2 <__aeabi_fadd+0x316>
 8000778:	0013      	movs	r3, r2
 800077a:	1d4e      	adds	r6, r1, #5
 800077c:	e6dc      	b.n	8000538 <__aeabi_fadd+0x8c>
 800077e:	464c      	mov	r4, r9
 8000780:	1b8f      	subs	r7, r1, r6
 8000782:	e6f9      	b.n	8000578 <__aeabi_fadd+0xcc>
 8000784:	464c      	mov	r4, r9
 8000786:	000e      	movs	r6, r1
 8000788:	e6d6      	b.n	8000538 <__aeabi_fadd+0x8c>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d149      	bne.n	8000822 <__aeabi_fadd+0x376>
 800078e:	2900      	cmp	r1, #0
 8000790:	d068      	beq.n	8000864 <__aeabi_fadd+0x3b8>
 8000792:	4667      	mov	r7, ip
 8000794:	464c      	mov	r4, r9
 8000796:	e77c      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000798:	1870      	adds	r0, r6, r1
 800079a:	0143      	lsls	r3, r0, #5
 800079c:	d574      	bpl.n	8000888 <__aeabi_fadd+0x3dc>
 800079e:	4930      	ldr	r1, [pc, #192]	@ (8000860 <__aeabi_fadd+0x3b4>)
 80007a0:	0840      	lsrs	r0, r0, #1
 80007a2:	4001      	ands	r1, r0
 80007a4:	0743      	lsls	r3, r0, #29
 80007a6:	d009      	beq.n	80007bc <__aeabi_fadd+0x310>
 80007a8:	230f      	movs	r3, #15
 80007aa:	4003      	ands	r3, r0
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d005      	beq.n	80007bc <__aeabi_fadd+0x310>
 80007b0:	2302      	movs	r3, #2
 80007b2:	1d0e      	adds	r6, r1, #4
 80007b4:	e6c0      	b.n	8000538 <__aeabi_fadd+0x8c>
 80007b6:	2301      	movs	r3, #1
 80007b8:	08cf      	lsrs	r7, r1, #3
 80007ba:	e6c1      	b.n	8000540 <__aeabi_fadd+0x94>
 80007bc:	2302      	movs	r3, #2
 80007be:	08cf      	lsrs	r7, r1, #3
 80007c0:	e6be      	b.n	8000540 <__aeabi_fadd+0x94>
 80007c2:	2520      	movs	r5, #32
 80007c4:	0030      	movs	r0, r6
 80007c6:	40d8      	lsrs	r0, r3
 80007c8:	1aeb      	subs	r3, r5, r3
 80007ca:	409e      	lsls	r6, r3
 80007cc:	0033      	movs	r3, r6
 80007ce:	1e5d      	subs	r5, r3, #1
 80007d0:	41ab      	sbcs	r3, r5
 80007d2:	4303      	orrs	r3, r0
 80007d4:	0015      	movs	r5, r2
 80007d6:	185e      	adds	r6, r3, r1
 80007d8:	e7a0      	b.n	800071c <__aeabi_fadd+0x270>
 80007da:	2900      	cmp	r1, #0
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0x334>
 80007de:	e765      	b.n	80006ac <__aeabi_fadd+0x200>
 80007e0:	464c      	mov	r4, r9
 80007e2:	4667      	mov	r7, ip
 80007e4:	e6ac      	b.n	8000540 <__aeabi_fadd+0x94>
 80007e6:	1b8f      	subs	r7, r1, r6
 80007e8:	017b      	lsls	r3, r7, #5
 80007ea:	d52e      	bpl.n	800084a <__aeabi_fadd+0x39e>
 80007ec:	01bf      	lsls	r7, r7, #6
 80007ee:	09bf      	lsrs	r7, r7, #6
 80007f0:	0038      	movs	r0, r7
 80007f2:	f000 fe8f 	bl	8001514 <__clzsi2>
 80007f6:	003b      	movs	r3, r7
 80007f8:	3805      	subs	r0, #5
 80007fa:	4083      	lsls	r3, r0
 80007fc:	464c      	mov	r4, r9
 80007fe:	3501      	adds	r5, #1
 8000800:	e710      	b.n	8000624 <__aeabi_fadd+0x178>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x35c>
 8000806:	e740      	b.n	800068a <__aeabi_fadd+0x1de>
 8000808:	2900      	cmp	r1, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x362>
 800080c:	e741      	b.n	8000692 <__aeabi_fadd+0x1e6>
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	429f      	cmp	r7, r3
 8000814:	d200      	bcs.n	8000818 <__aeabi_fadd+0x36c>
 8000816:	e73c      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000818:	459c      	cmp	ip, r3
 800081a:	d300      	bcc.n	800081e <__aeabi_fadd+0x372>
 800081c:	e739      	b.n	8000692 <__aeabi_fadd+0x1e6>
 800081e:	4667      	mov	r7, ip
 8000820:	e737      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000822:	2900      	cmp	r1, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0x37c>
 8000826:	e734      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	03db      	lsls	r3, r3, #15
 800082c:	429f      	cmp	r7, r3
 800082e:	d200      	bcs.n	8000832 <__aeabi_fadd+0x386>
 8000830:	e72f      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000832:	459c      	cmp	ip, r3
 8000834:	d300      	bcc.n	8000838 <__aeabi_fadd+0x38c>
 8000836:	e72c      	b.n	8000692 <__aeabi_fadd+0x1e6>
 8000838:	464c      	mov	r4, r9
 800083a:	4667      	mov	r7, ip
 800083c:	e729      	b.n	8000692 <__aeabi_fadd+0x1e6>
 800083e:	2900      	cmp	r1, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x398>
 8000842:	e734      	b.n	80006ae <__aeabi_fadd+0x202>
 8000844:	2300      	movs	r3, #0
 8000846:	08cf      	lsrs	r7, r1, #3
 8000848:	e67a      	b.n	8000540 <__aeabi_fadd+0x94>
 800084a:	464c      	mov	r4, r9
 800084c:	2301      	movs	r3, #1
 800084e:	08ff      	lsrs	r7, r7, #3
 8000850:	e676      	b.n	8000540 <__aeabi_fadd+0x94>
 8000852:	2f00      	cmp	r7, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x3ac>
 8000856:	e729      	b.n	80006ac <__aeabi_fadd+0x200>
 8000858:	08ff      	lsrs	r7, r7, #3
 800085a:	e671      	b.n	8000540 <__aeabi_fadd+0x94>
 800085c:	fbffffff 	.word	0xfbffffff
 8000860:	7dffffff 	.word	0x7dffffff
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	2400      	movs	r4, #0
 8000868:	20ff      	movs	r0, #255	@ 0xff
 800086a:	03d2      	lsls	r2, r2, #15
 800086c:	e69d      	b.n	80005aa <__aeabi_fadd+0xfe>
 800086e:	2300      	movs	r3, #0
 8000870:	e666      	b.n	8000540 <__aeabi_fadd+0x94>
 8000872:	2300      	movs	r3, #0
 8000874:	08d7      	lsrs	r7, r2, #3
 8000876:	e663      	b.n	8000540 <__aeabi_fadd+0x94>
 8000878:	2001      	movs	r0, #1
 800087a:	0172      	lsls	r2, r6, #5
 800087c:	d500      	bpl.n	8000880 <__aeabi_fadd+0x3d4>
 800087e:	e6e7      	b.n	8000650 <__aeabi_fadd+0x1a4>
 8000880:	0031      	movs	r1, r6
 8000882:	2300      	movs	r3, #0
 8000884:	08cf      	lsrs	r7, r1, #3
 8000886:	e65b      	b.n	8000540 <__aeabi_fadd+0x94>
 8000888:	2301      	movs	r3, #1
 800088a:	08c7      	lsrs	r7, r0, #3
 800088c:	e658      	b.n	8000540 <__aeabi_fadd+0x94>
 800088e:	46c0      	nop			@ (mov r8, r8)

08000890 <__aeabi_fdiv>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4646      	mov	r6, r8
 8000894:	464f      	mov	r7, r9
 8000896:	46d6      	mov	lr, sl
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	b5c0      	push	{r6, r7, lr}
 800089c:	0fc3      	lsrs	r3, r0, #31
 800089e:	0047      	lsls	r7, r0, #1
 80008a0:	4698      	mov	r8, r3
 80008a2:	1c0e      	adds	r6, r1, #0
 80008a4:	0a6d      	lsrs	r5, r5, #9
 80008a6:	0e3f      	lsrs	r7, r7, #24
 80008a8:	d05b      	beq.n	8000962 <__aeabi_fdiv+0xd2>
 80008aa:	2fff      	cmp	r7, #255	@ 0xff
 80008ac:	d021      	beq.n	80008f2 <__aeabi_fdiv+0x62>
 80008ae:	2380      	movs	r3, #128	@ 0x80
 80008b0:	00ed      	lsls	r5, r5, #3
 80008b2:	04db      	lsls	r3, r3, #19
 80008b4:	431d      	orrs	r5, r3
 80008b6:	2300      	movs	r3, #0
 80008b8:	4699      	mov	r9, r3
 80008ba:	469a      	mov	sl, r3
 80008bc:	3f7f      	subs	r7, #127	@ 0x7f
 80008be:	0274      	lsls	r4, r6, #9
 80008c0:	0073      	lsls	r3, r6, #1
 80008c2:	0a64      	lsrs	r4, r4, #9
 80008c4:	0e1b      	lsrs	r3, r3, #24
 80008c6:	0ff6      	lsrs	r6, r6, #31
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d020      	beq.n	800090e <__aeabi_fdiv+0x7e>
 80008cc:	2bff      	cmp	r3, #255	@ 0xff
 80008ce:	d043      	beq.n	8000958 <__aeabi_fdiv+0xc8>
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	2000      	movs	r0, #0
 80008d4:	00e4      	lsls	r4, r4, #3
 80008d6:	04d2      	lsls	r2, r2, #19
 80008d8:	4314      	orrs	r4, r2
 80008da:	3b7f      	subs	r3, #127	@ 0x7f
 80008dc:	4642      	mov	r2, r8
 80008de:	1aff      	subs	r7, r7, r3
 80008e0:	464b      	mov	r3, r9
 80008e2:	4072      	eors	r2, r6
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d900      	bls.n	80008ea <__aeabi_fdiv+0x5a>
 80008e8:	e09d      	b.n	8000a26 <__aeabi_fdiv+0x196>
 80008ea:	4971      	ldr	r1, [pc, #452]	@ (8000ab0 <__aeabi_fdiv+0x220>)
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	58cb      	ldr	r3, [r1, r3]
 80008f0:	469f      	mov	pc, r3
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d15a      	bne.n	80009ac <__aeabi_fdiv+0x11c>
 80008f6:	2308      	movs	r3, #8
 80008f8:	4699      	mov	r9, r3
 80008fa:	3b06      	subs	r3, #6
 80008fc:	0274      	lsls	r4, r6, #9
 80008fe:	469a      	mov	sl, r3
 8000900:	0073      	lsls	r3, r6, #1
 8000902:	27ff      	movs	r7, #255	@ 0xff
 8000904:	0a64      	lsrs	r4, r4, #9
 8000906:	0e1b      	lsrs	r3, r3, #24
 8000908:	0ff6      	lsrs	r6, r6, #31
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1de      	bne.n	80008cc <__aeabi_fdiv+0x3c>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d13b      	bne.n	800098a <__aeabi_fdiv+0xfa>
 8000912:	2301      	movs	r3, #1
 8000914:	4642      	mov	r2, r8
 8000916:	4649      	mov	r1, r9
 8000918:	4072      	eors	r2, r6
 800091a:	4319      	orrs	r1, r3
 800091c:	290e      	cmp	r1, #14
 800091e:	d818      	bhi.n	8000952 <__aeabi_fdiv+0xc2>
 8000920:	4864      	ldr	r0, [pc, #400]	@ (8000ab4 <__aeabi_fdiv+0x224>)
 8000922:	0089      	lsls	r1, r1, #2
 8000924:	5841      	ldr	r1, [r0, r1]
 8000926:	468f      	mov	pc, r1
 8000928:	4653      	mov	r3, sl
 800092a:	2b02      	cmp	r3, #2
 800092c:	d100      	bne.n	8000930 <__aeabi_fdiv+0xa0>
 800092e:	e0b8      	b.n	8000aa2 <__aeabi_fdiv+0x212>
 8000930:	2b03      	cmp	r3, #3
 8000932:	d06e      	beq.n	8000a12 <__aeabi_fdiv+0x182>
 8000934:	4642      	mov	r2, r8
 8000936:	002c      	movs	r4, r5
 8000938:	2b01      	cmp	r3, #1
 800093a:	d140      	bne.n	80009be <__aeabi_fdiv+0x12e>
 800093c:	2000      	movs	r0, #0
 800093e:	2400      	movs	r4, #0
 8000940:	05c0      	lsls	r0, r0, #23
 8000942:	4320      	orrs	r0, r4
 8000944:	07d2      	lsls	r2, r2, #31
 8000946:	4310      	orrs	r0, r2
 8000948:	bce0      	pop	{r5, r6, r7}
 800094a:	46ba      	mov	sl, r7
 800094c:	46b1      	mov	r9, r6
 800094e:	46a8      	mov	r8, r5
 8000950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000952:	20ff      	movs	r0, #255	@ 0xff
 8000954:	2400      	movs	r4, #0
 8000956:	e7f3      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d120      	bne.n	800099e <__aeabi_fdiv+0x10e>
 800095c:	2302      	movs	r3, #2
 800095e:	3fff      	subs	r7, #255	@ 0xff
 8000960:	e7d8      	b.n	8000914 <__aeabi_fdiv+0x84>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d105      	bne.n	8000972 <__aeabi_fdiv+0xe2>
 8000966:	2304      	movs	r3, #4
 8000968:	4699      	mov	r9, r3
 800096a:	3b03      	subs	r3, #3
 800096c:	2700      	movs	r7, #0
 800096e:	469a      	mov	sl, r3
 8000970:	e7a5      	b.n	80008be <__aeabi_fdiv+0x2e>
 8000972:	0028      	movs	r0, r5
 8000974:	f000 fdce 	bl	8001514 <__clzsi2>
 8000978:	2776      	movs	r7, #118	@ 0x76
 800097a:	1f43      	subs	r3, r0, #5
 800097c:	409d      	lsls	r5, r3
 800097e:	2300      	movs	r3, #0
 8000980:	427f      	negs	r7, r7
 8000982:	4699      	mov	r9, r3
 8000984:	469a      	mov	sl, r3
 8000986:	1a3f      	subs	r7, r7, r0
 8000988:	e799      	b.n	80008be <__aeabi_fdiv+0x2e>
 800098a:	0020      	movs	r0, r4
 800098c:	f000 fdc2 	bl	8001514 <__clzsi2>
 8000990:	1f43      	subs	r3, r0, #5
 8000992:	409c      	lsls	r4, r3
 8000994:	2376      	movs	r3, #118	@ 0x76
 8000996:	425b      	negs	r3, r3
 8000998:	1a1b      	subs	r3, r3, r0
 800099a:	2000      	movs	r0, #0
 800099c:	e79e      	b.n	80008dc <__aeabi_fdiv+0x4c>
 800099e:	2303      	movs	r3, #3
 80009a0:	464a      	mov	r2, r9
 80009a2:	431a      	orrs	r2, r3
 80009a4:	4691      	mov	r9, r2
 80009a6:	2003      	movs	r0, #3
 80009a8:	33fc      	adds	r3, #252	@ 0xfc
 80009aa:	e797      	b.n	80008dc <__aeabi_fdiv+0x4c>
 80009ac:	230c      	movs	r3, #12
 80009ae:	4699      	mov	r9, r3
 80009b0:	3b09      	subs	r3, #9
 80009b2:	27ff      	movs	r7, #255	@ 0xff
 80009b4:	469a      	mov	sl, r3
 80009b6:	e782      	b.n	80008be <__aeabi_fdiv+0x2e>
 80009b8:	2803      	cmp	r0, #3
 80009ba:	d02c      	beq.n	8000a16 <__aeabi_fdiv+0x186>
 80009bc:	0032      	movs	r2, r6
 80009be:	0038      	movs	r0, r7
 80009c0:	307f      	adds	r0, #127	@ 0x7f
 80009c2:	2800      	cmp	r0, #0
 80009c4:	dd47      	ble.n	8000a56 <__aeabi_fdiv+0x1c6>
 80009c6:	0763      	lsls	r3, r4, #29
 80009c8:	d004      	beq.n	80009d4 <__aeabi_fdiv+0x144>
 80009ca:	230f      	movs	r3, #15
 80009cc:	4023      	ands	r3, r4
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fdiv+0x144>
 80009d2:	3404      	adds	r4, #4
 80009d4:	0123      	lsls	r3, r4, #4
 80009d6:	d503      	bpl.n	80009e0 <__aeabi_fdiv+0x150>
 80009d8:	0038      	movs	r0, r7
 80009da:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <__aeabi_fdiv+0x228>)
 80009dc:	3080      	adds	r0, #128	@ 0x80
 80009de:	401c      	ands	r4, r3
 80009e0:	28fe      	cmp	r0, #254	@ 0xfe
 80009e2:	dcb6      	bgt.n	8000952 <__aeabi_fdiv+0xc2>
 80009e4:	01a4      	lsls	r4, r4, #6
 80009e6:	0a64      	lsrs	r4, r4, #9
 80009e8:	b2c0      	uxtb	r0, r0
 80009ea:	e7a9      	b.n	8000940 <__aeabi_fdiv+0xb0>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	2200      	movs	r2, #0
 80009f0:	20ff      	movs	r0, #255	@ 0xff
 80009f2:	03e4      	lsls	r4, r4, #15
 80009f4:	e7a4      	b.n	8000940 <__aeabi_fdiv+0xb0>
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	421d      	tst	r5, r3
 80009fc:	d001      	beq.n	8000a02 <__aeabi_fdiv+0x172>
 80009fe:	421c      	tst	r4, r3
 8000a00:	d00b      	beq.n	8000a1a <__aeabi_fdiv+0x18a>
 8000a02:	2480      	movs	r4, #128	@ 0x80
 8000a04:	03e4      	lsls	r4, r4, #15
 8000a06:	432c      	orrs	r4, r5
 8000a08:	0264      	lsls	r4, r4, #9
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	20ff      	movs	r0, #255	@ 0xff
 8000a0e:	0a64      	lsrs	r4, r4, #9
 8000a10:	e796      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000a12:	4646      	mov	r6, r8
 8000a14:	002c      	movs	r4, r5
 8000a16:	2380      	movs	r3, #128	@ 0x80
 8000a18:	03db      	lsls	r3, r3, #15
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	0264      	lsls	r4, r4, #9
 8000a1e:	0032      	movs	r2, r6
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	e78c      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000a26:	016d      	lsls	r5, r5, #5
 8000a28:	0160      	lsls	r0, r4, #5
 8000a2a:	4285      	cmp	r5, r0
 8000a2c:	d22d      	bcs.n	8000a8a <__aeabi_fdiv+0x1fa>
 8000a2e:	231b      	movs	r3, #27
 8000a30:	2400      	movs	r4, #0
 8000a32:	3f01      	subs	r7, #1
 8000a34:	2601      	movs	r6, #1
 8000a36:	0029      	movs	r1, r5
 8000a38:	0064      	lsls	r4, r4, #1
 8000a3a:	006d      	lsls	r5, r5, #1
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	db01      	blt.n	8000a44 <__aeabi_fdiv+0x1b4>
 8000a40:	4285      	cmp	r5, r0
 8000a42:	d301      	bcc.n	8000a48 <__aeabi_fdiv+0x1b8>
 8000a44:	1a2d      	subs	r5, r5, r0
 8000a46:	4334      	orrs	r4, r6
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f3      	bne.n	8000a36 <__aeabi_fdiv+0x1a6>
 8000a4e:	1e6b      	subs	r3, r5, #1
 8000a50:	419d      	sbcs	r5, r3
 8000a52:	432c      	orrs	r4, r5
 8000a54:	e7b3      	b.n	80009be <__aeabi_fdiv+0x12e>
 8000a56:	2301      	movs	r3, #1
 8000a58:	1a1b      	subs	r3, r3, r0
 8000a5a:	2b1b      	cmp	r3, #27
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_fdiv+0x1d0>
 8000a5e:	e76d      	b.n	800093c <__aeabi_fdiv+0xac>
 8000a60:	0021      	movs	r1, r4
 8000a62:	379e      	adds	r7, #158	@ 0x9e
 8000a64:	40d9      	lsrs	r1, r3
 8000a66:	40bc      	lsls	r4, r7
 8000a68:	000b      	movs	r3, r1
 8000a6a:	1e61      	subs	r1, r4, #1
 8000a6c:	418c      	sbcs	r4, r1
 8000a6e:	4323      	orrs	r3, r4
 8000a70:	0759      	lsls	r1, r3, #29
 8000a72:	d004      	beq.n	8000a7e <__aeabi_fdiv+0x1ee>
 8000a74:	210f      	movs	r1, #15
 8000a76:	4019      	ands	r1, r3
 8000a78:	2904      	cmp	r1, #4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fdiv+0x1ee>
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	0159      	lsls	r1, r3, #5
 8000a80:	d413      	bmi.n	8000aaa <__aeabi_fdiv+0x21a>
 8000a82:	019b      	lsls	r3, r3, #6
 8000a84:	2000      	movs	r0, #0
 8000a86:	0a5c      	lsrs	r4, r3, #9
 8000a88:	e75a      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000a8a:	231a      	movs	r3, #26
 8000a8c:	2401      	movs	r4, #1
 8000a8e:	1a2d      	subs	r5, r5, r0
 8000a90:	e7d0      	b.n	8000a34 <__aeabi_fdiv+0x1a4>
 8000a92:	1e98      	subs	r0, r3, #2
 8000a94:	4243      	negs	r3, r0
 8000a96:	4158      	adcs	r0, r3
 8000a98:	4240      	negs	r0, r0
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	b2c0      	uxtb	r0, r0
 8000aa0:	e74e      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	e74a      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	2400      	movs	r4, #0
 8000aae:	e747      	b.n	8000940 <__aeabi_fdiv+0xb0>
 8000ab0:	08006e40 	.word	0x08006e40
 8000ab4:	08006e80 	.word	0x08006e80
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__eqsf2>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	0042      	lsls	r2, r0, #1
 8000ac0:	024e      	lsls	r6, r1, #9
 8000ac2:	004c      	lsls	r4, r1, #1
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	0a6d      	lsrs	r5, r5, #9
 8000ac8:	0e12      	lsrs	r2, r2, #24
 8000aca:	0fc3      	lsrs	r3, r0, #31
 8000acc:	0a76      	lsrs	r6, r6, #9
 8000ace:	0e24      	lsrs	r4, r4, #24
 8000ad0:	0fc9      	lsrs	r1, r1, #31
 8000ad2:	2aff      	cmp	r2, #255	@ 0xff
 8000ad4:	d010      	beq.n	8000af8 <__eqsf2+0x3c>
 8000ad6:	2cff      	cmp	r4, #255	@ 0xff
 8000ad8:	d00c      	beq.n	8000af4 <__eqsf2+0x38>
 8000ada:	2001      	movs	r0, #1
 8000adc:	42a2      	cmp	r2, r4
 8000ade:	d10a      	bne.n	8000af6 <__eqsf2+0x3a>
 8000ae0:	42b5      	cmp	r5, r6
 8000ae2:	d108      	bne.n	8000af6 <__eqsf2+0x3a>
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d00f      	beq.n	8000b08 <__eqsf2+0x4c>
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	d104      	bne.n	8000af6 <__eqsf2+0x3a>
 8000aec:	0028      	movs	r0, r5
 8000aee:	1e43      	subs	r3, r0, #1
 8000af0:	4198      	sbcs	r0, r3
 8000af2:	e000      	b.n	8000af6 <__eqsf2+0x3a>
 8000af4:	2001      	movs	r0, #1
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	2001      	movs	r0, #1
 8000afa:	2cff      	cmp	r4, #255	@ 0xff
 8000afc:	d1fb      	bne.n	8000af6 <__eqsf2+0x3a>
 8000afe:	4335      	orrs	r5, r6
 8000b00:	d1f9      	bne.n	8000af6 <__eqsf2+0x3a>
 8000b02:	404b      	eors	r3, r1
 8000b04:	0018      	movs	r0, r3
 8000b06:	e7f6      	b.n	8000af6 <__eqsf2+0x3a>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7f4      	b.n	8000af6 <__eqsf2+0x3a>

08000b0c <__gesf2>:
 8000b0c:	b530      	push	{r4, r5, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0244      	lsls	r4, r0, #9
 8000b12:	024d      	lsls	r5, r1, #9
 8000b14:	0fc3      	lsrs	r3, r0, #31
 8000b16:	0048      	lsls	r0, r1, #1
 8000b18:	0a64      	lsrs	r4, r4, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e00      	lsrs	r0, r0, #24
 8000b20:	0fc9      	lsrs	r1, r1, #31
 8000b22:	2aff      	cmp	r2, #255	@ 0xff
 8000b24:	d018      	beq.n	8000b58 <__gesf2+0x4c>
 8000b26:	28ff      	cmp	r0, #255	@ 0xff
 8000b28:	d00a      	beq.n	8000b40 <__gesf2+0x34>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d11e      	bne.n	8000b6c <__gesf2+0x60>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d10a      	bne.n	8000b48 <__gesf2+0x3c>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d029      	beq.n	8000b8a <__gesf2+0x7e>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d12d      	bne.n	8000b96 <__gesf2+0x8a>
 8000b3a:	0048      	lsls	r0, r1, #1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bd30      	pop	{r4, r5, pc}
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d125      	bne.n	8000b90 <__gesf2+0x84>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d101      	bne.n	8000b4c <__gesf2+0x40>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d0f6      	beq.n	8000b3a <__gesf2+0x2e>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d019      	beq.n	8000b84 <__gesf2+0x78>
 8000b50:	2001      	movs	r0, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	4318      	orrs	r0, r3
 8000b56:	e7f2      	b.n	8000b3e <__gesf2+0x32>
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d119      	bne.n	8000b90 <__gesf2+0x84>
 8000b5c:	28ff      	cmp	r0, #255	@ 0xff
 8000b5e:	d1f7      	bne.n	8000b50 <__gesf2+0x44>
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d115      	bne.n	8000b90 <__gesf2+0x84>
 8000b64:	2000      	movs	r0, #0
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d1f2      	bne.n	8000b50 <__gesf2+0x44>
 8000b6a:	e7e8      	b.n	8000b3e <__gesf2+0x32>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d0ef      	beq.n	8000b50 <__gesf2+0x44>
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d1ed      	bne.n	8000b50 <__gesf2+0x44>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	dceb      	bgt.n	8000b50 <__gesf2+0x44>
 8000b78:	db04      	blt.n	8000b84 <__gesf2+0x78>
 8000b7a:	42ac      	cmp	r4, r5
 8000b7c:	d8e8      	bhi.n	8000b50 <__gesf2+0x44>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	42ac      	cmp	r4, r5
 8000b82:	d2dc      	bcs.n	8000b3e <__gesf2+0x32>
 8000b84:	0058      	lsls	r0, r3, #1
 8000b86:	3801      	subs	r0, #1
 8000b88:	e7d9      	b.n	8000b3e <__gesf2+0x32>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d0d7      	beq.n	8000b3e <__gesf2+0x32>
 8000b8e:	e7df      	b.n	8000b50 <__gesf2+0x44>
 8000b90:	2002      	movs	r0, #2
 8000b92:	4240      	negs	r0, r0
 8000b94:	e7d3      	b.n	8000b3e <__gesf2+0x32>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d1da      	bne.n	8000b50 <__gesf2+0x44>
 8000b9a:	e7ee      	b.n	8000b7a <__gesf2+0x6e>

08000b9c <__lesf2>:
 8000b9c:	b530      	push	{r4, r5, lr}
 8000b9e:	0042      	lsls	r2, r0, #1
 8000ba0:	0244      	lsls	r4, r0, #9
 8000ba2:	024d      	lsls	r5, r1, #9
 8000ba4:	0fc3      	lsrs	r3, r0, #31
 8000ba6:	0048      	lsls	r0, r1, #1
 8000ba8:	0a64      	lsrs	r4, r4, #9
 8000baa:	0e12      	lsrs	r2, r2, #24
 8000bac:	0a6d      	lsrs	r5, r5, #9
 8000bae:	0e00      	lsrs	r0, r0, #24
 8000bb0:	0fc9      	lsrs	r1, r1, #31
 8000bb2:	2aff      	cmp	r2, #255	@ 0xff
 8000bb4:	d017      	beq.n	8000be6 <__lesf2+0x4a>
 8000bb6:	28ff      	cmp	r0, #255	@ 0xff
 8000bb8:	d00a      	beq.n	8000bd0 <__lesf2+0x34>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d11b      	bne.n	8000bf6 <__lesf2+0x5a>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d10a      	bne.n	8000bd8 <__lesf2+0x3c>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d01d      	beq.n	8000c02 <__lesf2+0x66>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d12d      	bne.n	8000c26 <__lesf2+0x8a>
 8000bca:	0048      	lsls	r0, r1, #1
 8000bcc:	3801      	subs	r0, #1
 8000bce:	e011      	b.n	8000bf4 <__lesf2+0x58>
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d10e      	bne.n	8000bf2 <__lesf2+0x56>
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d101      	bne.n	8000bdc <__lesf2+0x40>
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d0f6      	beq.n	8000bca <__lesf2+0x2e>
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d10c      	bne.n	8000bfa <__lesf2+0x5e>
 8000be0:	0058      	lsls	r0, r3, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e006      	b.n	8000bf4 <__lesf2+0x58>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d103      	bne.n	8000bf2 <__lesf2+0x56>
 8000bea:	28ff      	cmp	r0, #255	@ 0xff
 8000bec:	d105      	bne.n	8000bfa <__lesf2+0x5e>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d015      	beq.n	8000c1e <__lesf2+0x82>
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d106      	bne.n	8000c08 <__lesf2+0x6c>
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	4318      	orrs	r0, r3
 8000c00:	e7f8      	b.n	8000bf4 <__lesf2+0x58>
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d0f6      	beq.n	8000bf4 <__lesf2+0x58>
 8000c06:	e7f8      	b.n	8000bfa <__lesf2+0x5e>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d1f6      	bne.n	8000bfa <__lesf2+0x5e>
 8000c0c:	4282      	cmp	r2, r0
 8000c0e:	dcf4      	bgt.n	8000bfa <__lesf2+0x5e>
 8000c10:	dbe6      	blt.n	8000be0 <__lesf2+0x44>
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	d8f1      	bhi.n	8000bfa <__lesf2+0x5e>
 8000c16:	2000      	movs	r0, #0
 8000c18:	42ac      	cmp	r4, r5
 8000c1a:	d2eb      	bcs.n	8000bf4 <__lesf2+0x58>
 8000c1c:	e7e0      	b.n	8000be0 <__lesf2+0x44>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d1ea      	bne.n	8000bfa <__lesf2+0x5e>
 8000c24:	e7e6      	b.n	8000bf4 <__lesf2+0x58>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d1e7      	bne.n	8000bfa <__lesf2+0x5e>
 8000c2a:	e7f2      	b.n	8000c12 <__lesf2+0x76>

08000c2c <__aeabi_fmul>:
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	464f      	mov	r7, r9
 8000c30:	4646      	mov	r6, r8
 8000c32:	46d6      	mov	lr, sl
 8000c34:	0044      	lsls	r4, r0, #1
 8000c36:	b5c0      	push	{r6, r7, lr}
 8000c38:	0246      	lsls	r6, r0, #9
 8000c3a:	1c0f      	adds	r7, r1, #0
 8000c3c:	0a76      	lsrs	r6, r6, #9
 8000c3e:	0e24      	lsrs	r4, r4, #24
 8000c40:	0fc5      	lsrs	r5, r0, #31
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fmul+0x1c>
 8000c46:	e0da      	b.n	8000dfe <__aeabi_fmul+0x1d2>
 8000c48:	2cff      	cmp	r4, #255	@ 0xff
 8000c4a:	d074      	beq.n	8000d36 <__aeabi_fmul+0x10a>
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	00f6      	lsls	r6, r6, #3
 8000c50:	04db      	lsls	r3, r3, #19
 8000c52:	431e      	orrs	r6, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	4699      	mov	r9, r3
 8000c58:	469a      	mov	sl, r3
 8000c5a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c5c:	027b      	lsls	r3, r7, #9
 8000c5e:	0a5b      	lsrs	r3, r3, #9
 8000c60:	4698      	mov	r8, r3
 8000c62:	007b      	lsls	r3, r7, #1
 8000c64:	0e1b      	lsrs	r3, r3, #24
 8000c66:	0fff      	lsrs	r7, r7, #31
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d074      	beq.n	8000d56 <__aeabi_fmul+0x12a>
 8000c6c:	2bff      	cmp	r3, #255	@ 0xff
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fmul+0x46>
 8000c70:	e08e      	b.n	8000d90 <__aeabi_fmul+0x164>
 8000c72:	4642      	mov	r2, r8
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	00d2      	lsls	r2, r2, #3
 8000c78:	04c9      	lsls	r1, r1, #19
 8000c7a:	4311      	orrs	r1, r2
 8000c7c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c7e:	002a      	movs	r2, r5
 8000c80:	18e4      	adds	r4, r4, r3
 8000c82:	464b      	mov	r3, r9
 8000c84:	407a      	eors	r2, r7
 8000c86:	4688      	mov	r8, r1
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	dc75      	bgt.n	8000d7a <__aeabi_fmul+0x14e>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	2000      	movs	r0, #0
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	dd0f      	ble.n	8000cb6 <__aeabi_fmul+0x8a>
 8000c96:	4649      	mov	r1, r9
 8000c98:	2301      	movs	r3, #1
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	21a6      	movs	r1, #166	@ 0xa6
 8000c9e:	00c9      	lsls	r1, r1, #3
 8000ca0:	420b      	tst	r3, r1
 8000ca2:	d169      	bne.n	8000d78 <__aeabi_fmul+0x14c>
 8000ca4:	2190      	movs	r1, #144	@ 0x90
 8000ca6:	0089      	lsls	r1, r1, #2
 8000ca8:	420b      	tst	r3, r1
 8000caa:	d000      	beq.n	8000cae <__aeabi_fmul+0x82>
 8000cac:	e100      	b.n	8000eb0 <__aeabi_fmul+0x284>
 8000cae:	2188      	movs	r1, #136	@ 0x88
 8000cb0:	4219      	tst	r1, r3
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fmul+0x8a>
 8000cb4:	e0f5      	b.n	8000ea2 <__aeabi_fmul+0x276>
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	0409      	lsls	r1, r1, #16
 8000cba:	0c09      	lsrs	r1, r1, #16
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	0008      	movs	r0, r1
 8000cc0:	0c35      	lsrs	r5, r6, #16
 8000cc2:	0436      	lsls	r6, r6, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	0c36      	lsrs	r6, r6, #16
 8000cc8:	4370      	muls	r0, r6
 8000cca:	4369      	muls	r1, r5
 8000ccc:	435e      	muls	r6, r3
 8000cce:	435d      	muls	r5, r3
 8000cd0:	1876      	adds	r6, r6, r1
 8000cd2:	0c03      	lsrs	r3, r0, #16
 8000cd4:	199b      	adds	r3, r3, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d903      	bls.n	8000ce2 <__aeabi_fmul+0xb6>
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4465      	add	r5, ip
 8000ce2:	0400      	lsls	r0, r0, #16
 8000ce4:	0419      	lsls	r1, r3, #16
 8000ce6:	0c00      	lsrs	r0, r0, #16
 8000ce8:	1809      	adds	r1, r1, r0
 8000cea:	018e      	lsls	r6, r1, #6
 8000cec:	1e70      	subs	r0, r6, #1
 8000cee:	4186      	sbcs	r6, r0
 8000cf0:	0c1b      	lsrs	r3, r3, #16
 8000cf2:	0e89      	lsrs	r1, r1, #26
 8000cf4:	195b      	adds	r3, r3, r5
 8000cf6:	430e      	orrs	r6, r1
 8000cf8:	019b      	lsls	r3, r3, #6
 8000cfa:	431e      	orrs	r6, r3
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	d46c      	bmi.n	8000dda <__aeabi_fmul+0x1ae>
 8000d00:	0023      	movs	r3, r4
 8000d02:	337f      	adds	r3, #127	@ 0x7f
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_fmul+0xde>
 8000d08:	e0b1      	b.n	8000e6e <__aeabi_fmul+0x242>
 8000d0a:	0015      	movs	r5, r2
 8000d0c:	0771      	lsls	r1, r6, #29
 8000d0e:	d00b      	beq.n	8000d28 <__aeabi_fmul+0xfc>
 8000d10:	200f      	movs	r0, #15
 8000d12:	0021      	movs	r1, r4
 8000d14:	4030      	ands	r0, r6
 8000d16:	2804      	cmp	r0, #4
 8000d18:	d006      	beq.n	8000d28 <__aeabi_fmul+0xfc>
 8000d1a:	3604      	adds	r6, #4
 8000d1c:	0132      	lsls	r2, r6, #4
 8000d1e:	d503      	bpl.n	8000d28 <__aeabi_fmul+0xfc>
 8000d20:	4b6e      	ldr	r3, [pc, #440]	@ (8000edc <__aeabi_fmul+0x2b0>)
 8000d22:	401e      	ands	r6, r3
 8000d24:	000b      	movs	r3, r1
 8000d26:	3380      	adds	r3, #128	@ 0x80
 8000d28:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d2a:	dd00      	ble.n	8000d2e <__aeabi_fmul+0x102>
 8000d2c:	e0bd      	b.n	8000eaa <__aeabi_fmul+0x27e>
 8000d2e:	01b2      	lsls	r2, r6, #6
 8000d30:	0a52      	lsrs	r2, r2, #9
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	e048      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fmul+0x110>
 8000d3a:	e092      	b.n	8000e62 <__aeabi_fmul+0x236>
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	4699      	mov	r9, r3
 8000d40:	3b06      	subs	r3, #6
 8000d42:	469a      	mov	sl, r3
 8000d44:	027b      	lsls	r3, r7, #9
 8000d46:	0a5b      	lsrs	r3, r3, #9
 8000d48:	4698      	mov	r8, r3
 8000d4a:	007b      	lsls	r3, r7, #1
 8000d4c:	24ff      	movs	r4, #255	@ 0xff
 8000d4e:	0e1b      	lsrs	r3, r3, #24
 8000d50:	0fff      	lsrs	r7, r7, #31
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d18a      	bne.n	8000c6c <__aeabi_fmul+0x40>
 8000d56:	4642      	mov	r2, r8
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d164      	bne.n	8000e26 <__aeabi_fmul+0x1fa>
 8000d5c:	4649      	mov	r1, r9
 8000d5e:	3201      	adds	r2, #1
 8000d60:	4311      	orrs	r1, r2
 8000d62:	4689      	mov	r9, r1
 8000d64:	290a      	cmp	r1, #10
 8000d66:	dc08      	bgt.n	8000d7a <__aeabi_fmul+0x14e>
 8000d68:	407d      	eors	r5, r7
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	b2ea      	uxtb	r2, r5
 8000d6e:	2902      	cmp	r1, #2
 8000d70:	dc91      	bgt.n	8000c96 <__aeabi_fmul+0x6a>
 8000d72:	0015      	movs	r5, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e027      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000d78:	0015      	movs	r5, r2
 8000d7a:	4653      	mov	r3, sl
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fmul+0x156>
 8000d80:	e093      	b.n	8000eaa <__aeabi_fmul+0x27e>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d01a      	beq.n	8000dbc <__aeabi_fmul+0x190>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d12c      	bne.n	8000de4 <__aeabi_fmul+0x1b8>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e01b      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000d90:	4643      	mov	r3, r8
 8000d92:	34ff      	adds	r4, #255	@ 0xff
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d055      	beq.n	8000e44 <__aeabi_fmul+0x218>
 8000d98:	2103      	movs	r1, #3
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	0019      	movs	r1, r3
 8000da0:	2b0a      	cmp	r3, #10
 8000da2:	dc00      	bgt.n	8000da6 <__aeabi_fmul+0x17a>
 8000da4:	e092      	b.n	8000ecc <__aeabi_fmul+0x2a0>
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d000      	beq.n	8000dac <__aeabi_fmul+0x180>
 8000daa:	e08c      	b.n	8000ec6 <__aeabi_fmul+0x29a>
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	03d2      	lsls	r2, r2, #15
 8000db0:	4216      	tst	r6, r2
 8000db2:	d003      	beq.n	8000dbc <__aeabi_fmul+0x190>
 8000db4:	4643      	mov	r3, r8
 8000db6:	4213      	tst	r3, r2
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fmul+0x190>
 8000dba:	e07d      	b.n	8000eb8 <__aeabi_fmul+0x28c>
 8000dbc:	2280      	movs	r2, #128	@ 0x80
 8000dbe:	03d2      	lsls	r2, r2, #15
 8000dc0:	4332      	orrs	r2, r6
 8000dc2:	0252      	lsls	r2, r2, #9
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	23ff      	movs	r3, #255	@ 0xff
 8000dc8:	05d8      	lsls	r0, r3, #23
 8000dca:	07ed      	lsls	r5, r5, #31
 8000dcc:	4310      	orrs	r0, r2
 8000dce:	4328      	orrs	r0, r5
 8000dd0:	bce0      	pop	{r5, r6, r7}
 8000dd2:	46ba      	mov	sl, r7
 8000dd4:	46b1      	mov	r9, r6
 8000dd6:	46a8      	mov	r8, r5
 8000dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dda:	2301      	movs	r3, #1
 8000ddc:	0015      	movs	r5, r2
 8000dde:	0871      	lsrs	r1, r6, #1
 8000de0:	401e      	ands	r6, r3
 8000de2:	430e      	orrs	r6, r1
 8000de4:	0023      	movs	r3, r4
 8000de6:	3380      	adds	r3, #128	@ 0x80
 8000de8:	1c61      	adds	r1, r4, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dd41      	ble.n	8000e72 <__aeabi_fmul+0x246>
 8000dee:	0772      	lsls	r2, r6, #29
 8000df0:	d094      	beq.n	8000d1c <__aeabi_fmul+0xf0>
 8000df2:	220f      	movs	r2, #15
 8000df4:	4032      	ands	r2, r6
 8000df6:	2a04      	cmp	r2, #4
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fmul+0x1d0>
 8000dfa:	e78e      	b.n	8000d1a <__aeabi_fmul+0xee>
 8000dfc:	e78e      	b.n	8000d1c <__aeabi_fmul+0xf0>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d105      	bne.n	8000e0e <__aeabi_fmul+0x1e2>
 8000e02:	2304      	movs	r3, #4
 8000e04:	4699      	mov	r9, r3
 8000e06:	3b03      	subs	r3, #3
 8000e08:	2400      	movs	r4, #0
 8000e0a:	469a      	mov	sl, r3
 8000e0c:	e726      	b.n	8000c5c <__aeabi_fmul+0x30>
 8000e0e:	0030      	movs	r0, r6
 8000e10:	f000 fb80 	bl	8001514 <__clzsi2>
 8000e14:	2476      	movs	r4, #118	@ 0x76
 8000e16:	1f43      	subs	r3, r0, #5
 8000e18:	409e      	lsls	r6, r3
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	4264      	negs	r4, r4
 8000e1e:	4699      	mov	r9, r3
 8000e20:	469a      	mov	sl, r3
 8000e22:	1a24      	subs	r4, r4, r0
 8000e24:	e71a      	b.n	8000c5c <__aeabi_fmul+0x30>
 8000e26:	4640      	mov	r0, r8
 8000e28:	f000 fb74 	bl	8001514 <__clzsi2>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	1a24      	subs	r4, r4, r0
 8000e30:	3c76      	subs	r4, #118	@ 0x76
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	dca1      	bgt.n	8000d7a <__aeabi_fmul+0x14e>
 8000e36:	4643      	mov	r3, r8
 8000e38:	3805      	subs	r0, #5
 8000e3a:	4083      	lsls	r3, r0
 8000e3c:	407d      	eors	r5, r7
 8000e3e:	4698      	mov	r8, r3
 8000e40:	b2ea      	uxtb	r2, r5
 8000e42:	e724      	b.n	8000c8e <__aeabi_fmul+0x62>
 8000e44:	464a      	mov	r2, r9
 8000e46:	3302      	adds	r3, #2
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	002a      	movs	r2, r5
 8000e4c:	407a      	eors	r2, r7
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	dc92      	bgt.n	8000d7a <__aeabi_fmul+0x14e>
 8000e54:	4649      	mov	r1, r9
 8000e56:	0015      	movs	r5, r2
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d026      	beq.n	8000eaa <__aeabi_fmul+0x27e>
 8000e5c:	4699      	mov	r9, r3
 8000e5e:	2002      	movs	r0, #2
 8000e60:	e719      	b.n	8000c96 <__aeabi_fmul+0x6a>
 8000e62:	230c      	movs	r3, #12
 8000e64:	4699      	mov	r9, r3
 8000e66:	3b09      	subs	r3, #9
 8000e68:	24ff      	movs	r4, #255	@ 0xff
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	e6f6      	b.n	8000c5c <__aeabi_fmul+0x30>
 8000e6e:	0015      	movs	r5, r2
 8000e70:	0021      	movs	r1, r4
 8000e72:	2201      	movs	r2, #1
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b1b      	cmp	r3, #27
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fmul+0x250>
 8000e7a:	e786      	b.n	8000d8a <__aeabi_fmul+0x15e>
 8000e7c:	319e      	adds	r1, #158	@ 0x9e
 8000e7e:	0032      	movs	r2, r6
 8000e80:	408e      	lsls	r6, r1
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e73      	subs	r3, r6, #1
 8000e86:	419e      	sbcs	r6, r3
 8000e88:	4332      	orrs	r2, r6
 8000e8a:	0753      	lsls	r3, r2, #29
 8000e8c:	d004      	beq.n	8000e98 <__aeabi_fmul+0x26c>
 8000e8e:	230f      	movs	r3, #15
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fmul+0x26c>
 8000e96:	3204      	adds	r2, #4
 8000e98:	0153      	lsls	r3, r2, #5
 8000e9a:	d510      	bpl.n	8000ebe <__aeabi_fmul+0x292>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	e792      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000ea2:	003d      	movs	r5, r7
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	4682      	mov	sl, r0
 8000ea8:	e767      	b.n	8000d7a <__aeabi_fmul+0x14e>
 8000eaa:	23ff      	movs	r3, #255	@ 0xff
 8000eac:	2200      	movs	r2, #0
 8000eae:	e78b      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	03d2      	lsls	r2, r2, #15
 8000eb6:	e786      	b.n	8000dc6 <__aeabi_fmul+0x19a>
 8000eb8:	003d      	movs	r5, r7
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	e783      	b.n	8000dc6 <__aeabi_fmul+0x19a>
 8000ebe:	0192      	lsls	r2, r2, #6
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	0a52      	lsrs	r2, r2, #9
 8000ec4:	e780      	b.n	8000dc8 <__aeabi_fmul+0x19c>
 8000ec6:	003d      	movs	r5, r7
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e777      	b.n	8000dbc <__aeabi_fmul+0x190>
 8000ecc:	002a      	movs	r2, r5
 8000ece:	2301      	movs	r3, #1
 8000ed0:	407a      	eors	r2, r7
 8000ed2:	408b      	lsls	r3, r1
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	e6e9      	b.n	8000cae <__aeabi_fmul+0x82>
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	f7ffffff 	.word	0xf7ffffff

08000ee0 <__aeabi_fsub>:
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee2:	4647      	mov	r7, r8
 8000ee4:	46ce      	mov	lr, r9
 8000ee6:	0243      	lsls	r3, r0, #9
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	0a5f      	lsrs	r7, r3, #9
 8000eec:	099b      	lsrs	r3, r3, #6
 8000eee:	0045      	lsls	r5, r0, #1
 8000ef0:	004a      	lsls	r2, r1, #1
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	024b      	lsls	r3, r1, #9
 8000ef6:	0fc4      	lsrs	r4, r0, #31
 8000ef8:	0fce      	lsrs	r6, r1, #31
 8000efa:	0e2d      	lsrs	r5, r5, #24
 8000efc:	0a58      	lsrs	r0, r3, #9
 8000efe:	0e12      	lsrs	r2, r2, #24
 8000f00:	0999      	lsrs	r1, r3, #6
 8000f02:	2aff      	cmp	r2, #255	@ 0xff
 8000f04:	d06b      	beq.n	8000fde <__aeabi_fsub+0xfe>
 8000f06:	2301      	movs	r3, #1
 8000f08:	405e      	eors	r6, r3
 8000f0a:	1aab      	subs	r3, r5, r2
 8000f0c:	42b4      	cmp	r4, r6
 8000f0e:	d04b      	beq.n	8000fa8 <__aeabi_fsub+0xc8>
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_fsub+0x36>
 8000f14:	e0ff      	b.n	8001116 <__aeabi_fsub+0x236>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0x3c>
 8000f1a:	e088      	b.n	800102e <__aeabi_fsub+0x14e>
 8000f1c:	2dff      	cmp	r5, #255	@ 0xff
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_fsub+0x42>
 8000f20:	e0ef      	b.n	8001102 <__aeabi_fsub+0x222>
 8000f22:	2280      	movs	r2, #128	@ 0x80
 8000f24:	04d2      	lsls	r2, r2, #19
 8000f26:	4311      	orrs	r1, r2
 8000f28:	2001      	movs	r0, #1
 8000f2a:	2b1b      	cmp	r3, #27
 8000f2c:	dc08      	bgt.n	8000f40 <__aeabi_fsub+0x60>
 8000f2e:	0008      	movs	r0, r1
 8000f30:	2220      	movs	r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4099      	lsls	r1, r3
 8000f38:	000b      	movs	r3, r1
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	4193      	sbcs	r3, r2
 8000f3e:	4318      	orrs	r0, r3
 8000f40:	4663      	mov	r3, ip
 8000f42:	1a1b      	subs	r3, r3, r0
 8000f44:	469c      	mov	ip, r3
 8000f46:	4663      	mov	r3, ip
 8000f48:	015b      	lsls	r3, r3, #5
 8000f4a:	d400      	bmi.n	8000f4e <__aeabi_fsub+0x6e>
 8000f4c:	e0cd      	b.n	80010ea <__aeabi_fsub+0x20a>
 8000f4e:	4663      	mov	r3, ip
 8000f50:	019f      	lsls	r7, r3, #6
 8000f52:	09bf      	lsrs	r7, r7, #6
 8000f54:	0038      	movs	r0, r7
 8000f56:	f000 fadd 	bl	8001514 <__clzsi2>
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	3805      	subs	r0, #5
 8000f5e:	4083      	lsls	r3, r0
 8000f60:	4285      	cmp	r5, r0
 8000f62:	dc00      	bgt.n	8000f66 <__aeabi_fsub+0x86>
 8000f64:	e0a2      	b.n	80010ac <__aeabi_fsub+0x1cc>
 8000f66:	4ab7      	ldr	r2, [pc, #732]	@ (8001244 <__aeabi_fsub+0x364>)
 8000f68:	1a2d      	subs	r5, r5, r0
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	075a      	lsls	r2, r3, #29
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x94>
 8000f72:	e0c3      	b.n	80010fc <__aeabi_fsub+0x21c>
 8000f74:	220f      	movs	r2, #15
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x9e>
 8000f7c:	e0be      	b.n	80010fc <__aeabi_fsub+0x21c>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	4698      	mov	r8, r3
 8000f82:	44c4      	add	ip, r8
 8000f84:	4663      	mov	r3, ip
 8000f86:	015b      	lsls	r3, r3, #5
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_fsub+0xac>
 8000f8a:	e0b7      	b.n	80010fc <__aeabi_fsub+0x21c>
 8000f8c:	1c68      	adds	r0, r5, #1
 8000f8e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f90:	d000      	beq.n	8000f94 <__aeabi_fsub+0xb4>
 8000f92:	e0a5      	b.n	80010e0 <__aeabi_fsub+0x200>
 8000f94:	20ff      	movs	r0, #255	@ 0xff
 8000f96:	2200      	movs	r2, #0
 8000f98:	05c0      	lsls	r0, r0, #23
 8000f9a:	4310      	orrs	r0, r2
 8000f9c:	07e4      	lsls	r4, r4, #31
 8000f9e:	4320      	orrs	r0, r4
 8000fa0:	bcc0      	pop	{r6, r7}
 8000fa2:	46b9      	mov	r9, r7
 8000fa4:	46b0      	mov	r8, r6
 8000fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_fsub+0xce>
 8000fac:	e1eb      	b.n	8001386 <__aeabi_fsub+0x4a6>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d046      	beq.n	8001040 <__aeabi_fsub+0x160>
 8000fb2:	2dff      	cmp	r5, #255	@ 0xff
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0xd8>
 8000fb6:	e0a4      	b.n	8001102 <__aeabi_fsub+0x222>
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	04d2      	lsls	r2, r2, #19
 8000fbc:	4311      	orrs	r1, r2
 8000fbe:	2b1b      	cmp	r3, #27
 8000fc0:	dc00      	bgt.n	8000fc4 <__aeabi_fsub+0xe4>
 8000fc2:	e0fb      	b.n	80011bc <__aeabi_fsub+0x2dc>
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	002b      	movs	r3, r5
 8000fca:	44c4      	add	ip, r8
 8000fcc:	4662      	mov	r2, ip
 8000fce:	08d7      	lsrs	r7, r2, #3
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0xf6>
 8000fd4:	e095      	b.n	8001102 <__aeabi_fsub+0x222>
 8000fd6:	027a      	lsls	r2, r7, #9
 8000fd8:	0a52      	lsrs	r2, r2, #9
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	e7dc      	b.n	8000f98 <__aeabi_fsub+0xb8>
 8000fde:	002b      	movs	r3, r5
 8000fe0:	3bff      	subs	r3, #255	@ 0xff
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	2900      	cmp	r1, #0
 8000fe6:	d118      	bne.n	800101a <__aeabi_fsub+0x13a>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	405e      	eors	r6, r3
 8000fec:	42b4      	cmp	r4, r6
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x112>
 8000ff0:	e0ca      	b.n	8001188 <__aeabi_fsub+0x2a8>
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d02d      	beq.n	8001054 <__aeabi_fsub+0x174>
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fsub+0x11e>
 8000ffc:	e13c      	b.n	8001278 <__aeabi_fsub+0x398>
 8000ffe:	23ff      	movs	r3, #255	@ 0xff
 8001000:	4664      	mov	r4, ip
 8001002:	2c00      	cmp	r4, #0
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x128>
 8001006:	e15f      	b.n	80012c8 <__aeabi_fsub+0x3e8>
 8001008:	1e5d      	subs	r5, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x130>
 800100e:	e174      	b.n	80012fa <__aeabi_fsub+0x41a>
 8001010:	0034      	movs	r4, r6
 8001012:	2bff      	cmp	r3, #255	@ 0xff
 8001014:	d074      	beq.n	8001100 <__aeabi_fsub+0x220>
 8001016:	002b      	movs	r3, r5
 8001018:	e103      	b.n	8001222 <__aeabi_fsub+0x342>
 800101a:	42b4      	cmp	r4, r6
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0x140>
 800101e:	e09c      	b.n	800115a <__aeabi_fsub+0x27a>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d017      	beq.n	8001054 <__aeabi_fsub+0x174>
 8001024:	2d00      	cmp	r5, #0
 8001026:	d0ea      	beq.n	8000ffe <__aeabi_fsub+0x11e>
 8001028:	0007      	movs	r7, r0
 800102a:	0034      	movs	r4, r6
 800102c:	e06c      	b.n	8001108 <__aeabi_fsub+0x228>
 800102e:	2900      	cmp	r1, #0
 8001030:	d0cc      	beq.n	8000fcc <__aeabi_fsub+0xec>
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d02b      	beq.n	8001090 <__aeabi_fsub+0x1b0>
 8001038:	2bff      	cmp	r3, #255	@ 0xff
 800103a:	d062      	beq.n	8001102 <__aeabi_fsub+0x222>
 800103c:	0013      	movs	r3, r2
 800103e:	e773      	b.n	8000f28 <__aeabi_fsub+0x48>
 8001040:	2900      	cmp	r1, #0
 8001042:	d0c3      	beq.n	8000fcc <__aeabi_fsub+0xec>
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d100      	bne.n	800104c <__aeabi_fsub+0x16c>
 800104a:	e11e      	b.n	800128a <__aeabi_fsub+0x3aa>
 800104c:	2bff      	cmp	r3, #255	@ 0xff
 800104e:	d058      	beq.n	8001102 <__aeabi_fsub+0x222>
 8001050:	0013      	movs	r3, r2
 8001052:	e7b4      	b.n	8000fbe <__aeabi_fsub+0xde>
 8001054:	22fe      	movs	r2, #254	@ 0xfe
 8001056:	1c6b      	adds	r3, r5, #1
 8001058:	421a      	tst	r2, r3
 800105a:	d10d      	bne.n	8001078 <__aeabi_fsub+0x198>
 800105c:	2d00      	cmp	r5, #0
 800105e:	d060      	beq.n	8001122 <__aeabi_fsub+0x242>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x188>
 8001066:	e120      	b.n	80012aa <__aeabi_fsub+0x3ca>
 8001068:	2900      	cmp	r1, #0
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x18e>
 800106c:	e128      	b.n	80012c0 <__aeabi_fsub+0x3e0>
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	2400      	movs	r4, #0
 8001072:	20ff      	movs	r0, #255	@ 0xff
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	e78f      	b.n	8000f98 <__aeabi_fsub+0xb8>
 8001078:	4663      	mov	r3, ip
 800107a:	1a5f      	subs	r7, r3, r1
 800107c:	017b      	lsls	r3, r7, #5
 800107e:	d500      	bpl.n	8001082 <__aeabi_fsub+0x1a2>
 8001080:	e0fe      	b.n	8001280 <__aeabi_fsub+0x3a0>
 8001082:	2f00      	cmp	r7, #0
 8001084:	d000      	beq.n	8001088 <__aeabi_fsub+0x1a8>
 8001086:	e765      	b.n	8000f54 <__aeabi_fsub+0x74>
 8001088:	2400      	movs	r4, #0
 800108a:	2000      	movs	r0, #0
 800108c:	2200      	movs	r2, #0
 800108e:	e783      	b.n	8000f98 <__aeabi_fsub+0xb8>
 8001090:	4663      	mov	r3, ip
 8001092:	1a59      	subs	r1, r3, r1
 8001094:	014b      	lsls	r3, r1, #5
 8001096:	d400      	bmi.n	800109a <__aeabi_fsub+0x1ba>
 8001098:	e119      	b.n	80012ce <__aeabi_fsub+0x3ee>
 800109a:	018f      	lsls	r7, r1, #6
 800109c:	09bf      	lsrs	r7, r7, #6
 800109e:	0038      	movs	r0, r7
 80010a0:	f000 fa38 	bl	8001514 <__clzsi2>
 80010a4:	003b      	movs	r3, r7
 80010a6:	3805      	subs	r0, #5
 80010a8:	4083      	lsls	r3, r0
 80010aa:	2501      	movs	r5, #1
 80010ac:	2220      	movs	r2, #32
 80010ae:	1b40      	subs	r0, r0, r5
 80010b0:	3001      	adds	r0, #1
 80010b2:	1a12      	subs	r2, r2, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	4093      	lsls	r3, r2
 80010b8:	40c1      	lsrs	r1, r0
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4193      	sbcs	r3, r2
 80010be:	4319      	orrs	r1, r3
 80010c0:	468c      	mov	ip, r1
 80010c2:	1e0b      	subs	r3, r1, #0
 80010c4:	d0e1      	beq.n	800108a <__aeabi_fsub+0x1aa>
 80010c6:	075b      	lsls	r3, r3, #29
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x1ec>
 80010ca:	e152      	b.n	8001372 <__aeabi_fsub+0x492>
 80010cc:	230f      	movs	r3, #15
 80010ce:	2500      	movs	r5, #0
 80010d0:	400b      	ands	r3, r1
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x1f8>
 80010d6:	e752      	b.n	8000f7e <__aeabi_fsub+0x9e>
 80010d8:	2001      	movs	r0, #1
 80010da:	014a      	lsls	r2, r1, #5
 80010dc:	d400      	bmi.n	80010e0 <__aeabi_fsub+0x200>
 80010de:	e092      	b.n	8001206 <__aeabi_fsub+0x326>
 80010e0:	b2c0      	uxtb	r0, r0
 80010e2:	4663      	mov	r3, ip
 80010e4:	019a      	lsls	r2, r3, #6
 80010e6:	0a52      	lsrs	r2, r2, #9
 80010e8:	e756      	b.n	8000f98 <__aeabi_fsub+0xb8>
 80010ea:	4663      	mov	r3, ip
 80010ec:	075b      	lsls	r3, r3, #29
 80010ee:	d005      	beq.n	80010fc <__aeabi_fsub+0x21c>
 80010f0:	230f      	movs	r3, #15
 80010f2:	4662      	mov	r2, ip
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d000      	beq.n	80010fc <__aeabi_fsub+0x21c>
 80010fa:	e740      	b.n	8000f7e <__aeabi_fsub+0x9e>
 80010fc:	002b      	movs	r3, r5
 80010fe:	e765      	b.n	8000fcc <__aeabi_fsub+0xec>
 8001100:	0007      	movs	r7, r0
 8001102:	2f00      	cmp	r7, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x228>
 8001106:	e745      	b.n	8000f94 <__aeabi_fsub+0xb4>
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	03d2      	lsls	r2, r2, #15
 800110c:	433a      	orrs	r2, r7
 800110e:	0252      	lsls	r2, r2, #9
 8001110:	20ff      	movs	r0, #255	@ 0xff
 8001112:	0a52      	lsrs	r2, r2, #9
 8001114:	e740      	b.n	8000f98 <__aeabi_fsub+0xb8>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d179      	bne.n	800120e <__aeabi_fsub+0x32e>
 800111a:	22fe      	movs	r2, #254	@ 0xfe
 800111c:	1c6b      	adds	r3, r5, #1
 800111e:	421a      	tst	r2, r3
 8001120:	d1aa      	bne.n	8001078 <__aeabi_fsub+0x198>
 8001122:	4663      	mov	r3, ip
 8001124:	2b00      	cmp	r3, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x24a>
 8001128:	e0f5      	b.n	8001316 <__aeabi_fsub+0x436>
 800112a:	2900      	cmp	r1, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x250>
 800112e:	e0d1      	b.n	80012d4 <__aeabi_fsub+0x3f4>
 8001130:	1a5f      	subs	r7, r3, r1
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	04db      	lsls	r3, r3, #19
 8001136:	421f      	tst	r7, r3
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x25c>
 800113a:	e10e      	b.n	800135a <__aeabi_fsub+0x47a>
 800113c:	4662      	mov	r2, ip
 800113e:	2401      	movs	r4, #1
 8001140:	1a8a      	subs	r2, r1, r2
 8001142:	4694      	mov	ip, r2
 8001144:	2000      	movs	r0, #0
 8001146:	4034      	ands	r4, r6
 8001148:	2a00      	cmp	r2, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x26e>
 800114c:	e724      	b.n	8000f98 <__aeabi_fsub+0xb8>
 800114e:	2001      	movs	r0, #1
 8001150:	421a      	tst	r2, r3
 8001152:	d1c6      	bne.n	80010e2 <__aeabi_fsub+0x202>
 8001154:	2300      	movs	r3, #0
 8001156:	08d7      	lsrs	r7, r2, #3
 8001158:	e73d      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d017      	beq.n	800118e <__aeabi_fsub+0x2ae>
 800115e:	2d00      	cmp	r5, #0
 8001160:	d000      	beq.n	8001164 <__aeabi_fsub+0x284>
 8001162:	e0af      	b.n	80012c4 <__aeabi_fsub+0x3e4>
 8001164:	23ff      	movs	r3, #255	@ 0xff
 8001166:	4665      	mov	r5, ip
 8001168:	2d00      	cmp	r5, #0
 800116a:	d100      	bne.n	800116e <__aeabi_fsub+0x28e>
 800116c:	e0ad      	b.n	80012ca <__aeabi_fsub+0x3ea>
 800116e:	1e5e      	subs	r6, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d100      	bne.n	8001176 <__aeabi_fsub+0x296>
 8001174:	e089      	b.n	800128a <__aeabi_fsub+0x3aa>
 8001176:	2bff      	cmp	r3, #255	@ 0xff
 8001178:	d0c2      	beq.n	8001100 <__aeabi_fsub+0x220>
 800117a:	2e1b      	cmp	r6, #27
 800117c:	dc00      	bgt.n	8001180 <__aeabi_fsub+0x2a0>
 800117e:	e0ab      	b.n	80012d8 <__aeabi_fsub+0x3f8>
 8001180:	1d4b      	adds	r3, r1, #5
 8001182:	469c      	mov	ip, r3
 8001184:	0013      	movs	r3, r2
 8001186:	e721      	b.n	8000fcc <__aeabi_fsub+0xec>
 8001188:	464b      	mov	r3, r9
 800118a:	2b00      	cmp	r3, #0
 800118c:	d170      	bne.n	8001270 <__aeabi_fsub+0x390>
 800118e:	22fe      	movs	r2, #254	@ 0xfe
 8001190:	1c6b      	adds	r3, r5, #1
 8001192:	421a      	tst	r2, r3
 8001194:	d15e      	bne.n	8001254 <__aeabi_fsub+0x374>
 8001196:	2d00      	cmp	r5, #0
 8001198:	d000      	beq.n	800119c <__aeabi_fsub+0x2bc>
 800119a:	e0c3      	b.n	8001324 <__aeabi_fsub+0x444>
 800119c:	4663      	mov	r3, ip
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x2c4>
 80011a2:	e0d0      	b.n	8001346 <__aeabi_fsub+0x466>
 80011a4:	2900      	cmp	r1, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x2ca>
 80011a8:	e094      	b.n	80012d4 <__aeabi_fsub+0x3f4>
 80011aa:	000a      	movs	r2, r1
 80011ac:	4462      	add	r2, ip
 80011ae:	0153      	lsls	r3, r2, #5
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_fsub+0x2d4>
 80011b2:	e0d8      	b.n	8001366 <__aeabi_fsub+0x486>
 80011b4:	0192      	lsls	r2, r2, #6
 80011b6:	2001      	movs	r0, #1
 80011b8:	0a52      	lsrs	r2, r2, #9
 80011ba:	e6ed      	b.n	8000f98 <__aeabi_fsub+0xb8>
 80011bc:	0008      	movs	r0, r1
 80011be:	2220      	movs	r2, #32
 80011c0:	40d8      	lsrs	r0, r3
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4099      	lsls	r1, r3
 80011c6:	000b      	movs	r3, r1
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	4193      	sbcs	r3, r2
 80011cc:	4303      	orrs	r3, r0
 80011ce:	449c      	add	ip, r3
 80011d0:	4663      	mov	r3, ip
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	d589      	bpl.n	80010ea <__aeabi_fsub+0x20a>
 80011d6:	3501      	adds	r5, #1
 80011d8:	2dff      	cmp	r5, #255	@ 0xff
 80011da:	d100      	bne.n	80011de <__aeabi_fsub+0x2fe>
 80011dc:	e6da      	b.n	8000f94 <__aeabi_fsub+0xb4>
 80011de:	4662      	mov	r2, ip
 80011e0:	2301      	movs	r3, #1
 80011e2:	4919      	ldr	r1, [pc, #100]	@ (8001248 <__aeabi_fsub+0x368>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	0852      	lsrs	r2, r2, #1
 80011e8:	400a      	ands	r2, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	4694      	mov	ip, r2
 80011f0:	075b      	lsls	r3, r3, #29
 80011f2:	d004      	beq.n	80011fe <__aeabi_fsub+0x31e>
 80011f4:	230f      	movs	r3, #15
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d000      	beq.n	80011fe <__aeabi_fsub+0x31e>
 80011fc:	e6bf      	b.n	8000f7e <__aeabi_fsub+0x9e>
 80011fe:	4663      	mov	r3, ip
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	d500      	bpl.n	8001206 <__aeabi_fsub+0x326>
 8001204:	e6c2      	b.n	8000f8c <__aeabi_fsub+0xac>
 8001206:	4663      	mov	r3, ip
 8001208:	08df      	lsrs	r7, r3, #3
 800120a:	002b      	movs	r3, r5
 800120c:	e6e3      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 800120e:	1b53      	subs	r3, r2, r5
 8001210:	2d00      	cmp	r5, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_fsub+0x336>
 8001214:	e6f4      	b.n	8001000 <__aeabi_fsub+0x120>
 8001216:	2080      	movs	r0, #128	@ 0x80
 8001218:	4664      	mov	r4, ip
 800121a:	04c0      	lsls	r0, r0, #19
 800121c:	4304      	orrs	r4, r0
 800121e:	46a4      	mov	ip, r4
 8001220:	0034      	movs	r4, r6
 8001222:	2001      	movs	r0, #1
 8001224:	2b1b      	cmp	r3, #27
 8001226:	dc09      	bgt.n	800123c <__aeabi_fsub+0x35c>
 8001228:	2520      	movs	r5, #32
 800122a:	4660      	mov	r0, ip
 800122c:	40d8      	lsrs	r0, r3
 800122e:	1aeb      	subs	r3, r5, r3
 8001230:	4665      	mov	r5, ip
 8001232:	409d      	lsls	r5, r3
 8001234:	002b      	movs	r3, r5
 8001236:	1e5d      	subs	r5, r3, #1
 8001238:	41ab      	sbcs	r3, r5
 800123a:	4318      	orrs	r0, r3
 800123c:	1a0b      	subs	r3, r1, r0
 800123e:	469c      	mov	ip, r3
 8001240:	0015      	movs	r5, r2
 8001242:	e680      	b.n	8000f46 <__aeabi_fsub+0x66>
 8001244:	fbffffff 	.word	0xfbffffff
 8001248:	7dffffff 	.word	0x7dffffff
 800124c:	22fe      	movs	r2, #254	@ 0xfe
 800124e:	1c6b      	adds	r3, r5, #1
 8001250:	4213      	tst	r3, r2
 8001252:	d0a3      	beq.n	800119c <__aeabi_fsub+0x2bc>
 8001254:	2bff      	cmp	r3, #255	@ 0xff
 8001256:	d100      	bne.n	800125a <__aeabi_fsub+0x37a>
 8001258:	e69c      	b.n	8000f94 <__aeabi_fsub+0xb4>
 800125a:	4461      	add	r1, ip
 800125c:	0849      	lsrs	r1, r1, #1
 800125e:	074a      	lsls	r2, r1, #29
 8001260:	d049      	beq.n	80012f6 <__aeabi_fsub+0x416>
 8001262:	220f      	movs	r2, #15
 8001264:	400a      	ands	r2, r1
 8001266:	2a04      	cmp	r2, #4
 8001268:	d045      	beq.n	80012f6 <__aeabi_fsub+0x416>
 800126a:	1d0a      	adds	r2, r1, #4
 800126c:	4694      	mov	ip, r2
 800126e:	e6ad      	b.n	8000fcc <__aeabi_fsub+0xec>
 8001270:	2d00      	cmp	r5, #0
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0x396>
 8001274:	e776      	b.n	8001164 <__aeabi_fsub+0x284>
 8001276:	e68d      	b.n	8000f94 <__aeabi_fsub+0xb4>
 8001278:	0034      	movs	r4, r6
 800127a:	20ff      	movs	r0, #255	@ 0xff
 800127c:	2200      	movs	r2, #0
 800127e:	e68b      	b.n	8000f98 <__aeabi_fsub+0xb8>
 8001280:	4663      	mov	r3, ip
 8001282:	2401      	movs	r4, #1
 8001284:	1acf      	subs	r7, r1, r3
 8001286:	4034      	ands	r4, r6
 8001288:	e664      	b.n	8000f54 <__aeabi_fsub+0x74>
 800128a:	4461      	add	r1, ip
 800128c:	014b      	lsls	r3, r1, #5
 800128e:	d56d      	bpl.n	800136c <__aeabi_fsub+0x48c>
 8001290:	0848      	lsrs	r0, r1, #1
 8001292:	4944      	ldr	r1, [pc, #272]	@ (80013a4 <__aeabi_fsub+0x4c4>)
 8001294:	4001      	ands	r1, r0
 8001296:	0743      	lsls	r3, r0, #29
 8001298:	d02c      	beq.n	80012f4 <__aeabi_fsub+0x414>
 800129a:	230f      	movs	r3, #15
 800129c:	4003      	ands	r3, r0
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d028      	beq.n	80012f4 <__aeabi_fsub+0x414>
 80012a2:	1d0b      	adds	r3, r1, #4
 80012a4:	469c      	mov	ip, r3
 80012a6:	2302      	movs	r3, #2
 80012a8:	e690      	b.n	8000fcc <__aeabi_fsub+0xec>
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0x3d0>
 80012ae:	e72b      	b.n	8001108 <__aeabi_fsub+0x228>
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	03db      	lsls	r3, r3, #15
 80012b4:	429f      	cmp	r7, r3
 80012b6:	d200      	bcs.n	80012ba <__aeabi_fsub+0x3da>
 80012b8:	e726      	b.n	8001108 <__aeabi_fsub+0x228>
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d300      	bcc.n	80012c0 <__aeabi_fsub+0x3e0>
 80012be:	e723      	b.n	8001108 <__aeabi_fsub+0x228>
 80012c0:	2401      	movs	r4, #1
 80012c2:	4034      	ands	r4, r6
 80012c4:	0007      	movs	r7, r0
 80012c6:	e71f      	b.n	8001108 <__aeabi_fsub+0x228>
 80012c8:	0034      	movs	r4, r6
 80012ca:	468c      	mov	ip, r1
 80012cc:	e67e      	b.n	8000fcc <__aeabi_fsub+0xec>
 80012ce:	2301      	movs	r3, #1
 80012d0:	08cf      	lsrs	r7, r1, #3
 80012d2:	e680      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e67e      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 80012d8:	2020      	movs	r0, #32
 80012da:	4665      	mov	r5, ip
 80012dc:	1b80      	subs	r0, r0, r6
 80012de:	4085      	lsls	r5, r0
 80012e0:	4663      	mov	r3, ip
 80012e2:	0028      	movs	r0, r5
 80012e4:	40f3      	lsrs	r3, r6
 80012e6:	1e45      	subs	r5, r0, #1
 80012e8:	41a8      	sbcs	r0, r5
 80012ea:	4303      	orrs	r3, r0
 80012ec:	469c      	mov	ip, r3
 80012ee:	0015      	movs	r5, r2
 80012f0:	448c      	add	ip, r1
 80012f2:	e76d      	b.n	80011d0 <__aeabi_fsub+0x2f0>
 80012f4:	2302      	movs	r3, #2
 80012f6:	08cf      	lsrs	r7, r1, #3
 80012f8:	e66d      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 80012fa:	1b0f      	subs	r7, r1, r4
 80012fc:	017b      	lsls	r3, r7, #5
 80012fe:	d528      	bpl.n	8001352 <__aeabi_fsub+0x472>
 8001300:	01bf      	lsls	r7, r7, #6
 8001302:	09bf      	lsrs	r7, r7, #6
 8001304:	0038      	movs	r0, r7
 8001306:	f000 f905 	bl	8001514 <__clzsi2>
 800130a:	003b      	movs	r3, r7
 800130c:	3805      	subs	r0, #5
 800130e:	4083      	lsls	r3, r0
 8001310:	0034      	movs	r4, r6
 8001312:	2501      	movs	r5, #1
 8001314:	e6ca      	b.n	80010ac <__aeabi_fsub+0x1cc>
 8001316:	2900      	cmp	r1, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x43c>
 800131a:	e6b5      	b.n	8001088 <__aeabi_fsub+0x1a8>
 800131c:	2401      	movs	r4, #1
 800131e:	0007      	movs	r7, r0
 8001320:	4034      	ands	r4, r6
 8001322:	e658      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 8001324:	4663      	mov	r3, ip
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <__aeabi_fsub+0x44c>
 800132a:	e6e9      	b.n	8001100 <__aeabi_fsub+0x220>
 800132c:	2900      	cmp	r1, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x452>
 8001330:	e6ea      	b.n	8001108 <__aeabi_fsub+0x228>
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	03db      	lsls	r3, r3, #15
 8001336:	429f      	cmp	r7, r3
 8001338:	d200      	bcs.n	800133c <__aeabi_fsub+0x45c>
 800133a:	e6e5      	b.n	8001108 <__aeabi_fsub+0x228>
 800133c:	4298      	cmp	r0, r3
 800133e:	d300      	bcc.n	8001342 <__aeabi_fsub+0x462>
 8001340:	e6e2      	b.n	8001108 <__aeabi_fsub+0x228>
 8001342:	0007      	movs	r7, r0
 8001344:	e6e0      	b.n	8001108 <__aeabi_fsub+0x228>
 8001346:	2900      	cmp	r1, #0
 8001348:	d100      	bne.n	800134c <__aeabi_fsub+0x46c>
 800134a:	e69e      	b.n	800108a <__aeabi_fsub+0x1aa>
 800134c:	2300      	movs	r3, #0
 800134e:	08cf      	lsrs	r7, r1, #3
 8001350:	e641      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 8001352:	0034      	movs	r4, r6
 8001354:	2301      	movs	r3, #1
 8001356:	08ff      	lsrs	r7, r7, #3
 8001358:	e63d      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 800135a:	2f00      	cmp	r7, #0
 800135c:	d100      	bne.n	8001360 <__aeabi_fsub+0x480>
 800135e:	e693      	b.n	8001088 <__aeabi_fsub+0x1a8>
 8001360:	2300      	movs	r3, #0
 8001362:	08ff      	lsrs	r7, r7, #3
 8001364:	e637      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 8001366:	2300      	movs	r3, #0
 8001368:	08d7      	lsrs	r7, r2, #3
 800136a:	e634      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 800136c:	2301      	movs	r3, #1
 800136e:	08cf      	lsrs	r7, r1, #3
 8001370:	e631      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	000b      	movs	r3, r1
 8001376:	04d2      	lsls	r2, r2, #19
 8001378:	2001      	movs	r0, #1
 800137a:	4013      	ands	r3, r2
 800137c:	4211      	tst	r1, r2
 800137e:	d000      	beq.n	8001382 <__aeabi_fsub+0x4a2>
 8001380:	e6ae      	b.n	80010e0 <__aeabi_fsub+0x200>
 8001382:	08cf      	lsrs	r7, r1, #3
 8001384:	e627      	b.n	8000fd6 <__aeabi_fsub+0xf6>
 8001386:	2b00      	cmp	r3, #0
 8001388:	d100      	bne.n	800138c <__aeabi_fsub+0x4ac>
 800138a:	e75f      	b.n	800124c <__aeabi_fsub+0x36c>
 800138c:	1b56      	subs	r6, r2, r5
 800138e:	2d00      	cmp	r5, #0
 8001390:	d101      	bne.n	8001396 <__aeabi_fsub+0x4b6>
 8001392:	0033      	movs	r3, r6
 8001394:	e6e7      	b.n	8001166 <__aeabi_fsub+0x286>
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	4660      	mov	r0, ip
 800139a:	04db      	lsls	r3, r3, #19
 800139c:	4318      	orrs	r0, r3
 800139e:	4684      	mov	ip, r0
 80013a0:	e6eb      	b.n	800117a <__aeabi_fsub+0x29a>
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	7dffffff 	.word	0x7dffffff

080013a8 <__aeabi_f2iz>:
 80013a8:	0241      	lsls	r1, r0, #9
 80013aa:	0042      	lsls	r2, r0, #1
 80013ac:	0fc3      	lsrs	r3, r0, #31
 80013ae:	0a49      	lsrs	r1, r1, #9
 80013b0:	2000      	movs	r0, #0
 80013b2:	0e12      	lsrs	r2, r2, #24
 80013b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80013b6:	dd03      	ble.n	80013c0 <__aeabi_f2iz+0x18>
 80013b8:	2a9d      	cmp	r2, #157	@ 0x9d
 80013ba:	dd02      	ble.n	80013c2 <__aeabi_f2iz+0x1a>
 80013bc:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <__aeabi_f2iz+0x3c>)
 80013be:	1898      	adds	r0, r3, r2
 80013c0:	4770      	bx	lr
 80013c2:	2080      	movs	r0, #128	@ 0x80
 80013c4:	0400      	lsls	r0, r0, #16
 80013c6:	4301      	orrs	r1, r0
 80013c8:	2a95      	cmp	r2, #149	@ 0x95
 80013ca:	dc07      	bgt.n	80013dc <__aeabi_f2iz+0x34>
 80013cc:	2096      	movs	r0, #150	@ 0x96
 80013ce:	1a82      	subs	r2, r0, r2
 80013d0:	40d1      	lsrs	r1, r2
 80013d2:	4248      	negs	r0, r1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f3      	bne.n	80013c0 <__aeabi_f2iz+0x18>
 80013d8:	0008      	movs	r0, r1
 80013da:	e7f1      	b.n	80013c0 <__aeabi_f2iz+0x18>
 80013dc:	3a96      	subs	r2, #150	@ 0x96
 80013de:	4091      	lsls	r1, r2
 80013e0:	e7f7      	b.n	80013d2 <__aeabi_f2iz+0x2a>
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	7fffffff 	.word	0x7fffffff

080013e8 <__aeabi_i2f>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d012      	beq.n	8001414 <__aeabi_i2f+0x2c>
 80013ee:	17c3      	asrs	r3, r0, #31
 80013f0:	18c5      	adds	r5, r0, r3
 80013f2:	405d      	eors	r5, r3
 80013f4:	0fc4      	lsrs	r4, r0, #31
 80013f6:	0028      	movs	r0, r5
 80013f8:	f000 f88c 	bl	8001514 <__clzsi2>
 80013fc:	239e      	movs	r3, #158	@ 0x9e
 80013fe:	1a1b      	subs	r3, r3, r0
 8001400:	2b96      	cmp	r3, #150	@ 0x96
 8001402:	dc0f      	bgt.n	8001424 <__aeabi_i2f+0x3c>
 8001404:	2808      	cmp	r0, #8
 8001406:	d038      	beq.n	800147a <__aeabi_i2f+0x92>
 8001408:	3808      	subs	r0, #8
 800140a:	4085      	lsls	r5, r0
 800140c:	026d      	lsls	r5, r5, #9
 800140e:	0a6d      	lsrs	r5, r5, #9
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	e002      	b.n	800141a <__aeabi_i2f+0x32>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2500      	movs	r5, #0
 800141a:	05c0      	lsls	r0, r0, #23
 800141c:	4328      	orrs	r0, r5
 800141e:	07e4      	lsls	r4, r4, #31
 8001420:	4320      	orrs	r0, r4
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	2b99      	cmp	r3, #153	@ 0x99
 8001426:	dc14      	bgt.n	8001452 <__aeabi_i2f+0x6a>
 8001428:	1f42      	subs	r2, r0, #5
 800142a:	4095      	lsls	r5, r2
 800142c:	002a      	movs	r2, r5
 800142e:	4915      	ldr	r1, [pc, #84]	@ (8001484 <__aeabi_i2f+0x9c>)
 8001430:	4011      	ands	r1, r2
 8001432:	0755      	lsls	r5, r2, #29
 8001434:	d01c      	beq.n	8001470 <__aeabi_i2f+0x88>
 8001436:	250f      	movs	r5, #15
 8001438:	402a      	ands	r2, r5
 800143a:	2a04      	cmp	r2, #4
 800143c:	d018      	beq.n	8001470 <__aeabi_i2f+0x88>
 800143e:	3104      	adds	r1, #4
 8001440:	08ca      	lsrs	r2, r1, #3
 8001442:	0149      	lsls	r1, r1, #5
 8001444:	d515      	bpl.n	8001472 <__aeabi_i2f+0x8a>
 8001446:	239f      	movs	r3, #159	@ 0x9f
 8001448:	0252      	lsls	r2, r2, #9
 800144a:	1a18      	subs	r0, r3, r0
 800144c:	0a55      	lsrs	r5, r2, #9
 800144e:	b2c0      	uxtb	r0, r0
 8001450:	e7e3      	b.n	800141a <__aeabi_i2f+0x32>
 8001452:	2205      	movs	r2, #5
 8001454:	0029      	movs	r1, r5
 8001456:	1a12      	subs	r2, r2, r0
 8001458:	40d1      	lsrs	r1, r2
 800145a:	0002      	movs	r2, r0
 800145c:	321b      	adds	r2, #27
 800145e:	4095      	lsls	r5, r2
 8001460:	002a      	movs	r2, r5
 8001462:	1e55      	subs	r5, r2, #1
 8001464:	41aa      	sbcs	r2, r5
 8001466:	430a      	orrs	r2, r1
 8001468:	4906      	ldr	r1, [pc, #24]	@ (8001484 <__aeabi_i2f+0x9c>)
 800146a:	4011      	ands	r1, r2
 800146c:	0755      	lsls	r5, r2, #29
 800146e:	d1e2      	bne.n	8001436 <__aeabi_i2f+0x4e>
 8001470:	08ca      	lsrs	r2, r1, #3
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	0a55      	lsrs	r5, r2, #9
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	e7cf      	b.n	800141a <__aeabi_i2f+0x32>
 800147a:	026d      	lsls	r5, r5, #9
 800147c:	0a6d      	lsrs	r5, r5, #9
 800147e:	308e      	adds	r0, #142	@ 0x8e
 8001480:	e7cb      	b.n	800141a <__aeabi_i2f+0x32>
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	fbffffff 	.word	0xfbffffff

08001488 <__aeabi_ui2f>:
 8001488:	b510      	push	{r4, lr}
 800148a:	1e04      	subs	r4, r0, #0
 800148c:	d00d      	beq.n	80014aa <__aeabi_ui2f+0x22>
 800148e:	f000 f841 	bl	8001514 <__clzsi2>
 8001492:	239e      	movs	r3, #158	@ 0x9e
 8001494:	1a1b      	subs	r3, r3, r0
 8001496:	2b96      	cmp	r3, #150	@ 0x96
 8001498:	dc0c      	bgt.n	80014b4 <__aeabi_ui2f+0x2c>
 800149a:	2808      	cmp	r0, #8
 800149c:	d034      	beq.n	8001508 <__aeabi_ui2f+0x80>
 800149e:	3808      	subs	r0, #8
 80014a0:	4084      	lsls	r4, r0
 80014a2:	0264      	lsls	r4, r4, #9
 80014a4:	0a64      	lsrs	r4, r4, #9
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	e001      	b.n	80014ae <__aeabi_ui2f+0x26>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2400      	movs	r4, #0
 80014ae:	05c0      	lsls	r0, r0, #23
 80014b0:	4320      	orrs	r0, r4
 80014b2:	bd10      	pop	{r4, pc}
 80014b4:	2b99      	cmp	r3, #153	@ 0x99
 80014b6:	dc13      	bgt.n	80014e0 <__aeabi_ui2f+0x58>
 80014b8:	1f42      	subs	r2, r0, #5
 80014ba:	4094      	lsls	r4, r2
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <__aeabi_ui2f+0x88>)
 80014be:	4022      	ands	r2, r4
 80014c0:	0761      	lsls	r1, r4, #29
 80014c2:	d01c      	beq.n	80014fe <__aeabi_ui2f+0x76>
 80014c4:	210f      	movs	r1, #15
 80014c6:	4021      	ands	r1, r4
 80014c8:	2904      	cmp	r1, #4
 80014ca:	d018      	beq.n	80014fe <__aeabi_ui2f+0x76>
 80014cc:	3204      	adds	r2, #4
 80014ce:	08d4      	lsrs	r4, r2, #3
 80014d0:	0152      	lsls	r2, r2, #5
 80014d2:	d515      	bpl.n	8001500 <__aeabi_ui2f+0x78>
 80014d4:	239f      	movs	r3, #159	@ 0x9f
 80014d6:	0264      	lsls	r4, r4, #9
 80014d8:	1a18      	subs	r0, r3, r0
 80014da:	0a64      	lsrs	r4, r4, #9
 80014dc:	b2c0      	uxtb	r0, r0
 80014de:	e7e6      	b.n	80014ae <__aeabi_ui2f+0x26>
 80014e0:	0002      	movs	r2, r0
 80014e2:	0021      	movs	r1, r4
 80014e4:	321b      	adds	r2, #27
 80014e6:	4091      	lsls	r1, r2
 80014e8:	000a      	movs	r2, r1
 80014ea:	1e51      	subs	r1, r2, #1
 80014ec:	418a      	sbcs	r2, r1
 80014ee:	2105      	movs	r1, #5
 80014f0:	1a09      	subs	r1, r1, r0
 80014f2:	40cc      	lsrs	r4, r1
 80014f4:	4314      	orrs	r4, r2
 80014f6:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <__aeabi_ui2f+0x88>)
 80014f8:	4022      	ands	r2, r4
 80014fa:	0761      	lsls	r1, r4, #29
 80014fc:	d1e2      	bne.n	80014c4 <__aeabi_ui2f+0x3c>
 80014fe:	08d4      	lsrs	r4, r2, #3
 8001500:	0264      	lsls	r4, r4, #9
 8001502:	0a64      	lsrs	r4, r4, #9
 8001504:	b2d8      	uxtb	r0, r3
 8001506:	e7d2      	b.n	80014ae <__aeabi_ui2f+0x26>
 8001508:	0264      	lsls	r4, r4, #9
 800150a:	0a64      	lsrs	r4, r4, #9
 800150c:	308e      	adds	r0, #142	@ 0x8e
 800150e:	e7ce      	b.n	80014ae <__aeabi_ui2f+0x26>
 8001510:	fbffffff 	.word	0xfbffffff

08001514 <__clzsi2>:
 8001514:	211c      	movs	r1, #28
 8001516:	2301      	movs	r3, #1
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	4298      	cmp	r0, r3
 800151c:	d301      	bcc.n	8001522 <__clzsi2+0xe>
 800151e:	0c00      	lsrs	r0, r0, #16
 8001520:	3910      	subs	r1, #16
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	4298      	cmp	r0, r3
 8001526:	d301      	bcc.n	800152c <__clzsi2+0x18>
 8001528:	0a00      	lsrs	r0, r0, #8
 800152a:	3908      	subs	r1, #8
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	4298      	cmp	r0, r3
 8001530:	d301      	bcc.n	8001536 <__clzsi2+0x22>
 8001532:	0900      	lsrs	r0, r0, #4
 8001534:	3904      	subs	r1, #4
 8001536:	a202      	add	r2, pc, #8	@ (adr r2, 8001540 <__clzsi2+0x2c>)
 8001538:	5c10      	ldrb	r0, [r2, r0]
 800153a:	1840      	adds	r0, r0, r1
 800153c:	4770      	bx	lr
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	02020304 	.word	0x02020304
 8001544:	01010101 	.word	0x01010101
	...

08001550 <Convert_ADC_to_Voltage>:
  * @brief  Convert ADC value to real voltage measurement
  * @param  adc_value Raw ADC value (0-4095)
  * @retval Real voltage in volts (0-30V range)
  */
float Convert_ADC_to_Voltage(uint32_t adc_value)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    // Production ADC_CHANNEL_3 (PA3): Real voltage measurement with voltage divider
    // ADC voltage = (adc_value / 4095) * 3.3V
    // Real voltage = ADC voltage * voltage_divider_ratio
    float adc_voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff95 	bl	8001488 <__aeabi_ui2f>
 800155e:	1c03      	adds	r3, r0, #0
 8001560:	4909      	ldr	r1, [pc, #36]	@ (8001588 <Convert_ADC_to_Voltage+0x38>)
 8001562:	1c18      	adds	r0, r3, #0
 8001564:	f7ff f994 	bl	8000890 <__aeabi_fdiv>
 8001568:	1c03      	adds	r3, r0, #0
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <Convert_ADC_to_Voltage+0x3c>)
 800156c:	1c18      	adds	r0, r3, #0
 800156e:	f7ff fb5d 	bl	8000c2c <__aeabi_fmul>
 8001572:	1c03      	adds	r3, r0, #0
 8001574:	60fb      	str	r3, [r7, #12]
    return adc_voltage * VOLTAGE_SCALE_FACTOR;
 8001576:	4906      	ldr	r1, [pc, #24]	@ (8001590 <Convert_ADC_to_Voltage+0x40>)
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fb57 	bl	8000c2c <__aeabi_fmul>
 800157e:	1c03      	adds	r3, r0, #0
}
 8001580:	1c18      	adds	r0, r3, #0
 8001582:	46bd      	mov	sp, r7
 8001584:	b004      	add	sp, #16
 8001586:	bd80      	pop	{r7, pc}
 8001588:	457ff000 	.word	0x457ff000
 800158c:	40533333 	.word	0x40533333
 8001590:	40ea3d71 	.word	0x40ea3d71

08001594 <Convert_ADC_to_Current>:
  * @brief  Convert ADC value to real current measurement
  * @param  adc_value Raw ADC value (0-4095)
  * @retval Real current in amperes (0-5A range)
  */
float Convert_ADC_to_Current(uint32_t adc_value)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    // Production ADC_CHANNEL_4 (PA4): Real current measurement via current sensor
    // ADC voltage = (adc_value / 4095) * 3.3V
    // Real current = ADC voltage * current_sensor_ratio
    float adc_voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff73 	bl	8001488 <__aeabi_ui2f>
 80015a2:	1c03      	adds	r3, r0, #0
 80015a4:	4909      	ldr	r1, [pc, #36]	@ (80015cc <Convert_ADC_to_Current+0x38>)
 80015a6:	1c18      	adds	r0, r3, #0
 80015a8:	f7ff f972 	bl	8000890 <__aeabi_fdiv>
 80015ac:	1c03      	adds	r3, r0, #0
 80015ae:	4908      	ldr	r1, [pc, #32]	@ (80015d0 <Convert_ADC_to_Current+0x3c>)
 80015b0:	1c18      	adds	r0, r3, #0
 80015b2:	f7ff fb3b 	bl	8000c2c <__aeabi_fmul>
 80015b6:	1c03      	adds	r3, r0, #0
 80015b8:	60fb      	str	r3, [r7, #12]
    return adc_voltage * CURRENT_SCALE_FACTOR;
 80015ba:	4906      	ldr	r1, [pc, #24]	@ (80015d4 <Convert_ADC_to_Current+0x40>)
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fb35 	bl	8000c2c <__aeabi_fmul>
 80015c2:	1c03      	adds	r3, r0, #0
}
 80015c4:	1c18      	adds	r0, r3, #0
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	457ff000 	.word	0x457ff000
 80015d0:	40533333 	.word	0x40533333
 80015d4:	3f9c28f6 	.word	0x3f9c28f6

080015d8 <Calculate_Power>:
  * @param  voltage Measured voltage in volts
  * @param  current Measured current in amperes
  * @retval Calculated power in watts
  */
float Calculate_Power(float voltage, float current)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    return voltage * current;
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fb21 	bl	8000c2c <__aeabi_fmul>
 80015ea:	1c03      	adds	r3, r0, #0
}
 80015ec:	1c18      	adds	r0, r3, #0
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Update_Energy>:
  * @brief  Update accumulated energy using trapezoidal integration
  * @param  power Current power in watts
  * @param  delta_time Time interval in milliseconds
  */
void Update_Energy(float power, uint32_t delta_time)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    // Convert delta_time from ms to hours for Wh calculation
    float delta_hours = (float)delta_time / (1000.0f * 3600.0f);
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f7ff ff42 	bl	8001488 <__aeabi_ui2f>
 8001604:	1c03      	adds	r3, r0, #0
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <Update_Energy+0x48>)
 8001608:	1c18      	adds	r0, r3, #0
 800160a:	f7ff f941 	bl	8000890 <__aeabi_fdiv>
 800160e:	1c03      	adds	r3, r0, #0
 8001610:	60fb      	str	r3, [r7, #12]

    // Integration: E += P * dt
    accumulated_energy += power * delta_hours;
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fb09 	bl	8000c2c <__aeabi_fmul>
 800161a:	1c03      	adds	r3, r0, #0
 800161c:	1c1a      	adds	r2, r3, #0
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <Update_Energy+0x4c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c19      	adds	r1, r3, #0
 8001624:	1c10      	adds	r0, r2, #0
 8001626:	f7fe ff41 	bl	80004ac <__aeabi_fadd>
 800162a:	1c03      	adds	r3, r0, #0
 800162c:	1c1a      	adds	r2, r3, #0
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <Update_Energy+0x4c>)
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b004      	add	sp, #16
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	4a5bba00 	.word	0x4a5bba00
 8001640:	2000018c 	.word	0x2000018c

08001644 <Update_Peaks>:
  * @param  voltage Current voltage value
  * @param  current Current current value
  * @param  power Current power value
  */
void Update_Peaks(float voltage, float current, float power)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
    if (voltage > peak_voltage) peak_voltage = voltage;
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <Update_Peaks+0x58>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1c19      	adds	r1, r3, #0
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7fe fefc 	bl	8000454 <__aeabi_fcmpgt>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d002      	beq.n	8001666 <Update_Peaks+0x22>
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <Update_Peaks+0x58>)
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
    if (current > peak_current) peak_current = current;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <Update_Peaks+0x5c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	1c19      	adds	r1, r3, #0
 800166c:	68b8      	ldr	r0, [r7, #8]
 800166e:	f7fe fef1 	bl	8000454 <__aeabi_fcmpgt>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d002      	beq.n	800167c <Update_Peaks+0x38>
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <Update_Peaks+0x5c>)
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	601a      	str	r2, [r3, #0]
    if (power > peak_power) peak_power = power;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <Update_Peaks+0x60>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1c19      	adds	r1, r3, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe fee6 	bl	8000454 <__aeabi_fcmpgt>
 8001688:	1e03      	subs	r3, r0, #0
 800168a:	d100      	bne.n	800168e <Update_Peaks+0x4a>
}
 800168c:	e002      	b.n	8001694 <Update_Peaks+0x50>
    if (power > peak_power) peak_power = power;
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <Update_Peaks+0x60>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000194 	.word	0x20000194
 80016a0:	20000198 	.word	0x20000198
 80016a4:	2000019c 	.word	0x2000019c

080016a8 <Reset_Peaks>:

/**
  * @brief  Reset all peak values to zero
  */
void Reset_Peaks(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    peak_voltage = 0.0f;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <Reset_Peaks+0x1c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    peak_current = 0.0f;
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <Reset_Peaks+0x20>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    peak_power = 0.0f;
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <Reset_Peaks+0x24>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000194 	.word	0x20000194
 80016c8:	20000198 	.word	0x20000198
 80016cc:	2000019c 	.word	0x2000019c

080016d0 <Reset_Energy>:

/**
  * @brief  Reset accumulated energy to zero
  */
void Reset_Energy(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
    accumulated_energy = 0.0f;
 80016d4:	4b02      	ldr	r3, [pc, #8]	@ (80016e0 <Reset_Energy+0x10>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000018c 	.word	0x2000018c

080016e4 <Handle_Menu_Navigation>:
/**
  * @brief  Handle rotary encoder input for menu navigation
  * @param  direction: 1 for clockwise, -1 for counter-clockwise
  */
void Handle_Menu_Navigation(int8_t direction)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	0002      	movs	r2, r0
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 80016f0:	f002 f966 	bl	80039c0 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <Handle_Menu_Navigation+0x144>)
 80016f8:	601a      	str	r2, [r3, #0]
    menu_changed = 1;
 80016fa:	4b4c      	ldr	r3, [pc, #304]	@ (800182c <Handle_Menu_Navigation+0x148>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]

    switch (current_menu) {
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <Handle_Menu_Navigation+0x14c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b06      	cmp	r3, #6
 8001706:	d100      	bne.n	800170a <Handle_Menu_Navigation+0x26>
 8001708:	e06a      	b.n	80017e0 <Handle_Menu_Navigation+0xfc>
 800170a:	dd00      	ble.n	800170e <Handle_Menu_Navigation+0x2a>
 800170c:	e086      	b.n	800181c <Handle_Menu_Navigation+0x138>
 800170e:	2b05      	cmp	r3, #5
 8001710:	d045      	beq.n	800179e <Handle_Menu_Navigation+0xba>
 8001712:	dd00      	ble.n	8001716 <Handle_Menu_Navigation+0x32>
 8001714:	e082      	b.n	800181c <Handle_Menu_Navigation+0x138>
 8001716:	2b01      	cmp	r3, #1
 8001718:	d002      	beq.n	8001720 <Handle_Menu_Navigation+0x3c>
 800171a:	2b04      	cmp	r3, #4
 800171c:	d01e      	beq.n	800175c <Handle_Menu_Navigation+0x78>
                menu_selection = (menu_selection == 0) ? 2 : menu_selection - 1;
            }
            break;

        default:
            break;
 800171e:	e07d      	b.n	800181c <Handle_Menu_Navigation+0x138>
            if (direction > 0) {
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd0b      	ble.n	8001742 <Handle_Menu_Navigation+0x5e>
                menu_selection = (menu_selection + 1) % 5;
 800172a:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	2105      	movs	r1, #5
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fe62 	bl	80003fc <__aeabi_idivmod>
 8001738:	000b      	movs	r3, r1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800173e:	701a      	strb	r2, [r3, #0]
            break;
 8001740:	e06d      	b.n	800181e <Handle_Menu_Navigation+0x13a>
                menu_selection = (menu_selection == 0) ? 4 : menu_selection - 1;
 8001742:	4b3c      	ldr	r3, [pc, #240]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <Handle_Menu_Navigation+0x70>
 800174a:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	e000      	b.n	8001756 <Handle_Menu_Navigation+0x72>
 8001754:	2204      	movs	r2, #4
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001758:	701a      	strb	r2, [r3, #0]
            break;
 800175a:	e060      	b.n	800181e <Handle_Menu_Navigation+0x13a>
            if (direction > 0) {
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b25b      	sxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	dd0e      	ble.n	8001784 <Handle_Menu_Navigation+0xa0>
                menu_selection = (menu_selection + 1) % 4;
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a32      	ldr	r2, [pc, #200]	@ (8001838 <Handle_Menu_Navigation+0x154>)
 800176e:	4013      	ands	r3, r2
 8001770:	d504      	bpl.n	800177c <Handle_Menu_Navigation+0x98>
 8001772:	3b01      	subs	r3, #1
 8001774:	2204      	movs	r2, #4
 8001776:	4252      	negs	r2, r2
 8001778:	4313      	orrs	r3, r2
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001780:	701a      	strb	r2, [r3, #0]
            break;
 8001782:	e04c      	b.n	800181e <Handle_Menu_Navigation+0x13a>
                menu_selection = (menu_selection == 0) ? 3 : menu_selection - 1;
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <Handle_Menu_Navigation+0xb2>
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	e000      	b.n	8001798 <Handle_Menu_Navigation+0xb4>
 8001796:	2203      	movs	r2, #3
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800179a:	701a      	strb	r2, [r3, #0]
            break;
 800179c:	e03f      	b.n	800181e <Handle_Menu_Navigation+0x13a>
            if (direction > 0) {
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd0e      	ble.n	80017c6 <Handle_Menu_Navigation+0xe2>
                menu_selection = (menu_selection + 1) % 2;
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <Handle_Menu_Navigation+0x158>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	d504      	bpl.n	80017be <Handle_Menu_Navigation+0xda>
 80017b4:	3b01      	subs	r3, #1
 80017b6:	2202      	movs	r2, #2
 80017b8:	4252      	negs	r2, r2
 80017ba:	4313      	orrs	r3, r2
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017c2:	701a      	strb	r2, [r3, #0]
            break;
 80017c4:	e02b      	b.n	800181e <Handle_Menu_Navigation+0x13a>
                menu_selection = (menu_selection == 0) ? 1 : menu_selection - 1;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <Handle_Menu_Navigation+0xf4>
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	e000      	b.n	80017da <Handle_Menu_Navigation+0xf6>
 80017d8:	2201      	movs	r2, #1
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017dc:	701a      	strb	r2, [r3, #0]
            break;
 80017de:	e01e      	b.n	800181e <Handle_Menu_Navigation+0x13a>
            if (direction > 0) {
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dd0b      	ble.n	8001802 <Handle_Menu_Navigation+0x11e>
                menu_selection = (menu_selection + 1) % 3;
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	2103      	movs	r1, #3
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7fe fe02 	bl	80003fc <__aeabi_idivmod>
 80017f8:	000b      	movs	r3, r1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 80017fe:	701a      	strb	r2, [r3, #0]
            break;
 8001800:	e00d      	b.n	800181e <Handle_Menu_Navigation+0x13a>
                menu_selection = (menu_selection == 0) ? 2 : menu_selection - 1;
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <Handle_Menu_Navigation+0x130>
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3b01      	subs	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	e000      	b.n	8001816 <Handle_Menu_Navigation+0x132>
 8001814:	2202      	movs	r2, #2
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <Handle_Menu_Navigation+0x150>)
 8001818:	701a      	strb	r2, [r3, #0]
            break;
 800181a:	e000      	b.n	800181e <Handle_Menu_Navigation+0x13a>
            break;
 800181c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	200001b0 	.word	0x200001b0
 800182c:	20000000 	.word	0x20000000
 8001830:	200001ad 	.word	0x200001ad
 8001834:	200001ae 	.word	0x200001ae
 8001838:	80000003 	.word	0x80000003
 800183c:	80000001 	.word	0x80000001

08001840 <Handle_Menu_Action>:
/**
  * @brief  Handle button press for menu actions
  * @param  press_type: 0 = short press, 1 = long press
  */
void Handle_Menu_Action(uint8_t press_type)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	0002      	movs	r2, r0
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 800184c:	f002 f8b8 	bl	80039c0 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	4b68      	ldr	r3, [pc, #416]	@ (80019f4 <Handle_Menu_Action+0x1b4>)
 8001854:	601a      	str	r2, [r3, #0]
    menu_changed = 1;
 8001856:	4b68      	ldr	r3, [pc, #416]	@ (80019f8 <Handle_Menu_Action+0x1b8>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]

    if (press_type == 1) { // Long press - go back/up
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d111      	bne.n	8001888 <Handle_Menu_Action+0x48>
        switch (current_menu) {
 8001864:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <Handle_Menu_Action+0x3a>
            case MENU_POWER_METER:
                current_menu = MENU_MAIN;
 800186c:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
                menu_selection = 0;
 8001872:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
                break;
 8001878:	e0b8      	b.n	80019ec <Handle_Menu_Action+0x1ac>

            default:
                current_menu = MENU_POWER_METER;
 800187a:	4b60      	ldr	r3, [pc, #384]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
                menu_selection = 0;
 8001880:	4b5f      	ldr	r3, [pc, #380]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
                break;
 8001886:	e0b1      	b.n	80019ec <Handle_Menu_Action+0x1ac>
        }
    } else { // Short press - enter/confirm
        switch (current_menu) {
 8001888:	4b5c      	ldr	r3, [pc, #368]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d900      	bls.n	8001892 <Handle_Menu_Action+0x52>
 8001890:	e0ac      	b.n	80019ec <Handle_Menu_Action+0x1ac>
 8001892:	009a      	lsls	r2, r3, #2
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <Handle_Menu_Action+0x1c4>)
 8001896:	18d3      	adds	r3, r2, r3
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	469f      	mov	pc, r3
            case MENU_POWER_METER:
                // No action on short press in power meter mode
                break;

            case MENU_MAIN:
                switch (menu_selection) {
 800189c:	4b58      	ldr	r3, [pc, #352]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d900      	bls.n	80018a6 <Handle_Menu_Action+0x66>
 80018a4:	e09d      	b.n	80019e2 <Handle_Menu_Action+0x1a2>
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <Handle_Menu_Action+0x1c8>)
 80018aa:	18d3      	adds	r3, r2, r3
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	469f      	mov	pc, r3
                    case 0: current_menu = MENU_POWER_METER; break;
 80018b0:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e018      	b.n	80018ea <Handle_Menu_Action+0xaa>
                    case 1: current_menu = MENU_PEAKS; break;
 80018b8:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e014      	b.n	80018ea <Handle_Menu_Action+0xaa>
                    case 2: current_menu = MENU_GRAPHICS_SELECT; menu_selection = 0; break;
 80018c0:	4b4e      	ldr	r3, [pc, #312]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e00d      	b.n	80018ea <Handle_Menu_Action+0xaa>
                    case 3: current_menu = MENU_SETTINGS; menu_selection = 0; break;
 80018ce:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018d0:	2205      	movs	r2, #5
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e006      	b.n	80018ea <Handle_Menu_Action+0xaa>
                    case 4: current_menu = MENU_RESET; menu_selection = 0; break;
 80018dc:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018de:	2206      	movs	r2, #6
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	46c0      	nop			@ (mov r8, r8)
                }
                break;
 80018ea:	e07a      	b.n	80019e2 <Handle_Menu_Action+0x1a2>

            case MENU_PEAKS:
                current_menu = MENU_MAIN;
 80018ec:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
                menu_selection = 1;
 80018f2:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
                break;
 80018f8:	e078      	b.n	80019ec <Handle_Menu_Action+0x1ac>

            case MENU_GRAPHICS_SELECT:
                switch (menu_selection) {
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d01f      	beq.n	8001942 <Handle_Menu_Action+0x102>
 8001902:	dd00      	ble.n	8001906 <Handle_Menu_Action+0xc6>
 8001904:	e06f      	b.n	80019e6 <Handle_Menu_Action+0x1a6>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d014      	beq.n	8001934 <Handle_Menu_Action+0xf4>
 800190a:	dd00      	ble.n	800190e <Handle_Menu_Action+0xce>
 800190c:	e06b      	b.n	80019e6 <Handle_Menu_Action+0x1a6>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <Handle_Menu_Action+0xd8>
 8001912:	2b01      	cmp	r3, #1
 8001914:	d007      	beq.n	8001926 <Handle_Menu_Action+0xe6>
                    case 3:
                        current_menu = MENU_MAIN;
                        menu_selection = 2;
                        break;
                }
                break;
 8001916:	e066      	b.n	80019e6 <Handle_Menu_Action+0x1a6>
                        graphics_parameter = 0;
 8001918:	4b3c      	ldr	r3, [pc, #240]	@ (8001a0c <Handle_Menu_Action+0x1cc>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
                        current_menu = MENU_GRAPHICS;
 800191e:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 8001920:	2203      	movs	r2, #3
 8001922:	701a      	strb	r2, [r3, #0]
                        break;
 8001924:	e014      	b.n	8001950 <Handle_Menu_Action+0x110>
                        graphics_parameter = 1;
 8001926:	4b39      	ldr	r3, [pc, #228]	@ (8001a0c <Handle_Menu_Action+0x1cc>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
                        current_menu = MENU_GRAPHICS;
 800192c:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800192e:	2203      	movs	r2, #3
 8001930:	701a      	strb	r2, [r3, #0]
                        break;
 8001932:	e00d      	b.n	8001950 <Handle_Menu_Action+0x110>
                        graphics_parameter = 2;
 8001934:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <Handle_Menu_Action+0x1cc>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
                        current_menu = MENU_GRAPHICS;
 800193a:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800193c:	2203      	movs	r2, #3
 800193e:	701a      	strb	r2, [r3, #0]
                        break;
 8001940:	e006      	b.n	8001950 <Handle_Menu_Action+0x110>
                        current_menu = MENU_MAIN;
 8001942:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
                        menu_selection = 2;
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
                        break;
 800194e:	46c0      	nop			@ (mov r8, r8)
                break;
 8001950:	e049      	b.n	80019e6 <Handle_Menu_Action+0x1a6>

            case MENU_GRAPHICS:
                current_menu = MENU_GRAPHICS_SELECT;
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 8001954:	2204      	movs	r2, #4
 8001956:	701a      	strb	r2, [r3, #0]
                menu_selection = graphics_parameter;
 8001958:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <Handle_Menu_Action+0x1cc>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 800195e:	701a      	strb	r2, [r3, #0]
                break;
 8001960:	e044      	b.n	80019ec <Handle_Menu_Action+0x1ac>

            case MENU_SETTINGS:
                switch (menu_selection) {
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <Handle_Menu_Action+0x130>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d004      	beq.n	8001978 <Handle_Menu_Action+0x138>
                    case 0: current_menu = MENU_ABOUT; break;
                    case 1: current_menu = MENU_MAIN; menu_selection = 3; break;
                }
                break;
 800196e:	e03d      	b.n	80019ec <Handle_Menu_Action+0x1ac>
                    case 0: current_menu = MENU_ABOUT; break;
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 8001972:	2207      	movs	r2, #7
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e006      	b.n	8001986 <Handle_Menu_Action+0x146>
                    case 1: current_menu = MENU_MAIN; menu_selection = 3; break;
 8001978:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 8001980:	2203      	movs	r2, #3
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	46c0      	nop			@ (mov r8, r8)
                break;
 8001986:	e031      	b.n	80019ec <Handle_Menu_Action+0x1ac>

            case MENU_RESET:
                switch (menu_selection) {
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d017      	beq.n	80019c0 <Handle_Menu_Action+0x180>
 8001990:	dc2b      	bgt.n	80019ea <Handle_Menu_Action+0x1aa>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <Handle_Menu_Action+0x15c>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d009      	beq.n	80019ae <Handle_Menu_Action+0x16e>
                    case 0: Reset_Peaks(); current_menu = MENU_MAIN; menu_selection = 4; break;
                    case 1: Reset_Energy(); current_menu = MENU_MAIN; menu_selection = 4; break;
                    case 2: current_menu = MENU_MAIN; menu_selection = 4; break;
                }
                break;
 800199a:	e026      	b.n	80019ea <Handle_Menu_Action+0x1aa>
                    case 0: Reset_Peaks(); current_menu = MENU_MAIN; menu_selection = 4; break;
 800199c:	f7ff fe84 	bl	80016a8 <Reset_Peaks>
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80019a8:	2204      	movs	r2, #4
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e00f      	b.n	80019ce <Handle_Menu_Action+0x18e>
                    case 1: Reset_Energy(); current_menu = MENU_MAIN; menu_selection = 4; break;
 80019ae:	f7ff fe8f 	bl	80016d0 <Reset_Energy>
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e006      	b.n	80019ce <Handle_Menu_Action+0x18e>
                    case 2: current_menu = MENU_MAIN; menu_selection = 4; break;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80019c8:	2204      	movs	r2, #4
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	46c0      	nop			@ (mov r8, r8)
                break;
 80019ce:	e00c      	b.n	80019ea <Handle_Menu_Action+0x1aa>

            case MENU_ABOUT:
                current_menu = MENU_SETTINGS;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <Handle_Menu_Action+0x1bc>)
 80019d2:	2205      	movs	r2, #5
 80019d4:	701a      	strb	r2, [r3, #0]
                menu_selection = 0;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <Handle_Menu_Action+0x1c0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
                break;
 80019dc:	e006      	b.n	80019ec <Handle_Menu_Action+0x1ac>
                break;
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	e004      	b.n	80019ec <Handle_Menu_Action+0x1ac>
                break;
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	e002      	b.n	80019ec <Handle_Menu_Action+0x1ac>
                break;
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	e000      	b.n	80019ec <Handle_Menu_Action+0x1ac>
                break;
 80019ea:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001b0 	.word	0x200001b0
 80019f8:	20000000 	.word	0x20000000
 80019fc:	200001ad 	.word	0x200001ad
 8001a00:	200001ae 	.word	0x200001ae
 8001a04:	08006ebc 	.word	0x08006ebc
 8001a08:	08006edc 	.word	0x08006edc
 8001a0c:	20000339 	.word	0x20000339

08001a10 <Display_Current_Menu>:

/**
  * @brief  Display current menu on OLED (memory optimized)
  */
void Display_Current_Menu(void)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b0b1      	sub	sp, #196	@ 0xc4
 8001a14:	af00      	add	r7, sp, #0
    char line1[21] = {0};
 8001a16:	2388      	movs	r3, #136	@ 0x88
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	2315      	movs	r3, #21
 8001a1e:	001a      	movs	r2, r3
 8001a20:	2100      	movs	r1, #0
 8001a22:	f004 fc5b 	bl	80062dc <memset>
    char line2[21] = {0};
 8001a26:	2370      	movs	r3, #112	@ 0x70
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	2315      	movs	r3, #21
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	f004 fc53 	bl	80062dc <memset>
    char line3[21] = {0};
 8001a36:	2358      	movs	r3, #88	@ 0x58
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	2315      	movs	r3, #21
 8001a3e:	001a      	movs	r2, r3
 8001a40:	2100      	movs	r1, #0
 8001a42:	f004 fc4b 	bl	80062dc <memset>

    ssd1306_Fill(Black);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f001 fcd6 	bl	80033f8 <ssd1306_Fill>

    switch (current_menu) {
 8001a4c:	4bd9      	ldr	r3, [pc, #868]	@ (8001db4 <Display_Current_Menu+0x3a4>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d900      	bls.n	8001a56 <Display_Current_Menu+0x46>
 8001a54:	e2d0      	b.n	8001ff8 <Display_Current_Menu+0x5e8>
 8001a56:	009a      	lsls	r2, r3, #2
 8001a58:	4bd7      	ldr	r3, [pc, #860]	@ (8001db8 <Display_Current_Menu+0x3a8>)
 8001a5a:	18d3      	adds	r3, r2, r3
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	469f      	mov	pc, r3
        case MENU_POWER_METER:
            Display_Power_Meter();
 8001a60:	f000 fd38 	bl	80024d4 <Display_Power_Meter>
            return;
 8001a64:	e2ca      	b.n	8001ffc <Display_Current_Menu+0x5ec>

        case MENU_MAIN:
            {
                const char* menu_items[5] = {
 8001a66:	2344      	movs	r3, #68	@ 0x44
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	4ad4      	ldr	r2, [pc, #848]	@ (8001dbc <Display_Current_Menu+0x3ac>)
 8001a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001a70:	ca03      	ldmia	r2!, {r0, r1}
 8001a72:	c303      	stmia	r3!, {r0, r1}
                    " Graphics",
                    " Settings",
                    " Reset Options"
                };

                ssd1306_SetCursor(0, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f001 fe34 	bl	80036e4 <ssd1306_SetCursor>
                ssd1306_WriteString("=== MAIN MENU ===", Font_6x8, White);
 8001a7c:	4ad0      	ldr	r2, [pc, #832]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001a7e:	48d1      	ldr	r0, [pc, #836]	@ (8001dc4 <Display_Current_Menu+0x3b4>)
 8001a80:	2301      	movs	r3, #1
 8001a82:	6811      	ldr	r1, [r2, #0]
 8001a84:	6852      	ldr	r2, [r2, #4]
 8001a86:	f001 fe03 	bl	8003690 <ssd1306_WriteString>

                uint8_t start_item = 0;
 8001a8a:	21bf      	movs	r1, #191	@ 0xbf
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
                if (menu_selection >= 2) {
 8001a92:	4bcd      	ldr	r3, [pc, #820]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d90b      	bls.n	8001ab2 <Display_Current_Menu+0xa2>
                    start_item = menu_selection - 1;
 8001a9a:	4bcb      	ldr	r3, [pc, #812]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
                    if (start_item > 2) start_item = 2;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d902      	bls.n	8001ab2 <Display_Current_Menu+0xa2>
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
                }

                for (uint8_t i = 0; i < 3 && (start_item + i) < 5; i++) {
 8001ab2:	23be      	movs	r3, #190	@ 0xbe
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e035      	b.n	8001b28 <Display_Current_Menu+0x118>
                    uint8_t item_index = start_item + i;
 8001abc:	209f      	movs	r0, #159	@ 0x9f
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	22bf      	movs	r2, #191	@ 0xbf
 8001ac2:	18b9      	adds	r1, r7, r2
 8001ac4:	22be      	movs	r2, #190	@ 0xbe
 8001ac6:	18ba      	adds	r2, r7, r2
 8001ac8:	7809      	ldrb	r1, [r1, #0]
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	188a      	adds	r2, r1, r2
 8001ace:	701a      	strb	r2, [r3, #0]
                    char display_line[21];

                    sprintf(display_line, "%s%s",
                           (item_index == menu_selection) ? ">" : " ",
 8001ad0:	4bbd      	ldr	r3, [pc, #756]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
                    sprintf(display_line, "%s%s",
 8001ad4:	183a      	adds	r2, r7, r0
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d101      	bne.n	8001ae0 <Display_Current_Menu+0xd0>
 8001adc:	4abb      	ldr	r2, [pc, #748]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001ade:	e000      	b.n	8001ae2 <Display_Current_Menu+0xd2>
 8001ae0:	4abb      	ldr	r2, [pc, #748]	@ (8001dd0 <Display_Current_Menu+0x3c0>)
 8001ae2:	239f      	movs	r3, #159	@ 0x9f
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	7819      	ldrb	r1, [r3, #0]
 8001ae8:	2344      	movs	r3, #68	@ 0x44
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	0089      	lsls	r1, r1, #2
 8001aee:	58cb      	ldr	r3, [r1, r3]
 8001af0:	49b8      	ldr	r1, [pc, #736]	@ (8001dd4 <Display_Current_Menu+0x3c4>)
 8001af2:	252c      	movs	r5, #44	@ 0x2c
 8001af4:	1978      	adds	r0, r7, r5
 8001af6:	f004 fbbd 	bl	8006274 <siprintf>
                           menu_items[item_index]);

                    ssd1306_SetCursor(0, 8 + (i * 8));
 8001afa:	24be      	movs	r4, #190	@ 0xbe
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	0019      	movs	r1, r3
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f001 fdea 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString(display_line, Font_6x8, White);
 8001b10:	4aab      	ldr	r2, [pc, #684]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001b12:	1978      	adds	r0, r7, r5
 8001b14:	2301      	movs	r3, #1
 8001b16:	6811      	ldr	r1, [r2, #0]
 8001b18:	6852      	ldr	r2, [r2, #4]
 8001b1a:	f001 fdb9 	bl	8003690 <ssd1306_WriteString>
                for (uint8_t i = 0; i < 3 && (start_item + i) < 5; i++) {
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	3201      	adds	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	21be      	movs	r1, #190	@ 0xbe
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d807      	bhi.n	8001b42 <Display_Current_Menu+0x132>
 8001b32:	23bf      	movs	r3, #191	@ 0xbf
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	ddbc      	ble.n	8001abc <Display_Current_Menu+0xac>
                }

                if (start_item > 0) {
 8001b42:	23bf      	movs	r3, #191	@ 0xbf
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <Display_Current_Menu+0x152>
                    ssd1306_SetCursor(120, 8);
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	2078      	movs	r0, #120	@ 0x78
 8001b50:	f001 fdc8 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString("^", Font_6x8, White);
 8001b54:	4a9a      	ldr	r2, [pc, #616]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001b56:	48a0      	ldr	r0, [pc, #640]	@ (8001dd8 <Display_Current_Menu+0x3c8>)
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6811      	ldr	r1, [r2, #0]
 8001b5c:	6852      	ldr	r2, [r2, #4]
 8001b5e:	f001 fd97 	bl	8003690 <ssd1306_WriteString>
                }
                if (start_item + 3 < 5) {
 8001b62:	23bf      	movs	r3, #191	@ 0xbf
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d900      	bls.n	8001b6e <Display_Current_Menu+0x15e>
 8001b6c:	e241      	b.n	8001ff2 <Display_Current_Menu+0x5e2>
                    ssd1306_SetCursor(120, 24);
 8001b6e:	2118      	movs	r1, #24
 8001b70:	2078      	movs	r0, #120	@ 0x78
 8001b72:	f001 fdb7 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString("v", Font_6x8, White);
 8001b76:	4a92      	ldr	r2, [pc, #584]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001b78:	4898      	ldr	r0, [pc, #608]	@ (8001ddc <Display_Current_Menu+0x3cc>)
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	6811      	ldr	r1, [r2, #0]
 8001b7e:	6852      	ldr	r2, [r2, #4]
 8001b80:	f001 fd86 	bl	8003690 <ssd1306_WriteString>
                }
            }
            break;
 8001b84:	e235      	b.n	8001ff2 <Display_Current_Menu+0x5e2>

        case MENU_PEAKS:
            ssd1306_SetCursor(0, 0);
 8001b86:	2100      	movs	r1, #0
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f001 fdab 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("=== PEAK VALUES ===", Font_6x8, White);
 8001b8e:	4a8c      	ldr	r2, [pc, #560]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001b90:	4893      	ldr	r0, [pc, #588]	@ (8001de0 <Display_Current_Menu+0x3d0>)
 8001b92:	2301      	movs	r3, #1
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	6852      	ldr	r2, [r2, #4]
 8001b98:	f001 fd7a 	bl	8003690 <ssd1306_WriteString>

            int pv_int = (int)peak_voltage;
 8001b9c:	4b91      	ldr	r3, [pc, #580]	@ (8001de4 <Display_Current_Menu+0x3d4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1c18      	adds	r0, r3, #0
 8001ba2:	f7ff fc01 	bl	80013a8 <__aeabi_f2iz>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	25b4      	movs	r5, #180	@ 0xb4
 8001baa:	197a      	adds	r2, r7, r5
 8001bac:	6013      	str	r3, [r2, #0]
            int pv_frac = (int)((peak_voltage - pv_int) * 10.0f);
 8001bae:	4b8d      	ldr	r3, [pc, #564]	@ (8001de4 <Display_Current_Menu+0x3d4>)
 8001bb0:	681c      	ldr	r4, [r3, #0]
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f7ff fc17 	bl	80013e8 <__aeabi_i2f>
 8001bba:	1c03      	adds	r3, r0, #0
 8001bbc:	1c19      	adds	r1, r3, #0
 8001bbe:	1c20      	adds	r0, r4, #0
 8001bc0:	f7ff f98e 	bl	8000ee0 <__aeabi_fsub>
 8001bc4:	1c03      	adds	r3, r0, #0
 8001bc6:	4988      	ldr	r1, [pc, #544]	@ (8001de8 <Display_Current_Menu+0x3d8>)
 8001bc8:	1c18      	adds	r0, r3, #0
 8001bca:	f7ff f82f 	bl	8000c2c <__aeabi_fmul>
 8001bce:	1c03      	adds	r3, r0, #0
 8001bd0:	1c18      	adds	r0, r3, #0
 8001bd2:	f7ff fbe9 	bl	80013a8 <__aeabi_f2iz>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	22b0      	movs	r2, #176	@ 0xb0
 8001bda:	18b9      	adds	r1, r7, r2
 8001bdc:	600b      	str	r3, [r1, #0]
            int pi_int = (int)peak_current;
 8001bde:	4b83      	ldr	r3, [pc, #524]	@ (8001dec <Display_Current_Menu+0x3dc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1c18      	adds	r0, r3, #0
 8001be4:	f7ff fbe0 	bl	80013a8 <__aeabi_f2iz>
 8001be8:	0003      	movs	r3, r0
 8001bea:	26ac      	movs	r6, #172	@ 0xac
 8001bec:	19b9      	adds	r1, r7, r6
 8001bee:	600b      	str	r3, [r1, #0]
            int pi_frac = (int)((peak_current - pi_int) * 100.0f);
 8001bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dec <Display_Current_Menu+0x3dc>)
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	19b9      	adds	r1, r7, r6
 8001bf6:	6808      	ldr	r0, [r1, #0]
 8001bf8:	f7ff fbf6 	bl	80013e8 <__aeabi_i2f>
 8001bfc:	1c03      	adds	r3, r0, #0
 8001bfe:	1c19      	adds	r1, r3, #0
 8001c00:	1c20      	adds	r0, r4, #0
 8001c02:	f7ff f96d 	bl	8000ee0 <__aeabi_fsub>
 8001c06:	1c03      	adds	r3, r0, #0
 8001c08:	4979      	ldr	r1, [pc, #484]	@ (8001df0 <Display_Current_Menu+0x3e0>)
 8001c0a:	1c18      	adds	r0, r3, #0
 8001c0c:	f7ff f80e 	bl	8000c2c <__aeabi_fmul>
 8001c10:	1c03      	adds	r3, r0, #0
 8001c12:	1c18      	adds	r0, r3, #0
 8001c14:	f7ff fbc8 	bl	80013a8 <__aeabi_f2iz>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	21a8      	movs	r1, #168	@ 0xa8
 8001c1c:	1878      	adds	r0, r7, r1
 8001c1e:	6003      	str	r3, [r0, #0]
            int pp_int = (int)peak_power;
 8001c20:	4b74      	ldr	r3, [pc, #464]	@ (8001df4 <Display_Current_Menu+0x3e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1c18      	adds	r0, r3, #0
 8001c26:	f7ff fbbf 	bl	80013a8 <__aeabi_f2iz>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	22a4      	movs	r2, #164	@ 0xa4
 8001c2e:	18b8      	adds	r0, r7, r2
 8001c30:	6003      	str	r3, [r0, #0]
            int pp_frac = (int)((peak_power - pp_int) * 10.0f);
 8001c32:	4b70      	ldr	r3, [pc, #448]	@ (8001df4 <Display_Current_Menu+0x3e4>)
 8001c34:	681c      	ldr	r4, [r3, #0]
 8001c36:	18b8      	adds	r0, r7, r2
 8001c38:	6800      	ldr	r0, [r0, #0]
 8001c3a:	f7ff fbd5 	bl	80013e8 <__aeabi_i2f>
 8001c3e:	1c03      	adds	r3, r0, #0
 8001c40:	1c19      	adds	r1, r3, #0
 8001c42:	1c20      	adds	r0, r4, #0
 8001c44:	f7ff f94c 	bl	8000ee0 <__aeabi_fsub>
 8001c48:	1c03      	adds	r3, r0, #0
 8001c4a:	4967      	ldr	r1, [pc, #412]	@ (8001de8 <Display_Current_Menu+0x3d8>)
 8001c4c:	1c18      	adds	r0, r3, #0
 8001c4e:	f7fe ffed 	bl	8000c2c <__aeabi_fmul>
 8001c52:	1c03      	adds	r3, r0, #0
 8001c54:	1c18      	adds	r0, r3, #0
 8001c56:	f7ff fba7 	bl	80013a8 <__aeabi_f2iz>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	24a0      	movs	r4, #160	@ 0xa0
 8001c5e:	1938      	adds	r0, r7, r4
 8001c60:	6003      	str	r3, [r0, #0]

            sprintf(line1, "V: %d.%dV", pv_int, pv_frac);
 8001c62:	23b0      	movs	r3, #176	@ 0xb0
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1978      	adds	r0, r7, r5
 8001c6a:	6802      	ldr	r2, [r0, #0]
 8001c6c:	4962      	ldr	r1, [pc, #392]	@ (8001df8 <Display_Current_Menu+0x3e8>)
 8001c6e:	2588      	movs	r5, #136	@ 0x88
 8001c70:	1978      	adds	r0, r7, r5
 8001c72:	f004 faff 	bl	8006274 <siprintf>
            sprintf(line2, "I: %d.%02dA", pi_int, pi_frac);
 8001c76:	21a8      	movs	r1, #168	@ 0xa8
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	19b9      	adds	r1, r7, r6
 8001c7e:	680a      	ldr	r2, [r1, #0]
 8001c80:	495e      	ldr	r1, [pc, #376]	@ (8001dfc <Display_Current_Menu+0x3ec>)
 8001c82:	2670      	movs	r6, #112	@ 0x70
 8001c84:	19b8      	adds	r0, r7, r6
 8001c86:	f004 faf5 	bl	8006274 <siprintf>
            sprintf(line3, "P: %d.%dW", pp_int, pp_frac);
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	22a4      	movs	r2, #164	@ 0xa4
 8001c90:	18ba      	adds	r2, r7, r2
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	495a      	ldr	r1, [pc, #360]	@ (8001e00 <Display_Current_Menu+0x3f0>)
 8001c96:	2458      	movs	r4, #88	@ 0x58
 8001c98:	1938      	adds	r0, r7, r4
 8001c9a:	f004 faeb 	bl	8006274 <siprintf>

            ssd1306_SetCursor(0, 10);
 8001c9e:	210a      	movs	r1, #10
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 fd1f 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line1, Font_7x10, White);
 8001ca6:	4a57      	ldr	r2, [pc, #348]	@ (8001e04 <Display_Current_Menu+0x3f4>)
 8001ca8:	1978      	adds	r0, r7, r5
 8001caa:	2301      	movs	r3, #1
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	6852      	ldr	r2, [r2, #4]
 8001cb0:	f001 fcee 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 20);
 8001cb4:	2114      	movs	r1, #20
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f001 fd14 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line2, Font_7x10, White);
 8001cbc:	4a51      	ldr	r2, [pc, #324]	@ (8001e04 <Display_Current_Menu+0x3f4>)
 8001cbe:	19b8      	adds	r0, r7, r6
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	6811      	ldr	r1, [r2, #0]
 8001cc4:	6852      	ldr	r2, [r2, #4]
 8001cc6:	f001 fce3 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(70, 20);
 8001cca:	2114      	movs	r1, #20
 8001ccc:	2046      	movs	r0, #70	@ 0x46
 8001cce:	f001 fd09 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line3, Font_7x10, White);
 8001cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <Display_Current_Menu+0x3f4>)
 8001cd4:	1938      	adds	r0, r7, r4
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	6852      	ldr	r2, [r2, #4]
 8001cdc:	f001 fcd8 	bl	8003690 <ssd1306_WriteString>
            break;
 8001ce0:	e18a      	b.n	8001ff8 <Display_Current_Menu+0x5e8>

        case MENU_SETTINGS:
            ssd1306_SetCursor(0, 0);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f001 fcfd 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("=== SETTINGS ===", Font_6x8, White);
 8001cea:	4a35      	ldr	r2, [pc, #212]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001cec:	4846      	ldr	r0, [pc, #280]	@ (8001e08 <Display_Current_Menu+0x3f8>)
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6811      	ldr	r1, [r2, #0]
 8001cf2:	6852      	ldr	r2, [r2, #4]
 8001cf4:	f001 fccc 	bl	8003690 <ssd1306_WriteString>

            sprintf(line1, "%s About", (menu_selection == 0) ? ">" : " ");
 8001cf8:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <Display_Current_Menu+0x2f4>
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001d02:	e000      	b.n	8001d06 <Display_Current_Menu+0x2f6>
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <Display_Current_Menu+0x3c0>)
 8001d06:	4941      	ldr	r1, [pc, #260]	@ (8001e0c <Display_Current_Menu+0x3fc>)
 8001d08:	2288      	movs	r2, #136	@ 0x88
 8001d0a:	18b8      	adds	r0, r7, r2
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	f004 fab1 	bl	8006274 <siprintf>
            sprintf(line2, "%s Back", (menu_selection == 1) ? ">" : " ");
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <Display_Current_Menu+0x30e>
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001d1c:	e000      	b.n	8001d20 <Display_Current_Menu+0x310>
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <Display_Current_Menu+0x3c0>)
 8001d20:	493b      	ldr	r1, [pc, #236]	@ (8001e10 <Display_Current_Menu+0x400>)
 8001d22:	2470      	movs	r4, #112	@ 0x70
 8001d24:	1938      	adds	r0, r7, r4
 8001d26:	001a      	movs	r2, r3
 8001d28:	f004 faa4 	bl	8006274 <siprintf>

            ssd1306_SetCursor(0, 12);
 8001d2c:	210c      	movs	r1, #12
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f001 fcd8 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line1, Font_7x10, White);
 8001d34:	4a33      	ldr	r2, [pc, #204]	@ (8001e04 <Display_Current_Menu+0x3f4>)
 8001d36:	2388      	movs	r3, #136	@ 0x88
 8001d38:	18f8      	adds	r0, r7, r3
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	6852      	ldr	r2, [r2, #4]
 8001d40:	f001 fca6 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 22);
 8001d44:	2116      	movs	r1, #22
 8001d46:	2000      	movs	r0, #0
 8001d48:	f001 fccc 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line2, Font_7x10, White);
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e04 <Display_Current_Menu+0x3f4>)
 8001d4e:	1938      	adds	r0, r7, r4
 8001d50:	2301      	movs	r3, #1
 8001d52:	6811      	ldr	r1, [r2, #0]
 8001d54:	6852      	ldr	r2, [r2, #4]
 8001d56:	f001 fc9b 	bl	8003690 <ssd1306_WriteString>
            break;
 8001d5a:	e14d      	b.n	8001ff8 <Display_Current_Menu+0x5e8>

        case MENU_RESET:
            ssd1306_SetCursor(0, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f001 fcc0 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("=== RESET ===", Font_6x8, White);
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <Display_Current_Menu+0x3b0>)
 8001d66:	482b      	ldr	r0, [pc, #172]	@ (8001e14 <Display_Current_Menu+0x404>)
 8001d68:	2301      	movs	r3, #1
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	6852      	ldr	r2, [r2, #4]
 8001d6e:	f001 fc8f 	bl	8003690 <ssd1306_WriteString>

            sprintf(line1, "%s Reset Peaks", (menu_selection == 0) ? ">" : " ");
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <Display_Current_Menu+0x36e>
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001d7c:	e000      	b.n	8001d80 <Display_Current_Menu+0x370>
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <Display_Current_Menu+0x3c0>)
 8001d80:	4925      	ldr	r1, [pc, #148]	@ (8001e18 <Display_Current_Menu+0x408>)
 8001d82:	2288      	movs	r2, #136	@ 0x88
 8001d84:	18b8      	adds	r0, r7, r2
 8001d86:	001a      	movs	r2, r3
 8001d88:	f004 fa74 	bl	8006274 <siprintf>
            sprintf(line2, "%s Reset Energy", (menu_selection == 1) ? ">" : " ");
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <Display_Current_Menu+0x388>
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001d96:	e000      	b.n	8001d9a <Display_Current_Menu+0x38a>
 8001d98:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <Display_Current_Menu+0x3c0>)
 8001d9a:	4920      	ldr	r1, [pc, #128]	@ (8001e1c <Display_Current_Menu+0x40c>)
 8001d9c:	2270      	movs	r2, #112	@ 0x70
 8001d9e:	18b8      	adds	r0, r7, r2
 8001da0:	001a      	movs	r2, r3
 8001da2:	f004 fa67 	bl	8006274 <siprintf>
            sprintf(line3, "%s Cancel", (menu_selection == 2) ? ">" : " ");
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <Display_Current_Menu+0x3b8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d138      	bne.n	8001e20 <Display_Current_Menu+0x410>
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <Display_Current_Menu+0x3bc>)
 8001db0:	e037      	b.n	8001e22 <Display_Current_Menu+0x412>
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	200001ad 	.word	0x200001ad
 8001db8:	08006ef0 	.word	0x08006ef0
 8001dbc:	08006d34 	.word	0x08006d34
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	08006bc8 	.word	0x08006bc8
 8001dc8:	200001ae 	.word	0x200001ae
 8001dcc:	08006bdc 	.word	0x08006bdc
 8001dd0:	08006be0 	.word	0x08006be0
 8001dd4:	08006be4 	.word	0x08006be4
 8001dd8:	08006bec 	.word	0x08006bec
 8001ddc:	08006bf0 	.word	0x08006bf0
 8001de0:	08006bf4 	.word	0x08006bf4
 8001de4:	20000194 	.word	0x20000194
 8001de8:	41200000 	.word	0x41200000
 8001dec:	20000198 	.word	0x20000198
 8001df0:	42c80000 	.word	0x42c80000
 8001df4:	2000019c 	.word	0x2000019c
 8001df8:	08006c08 	.word	0x08006c08
 8001dfc:	08006c14 	.word	0x08006c14
 8001e00:	08006c20 	.word	0x08006c20
 8001e04:	20000010 	.word	0x20000010
 8001e08:	08006c2c 	.word	0x08006c2c
 8001e0c:	08006c40 	.word	0x08006c40
 8001e10:	08006c4c 	.word	0x08006c4c
 8001e14:	08006c54 	.word	0x08006c54
 8001e18:	08006c64 	.word	0x08006c64
 8001e1c:	08006c74 	.word	0x08006c74
 8001e20:	4b78      	ldr	r3, [pc, #480]	@ (8002004 <Display_Current_Menu+0x5f4>)
 8001e22:	4979      	ldr	r1, [pc, #484]	@ (8002008 <Display_Current_Menu+0x5f8>)
 8001e24:	2458      	movs	r4, #88	@ 0x58
 8001e26:	1938      	adds	r0, r7, r4
 8001e28:	001a      	movs	r2, r3
 8001e2a:	f004 fa23 	bl	8006274 <siprintf>

            ssd1306_SetCursor(0, 8);
 8001e2e:	2108      	movs	r1, #8
 8001e30:	2000      	movs	r0, #0
 8001e32:	f001 fc57 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line1, Font_6x8, White);
 8001e36:	4a75      	ldr	r2, [pc, #468]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001e38:	2388      	movs	r3, #136	@ 0x88
 8001e3a:	18f8      	adds	r0, r7, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	6811      	ldr	r1, [r2, #0]
 8001e40:	6852      	ldr	r2, [r2, #4]
 8001e42:	f001 fc25 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 16);
 8001e46:	2110      	movs	r1, #16
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f001 fc4b 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line2, Font_6x8, White);
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001e50:	2370      	movs	r3, #112	@ 0x70
 8001e52:	18f8      	adds	r0, r7, r3
 8001e54:	2301      	movs	r3, #1
 8001e56:	6811      	ldr	r1, [r2, #0]
 8001e58:	6852      	ldr	r2, [r2, #4]
 8001e5a:	f001 fc19 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 24);
 8001e5e:	2118      	movs	r1, #24
 8001e60:	2000      	movs	r0, #0
 8001e62:	f001 fc3f 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString(line3, Font_6x8, White);
 8001e66:	4a69      	ldr	r2, [pc, #420]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001e68:	1938      	adds	r0, r7, r4
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	6811      	ldr	r1, [r2, #0]
 8001e6e:	6852      	ldr	r2, [r2, #4]
 8001e70:	f001 fc0e 	bl	8003690 <ssd1306_WriteString>
            break;
 8001e74:	e0c0      	b.n	8001ff8 <Display_Current_Menu+0x5e8>

        case MENU_GRAPHICS_SELECT:
            {
                const char* graphics_items[4] = {
 8001e76:	231c      	movs	r3, #28
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <Display_Current_Menu+0x600>)
 8001e7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e7e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	601a      	str	r2, [r3, #0]
                    " Current (A)",
                    " Power (W)",
                    " Back"
                };

                ssd1306_SetCursor(0, 0);
 8001e84:	2100      	movs	r1, #0
 8001e86:	2000      	movs	r0, #0
 8001e88:	f001 fc2c 	bl	80036e4 <ssd1306_SetCursor>
                ssd1306_WriteString("=== GRAPHICS ===", Font_6x8, White);
 8001e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001e8e:	4861      	ldr	r0, [pc, #388]	@ (8002014 <Display_Current_Menu+0x604>)
 8001e90:	2301      	movs	r3, #1
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	f001 fbfb 	bl	8003690 <ssd1306_WriteString>

                uint8_t start_item = 0;
 8001e9a:	21bd      	movs	r1, #189	@ 0xbd
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
                if (menu_selection >= 2) {
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <Display_Current_Menu+0x608>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d90b      	bls.n	8001ec2 <Display_Current_Menu+0x4b2>
                    start_item = menu_selection - 1;
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002018 <Display_Current_Menu+0x608>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
                    if (start_item > 1) start_item = 1;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d902      	bls.n	8001ec2 <Display_Current_Menu+0x4b2>
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
                }

                for (uint8_t i = 0; i < 3 && (start_item + i) < 4; i++) {
 8001ec2:	23bc      	movs	r3, #188	@ 0xbc
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e034      	b.n	8001f36 <Display_Current_Menu+0x526>
                    uint8_t item_index = start_item + i;
 8001ecc:	20bb      	movs	r0, #187	@ 0xbb
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	22bd      	movs	r2, #189	@ 0xbd
 8001ed2:	18b9      	adds	r1, r7, r2
 8001ed4:	22bc      	movs	r2, #188	@ 0xbc
 8001ed6:	18ba      	adds	r2, r7, r2
 8001ed8:	7809      	ldrb	r1, [r1, #0]
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	188a      	adds	r2, r1, r2
 8001ede:	701a      	strb	r2, [r3, #0]
                    char display_line[21];

                    sprintf(display_line, "%s%s",
                           (item_index == menu_selection) ? ">" : " ",
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <Display_Current_Menu+0x608>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
                    sprintf(display_line, "%s%s",
 8001ee4:	183a      	adds	r2, r7, r0
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d101      	bne.n	8001ef0 <Display_Current_Menu+0x4e0>
 8001eec:	4a4b      	ldr	r2, [pc, #300]	@ (800201c <Display_Current_Menu+0x60c>)
 8001eee:	e000      	b.n	8001ef2 <Display_Current_Menu+0x4e2>
 8001ef0:	4a44      	ldr	r2, [pc, #272]	@ (8002004 <Display_Current_Menu+0x5f4>)
 8001ef2:	23bb      	movs	r3, #187	@ 0xbb
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	7819      	ldrb	r1, [r3, #0]
 8001ef8:	231c      	movs	r3, #28
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	0089      	lsls	r1, r1, #2
 8001efe:	58cb      	ldr	r3, [r1, r3]
 8001f00:	4947      	ldr	r1, [pc, #284]	@ (8002020 <Display_Current_Menu+0x610>)
 8001f02:	1d38      	adds	r0, r7, #4
 8001f04:	f004 f9b6 	bl	8006274 <siprintf>
                           graphics_items[item_index]);

                    ssd1306_SetCursor(0, 8 + (i * 8));
 8001f08:	24bc      	movs	r4, #188	@ 0xbc
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	0019      	movs	r1, r3
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f001 fbe3 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString(display_line, Font_6x8, White);
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001f20:	1d38      	adds	r0, r7, #4
 8001f22:	2301      	movs	r3, #1
 8001f24:	6811      	ldr	r1, [r2, #0]
 8001f26:	6852      	ldr	r2, [r2, #4]
 8001f28:	f001 fbb2 	bl	8003690 <ssd1306_WriteString>
                for (uint8_t i = 0; i < 3 && (start_item + i) < 4; i++) {
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	193b      	adds	r3, r7, r4
 8001f32:	3201      	adds	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	21bc      	movs	r1, #188	@ 0xbc
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d807      	bhi.n	8001f50 <Display_Current_Menu+0x540>
 8001f40:	23bd      	movs	r3, #189	@ 0xbd
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	18d3      	adds	r3, r2, r3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	ddbd      	ble.n	8001ecc <Display_Current_Menu+0x4bc>
                }

                if (start_item > 0) {
 8001f50:	23bd      	movs	r3, #189	@ 0xbd
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <Display_Current_Menu+0x560>
                    ssd1306_SetCursor(120, 8);
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	2078      	movs	r0, #120	@ 0x78
 8001f5e:	f001 fbc1 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString("^", Font_6x8, White);
 8001f62:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001f64:	482f      	ldr	r0, [pc, #188]	@ (8002024 <Display_Current_Menu+0x614>)
 8001f66:	2301      	movs	r3, #1
 8001f68:	6811      	ldr	r1, [r2, #0]
 8001f6a:	6852      	ldr	r2, [r2, #4]
 8001f6c:	f001 fb90 	bl	8003690 <ssd1306_WriteString>
                }
                if (start_item + 3 < 4) {
 8001f70:	23bd      	movs	r3, #189	@ 0xbd
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d13d      	bne.n	8001ff6 <Display_Current_Menu+0x5e6>
                    ssd1306_SetCursor(120, 24);
 8001f7a:	2118      	movs	r1, #24
 8001f7c:	2078      	movs	r0, #120	@ 0x78
 8001f7e:	f001 fbb1 	bl	80036e4 <ssd1306_SetCursor>
                    ssd1306_WriteString("v", Font_6x8, White);
 8001f82:	4a22      	ldr	r2, [pc, #136]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001f84:	4828      	ldr	r0, [pc, #160]	@ (8002028 <Display_Current_Menu+0x618>)
 8001f86:	2301      	movs	r3, #1
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	6852      	ldr	r2, [r2, #4]
 8001f8c:	f001 fb80 	bl	8003690 <ssd1306_WriteString>
                }
            }
            break;
 8001f90:	e031      	b.n	8001ff6 <Display_Current_Menu+0x5e6>

        case MENU_GRAPHICS:
            Display_Graphics();
 8001f92:	f000 f8a1 	bl	80020d8 <Display_Graphics>
            return;
 8001f96:	e031      	b.n	8001ffc <Display_Current_Menu+0x5ec>

        case MENU_ABOUT:
            ssd1306_SetCursor(0, 0);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f001 fba2 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("Power Meter v1.0", Font_7x10, White);
 8001fa0:	4a22      	ldr	r2, [pc, #136]	@ (800202c <Display_Current_Menu+0x61c>)
 8001fa2:	4823      	ldr	r0, [pc, #140]	@ (8002030 <Display_Current_Menu+0x620>)
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6811      	ldr	r1, [r2, #0]
 8001fa8:	6852      	ldr	r2, [r2, #4]
 8001faa:	f001 fb71 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 8001fae:	210c      	movs	r1, #12
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f001 fb97 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("STM32L052K6", Font_6x8, White);
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001fb8:	481e      	ldr	r0, [pc, #120]	@ (8002034 <Display_Current_Menu+0x624>)
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6811      	ldr	r1, [r2, #0]
 8001fbe:	6852      	ldr	r2, [r2, #4]
 8001fc0:	f001 fb66 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 20);
 8001fc4:	2114      	movs	r1, #20
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f001 fb8c 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("Production Board", Font_6x8, White);
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001fce:	481a      	ldr	r0, [pc, #104]	@ (8002038 <Display_Current_Menu+0x628>)
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	6811      	ldr	r1, [r2, #0]
 8001fd4:	6852      	ldr	r2, [r2, #4]
 8001fd6:	f001 fb5b 	bl	8003690 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 28);
 8001fda:	211c      	movs	r1, #28
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f001 fb81 	bl	80036e4 <ssd1306_SetCursor>
            ssd1306_WriteString("Real Power Meter", Font_6x8, White);
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <Display_Current_Menu+0x5fc>)
 8001fe4:	4815      	ldr	r0, [pc, #84]	@ (800203c <Display_Current_Menu+0x62c>)
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	6811      	ldr	r1, [r2, #0]
 8001fea:	6852      	ldr	r2, [r2, #4]
 8001fec:	f001 fb50 	bl	8003690 <ssd1306_WriteString>
            break;
 8001ff0:	e002      	b.n	8001ff8 <Display_Current_Menu+0x5e8>
            break;
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	e000      	b.n	8001ff8 <Display_Current_Menu+0x5e8>
            break;
 8001ff6:	46c0      	nop			@ (mov r8, r8)
    }

    ssd1306_UpdateScreen();
 8001ff8:	f001 fa22 	bl	8003440 <ssd1306_UpdateScreen>
}
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b031      	add	sp, #196	@ 0xc4
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	08006be0 	.word	0x08006be0
 8002008:	08006c84 	.word	0x08006c84
 800200c:	20000008 	.word	0x20000008
 8002010:	08006d7c 	.word	0x08006d7c
 8002014:	08006c90 	.word	0x08006c90
 8002018:	200001ae 	.word	0x200001ae
 800201c:	08006bdc 	.word	0x08006bdc
 8002020:	08006be4 	.word	0x08006be4
 8002024:	08006bec 	.word	0x08006bec
 8002028:	08006bf0 	.word	0x08006bf0
 800202c:	20000010 	.word	0x20000010
 8002030:	08006ca4 	.word	0x08006ca4
 8002034:	08006cb8 	.word	0x08006cb8
 8002038:	08006cc4 	.word	0x08006cc4
 800203c:	08006cd8 	.word	0x08006cd8

08002040 <Update_Graphics_Data>:

/**
  * @brief  Update graphics data buffer with current values
  */
void Update_Graphics_Data(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8002046:	f001 fcbb 	bl	80039c0 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	607b      	str	r3, [r7, #4]

    if (current_time - last_graph_update > 200) {
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <Update_Graphics_Data+0x74>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2bc8      	cmp	r3, #200	@ 0xc8
 8002058:	d928      	bls.n	80020ac <Update_Graphics_Data+0x6c>
        voltage_history[graph_data_index] = measured_voltage;
 800205a:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <Update_Graphics_Data+0x78>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	001a      	movs	r2, r3
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <Update_Graphics_Data+0x7c>)
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <Update_Graphics_Data+0x80>)
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	50d1      	str	r1, [r2, r3]
        current_history[graph_data_index] = measured_current;
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <Update_Graphics_Data+0x78>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	001a      	movs	r2, r3
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <Update_Graphics_Data+0x84>)
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <Update_Graphics_Data+0x88>)
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	50d1      	str	r1, [r2, r3]
        power_history[graph_data_index] = calculated_power;
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <Update_Graphics_Data+0x78>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	001a      	movs	r2, r3
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <Update_Graphics_Data+0x8c>)
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <Update_Graphics_Data+0x90>)
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	50d1      	str	r1, [r2, r3]

        graph_data_index = (graph_data_index + 1) % GRAPH_DATA_POINTS;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <Update_Graphics_Data+0x78>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a10      	ldr	r2, [pc, #64]	@ (80020d4 <Update_Graphics_Data+0x94>)
 8002092:	4013      	ands	r3, r2
 8002094:	d504      	bpl.n	80020a0 <Update_Graphics_Data+0x60>
 8002096:	3b01      	subs	r3, #1
 8002098:	2220      	movs	r2, #32
 800209a:	4252      	negs	r2, r2
 800209c:	4313      	orrs	r3, r2
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <Update_Graphics_Data+0x78>)
 80020a4:	701a      	strb	r2, [r3, #0]
        last_graph_update = current_time;
 80020a6:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <Update_Graphics_Data+0x74>)
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
    }
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000033c 	.word	0x2000033c
 80020b8:	20000338 	.word	0x20000338
 80020bc:	20000180 	.word	0x20000180
 80020c0:	200001b8 	.word	0x200001b8
 80020c4:	20000184 	.word	0x20000184
 80020c8:	20000238 	.word	0x20000238
 80020cc:	20000188 	.word	0x20000188
 80020d0:	200002b8 	.word	0x200002b8
 80020d4:	8000001f 	.word	0x8000001f

080020d8 <Display_Graphics>:

/**
  * @brief  Display graphics curve (optimized for 32KB Flash)
  */
void Display_Graphics(void)
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b095      	sub	sp, #84	@ 0x54
 80020dc:	af02      	add	r7, sp, #8
    char title_str[21] = {0};
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	0018      	movs	r0, r3
 80020e2:	2315      	movs	r3, #21
 80020e4:	001a      	movs	r2, r3
 80020e6:	2100      	movs	r1, #0
 80020e8:	f004 f8f8 	bl	80062dc <memset>
    float max_value = 0.0f;
 80020ec:	2300      	movs	r3, #0
 80020ee:	647b      	str	r3, [r7, #68]	@ 0x44
    float* data_array;

    ssd1306_Fill(Black);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f001 f981 	bl	80033f8 <ssd1306_Fill>

    if (graphics_parameter == 0) {
 80020f6:	4be1      	ldr	r3, [pc, #900]	@ (800247c <Display_Graphics+0x3a4>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d126      	bne.n	800214c <Display_Graphics+0x74>
        int v_int = (int)measured_voltage;
 80020fe:	4be0      	ldr	r3, [pc, #896]	@ (8002480 <Display_Graphics+0x3a8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1c18      	adds	r0, r3, #0
 8002104:	f7ff f950 	bl	80013a8 <__aeabi_f2iz>
 8002108:	0003      	movs	r3, r0
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
        int v_frac = (int)((measured_voltage - v_int) * 10.0f);
 800210c:	4bdc      	ldr	r3, [pc, #880]	@ (8002480 <Display_Graphics+0x3a8>)
 800210e:	681c      	ldr	r4, [r3, #0]
 8002110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002112:	f7ff f969 	bl	80013e8 <__aeabi_i2f>
 8002116:	1c03      	adds	r3, r0, #0
 8002118:	1c19      	adds	r1, r3, #0
 800211a:	1c20      	adds	r0, r4, #0
 800211c:	f7fe fee0 	bl	8000ee0 <__aeabi_fsub>
 8002120:	1c03      	adds	r3, r0, #0
 8002122:	49d8      	ldr	r1, [pc, #864]	@ (8002484 <Display_Graphics+0x3ac>)
 8002124:	1c18      	adds	r0, r3, #0
 8002126:	f7fe fd81 	bl	8000c2c <__aeabi_fmul>
 800212a:	1c03      	adds	r3, r0, #0
 800212c:	1c18      	adds	r0, r3, #0
 800212e:	f7ff f93b 	bl	80013a8 <__aeabi_f2iz>
 8002132:	0003      	movs	r3, r0
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
        sprintf(title_str, "Voltage: %d.%dV", v_int, v_frac);
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800213a:	49d3      	ldr	r1, [pc, #844]	@ (8002488 <Display_Graphics+0x3b0>)
 800213c:	1d38      	adds	r0, r7, #4
 800213e:	f004 f899 	bl	8006274 <siprintf>
        data_array = voltage_history;
 8002142:	4bd2      	ldr	r3, [pc, #840]	@ (800248c <Display_Graphics+0x3b4>)
 8002144:	643b      	str	r3, [r7, #64]	@ 0x40
        max_value = 30.0f;
 8002146:	4bd2      	ldr	r3, [pc, #840]	@ (8002490 <Display_Graphics+0x3b8>)
 8002148:	647b      	str	r3, [r7, #68]	@ 0x44
 800214a:	e050      	b.n	80021ee <Display_Graphics+0x116>
    } else if (graphics_parameter == 1) {
 800214c:	4bcb      	ldr	r3, [pc, #812]	@ (800247c <Display_Graphics+0x3a4>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d126      	bne.n	80021a2 <Display_Graphics+0xca>
        int i_int = (int)measured_current;
 8002154:	4bcf      	ldr	r3, [pc, #828]	@ (8002494 <Display_Graphics+0x3bc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1c18      	adds	r0, r3, #0
 800215a:	f7ff f925 	bl	80013a8 <__aeabi_f2iz>
 800215e:	0003      	movs	r3, r0
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
        int i_frac = (int)((measured_current - i_int) * 100.0f);
 8002162:	4bcc      	ldr	r3, [pc, #816]	@ (8002494 <Display_Graphics+0x3bc>)
 8002164:	681c      	ldr	r4, [r3, #0]
 8002166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002168:	f7ff f93e 	bl	80013e8 <__aeabi_i2f>
 800216c:	1c03      	adds	r3, r0, #0
 800216e:	1c19      	adds	r1, r3, #0
 8002170:	1c20      	adds	r0, r4, #0
 8002172:	f7fe feb5 	bl	8000ee0 <__aeabi_fsub>
 8002176:	1c03      	adds	r3, r0, #0
 8002178:	49c7      	ldr	r1, [pc, #796]	@ (8002498 <Display_Graphics+0x3c0>)
 800217a:	1c18      	adds	r0, r3, #0
 800217c:	f7fe fd56 	bl	8000c2c <__aeabi_fmul>
 8002180:	1c03      	adds	r3, r0, #0
 8002182:	1c18      	adds	r0, r3, #0
 8002184:	f7ff f910 	bl	80013a8 <__aeabi_f2iz>
 8002188:	0003      	movs	r3, r0
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sprintf(title_str, "Current: %d.%02dA", i_int, i_frac);
 800218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002190:	49c2      	ldr	r1, [pc, #776]	@ (800249c <Display_Graphics+0x3c4>)
 8002192:	1d38      	adds	r0, r7, #4
 8002194:	f004 f86e 	bl	8006274 <siprintf>
        data_array = current_history;
 8002198:	4bc1      	ldr	r3, [pc, #772]	@ (80024a0 <Display_Graphics+0x3c8>)
 800219a:	643b      	str	r3, [r7, #64]	@ 0x40
        max_value = 5.0f;
 800219c:	4bc1      	ldr	r3, [pc, #772]	@ (80024a4 <Display_Graphics+0x3cc>)
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a0:	e025      	b.n	80021ee <Display_Graphics+0x116>
    } else {
        int p_int = (int)calculated_power;
 80021a2:	4bc1      	ldr	r3, [pc, #772]	@ (80024a8 <Display_Graphics+0x3d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1c18      	adds	r0, r3, #0
 80021a8:	f7ff f8fe 	bl	80013a8 <__aeabi_f2iz>
 80021ac:	0003      	movs	r3, r0
 80021ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        int p_frac = (int)((calculated_power - p_int) * 10.0f);
 80021b0:	4bbd      	ldr	r3, [pc, #756]	@ (80024a8 <Display_Graphics+0x3d0>)
 80021b2:	681c      	ldr	r4, [r3, #0]
 80021b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021b6:	f7ff f917 	bl	80013e8 <__aeabi_i2f>
 80021ba:	1c03      	adds	r3, r0, #0
 80021bc:	1c19      	adds	r1, r3, #0
 80021be:	1c20      	adds	r0, r4, #0
 80021c0:	f7fe fe8e 	bl	8000ee0 <__aeabi_fsub>
 80021c4:	1c03      	adds	r3, r0, #0
 80021c6:	49af      	ldr	r1, [pc, #700]	@ (8002484 <Display_Graphics+0x3ac>)
 80021c8:	1c18      	adds	r0, r3, #0
 80021ca:	f7fe fd2f 	bl	8000c2c <__aeabi_fmul>
 80021ce:	1c03      	adds	r3, r0, #0
 80021d0:	1c18      	adds	r0, r3, #0
 80021d2:	f7ff f8e9 	bl	80013a8 <__aeabi_f2iz>
 80021d6:	0003      	movs	r3, r0
 80021d8:	637b      	str	r3, [r7, #52]	@ 0x34
        sprintf(title_str, "Power: %d.%dW", p_int, p_frac);
 80021da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021de:	49b3      	ldr	r1, [pc, #716]	@ (80024ac <Display_Graphics+0x3d4>)
 80021e0:	1d38      	adds	r0, r7, #4
 80021e2:	f004 f847 	bl	8006274 <siprintf>
        data_array = power_history;
 80021e6:	4bb2      	ldr	r3, [pc, #712]	@ (80024b0 <Display_Graphics+0x3d8>)
 80021e8:	643b      	str	r3, [r7, #64]	@ 0x40
        max_value = 150.0f;
 80021ea:	4bb2      	ldr	r3, [pc, #712]	@ (80024b4 <Display_Graphics+0x3dc>)
 80021ec:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    ssd1306_SetCursor(0, 0);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2000      	movs	r0, #0
 80021f2:	f001 fa77 	bl	80036e4 <ssd1306_SetCursor>
    ssd1306_WriteString(title_str, Font_6x8, White);
 80021f6:	4ab0      	ldr	r2, [pc, #704]	@ (80024b8 <Display_Graphics+0x3e0>)
 80021f8:	1d38      	adds	r0, r7, #4
 80021fa:	2301      	movs	r3, #1
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	6852      	ldr	r2, [r2, #4]
 8002200:	f001 fa46 	bl	8003690 <ssd1306_WriteString>

    uint8_t graph_height = 20;
 8002204:	2323      	movs	r3, #35	@ 0x23
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2214      	movs	r2, #20
 800220a:	701a      	strb	r2, [r3, #0]
    uint8_t graph_y_offset = 10;
 800220c:	2322      	movs	r3, #34	@ 0x22
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	220a      	movs	r2, #10
 8002212:	701a      	strb	r2, [r3, #0]

    // Draw axes
    for (uint8_t y = 0; y < graph_height; y++) {
 8002214:	233f      	movs	r3, #63	@ 0x3f
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e011      	b.n	8002242 <Display_Graphics+0x16a>
        ssd1306_DrawPixel(10, graph_y_offset + y, White);
 800221e:	2322      	movs	r3, #34	@ 0x22
 8002220:	18fa      	adds	r2, r7, r3
 8002222:	243f      	movs	r4, #63	@ 0x3f
 8002224:	193b      	adds	r3, r7, r4
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	18d3      	adds	r3, r2, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2201      	movs	r2, #1
 8002230:	0019      	movs	r1, r3
 8002232:	200a      	movs	r0, #10
 8002234:	f001 f932 	bl	800349c <ssd1306_DrawPixel>
    for (uint8_t y = 0; y < graph_height; y++) {
 8002238:	193b      	adds	r3, r7, r4
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	193b      	adds	r3, r7, r4
 800223e:	3201      	adds	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	233f      	movs	r3, #63	@ 0x3f
 8002244:	18fa      	adds	r2, r7, r3
 8002246:	2323      	movs	r3, #35	@ 0x23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3e5      	bcc.n	800221e <Display_Graphics+0x146>
    }
    for (uint8_t x = 0; x < 110; x++) {
 8002252:	233e      	movs	r3, #62	@ 0x3e
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e017      	b.n	800228c <Display_Graphics+0x1b4>
        ssd1306_DrawPixel(10 + x, graph_y_offset + graph_height - 1, White);
 800225c:	243e      	movs	r4, #62	@ 0x3e
 800225e:	193b      	adds	r3, r7, r4
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	330a      	adds	r3, #10
 8002264:	b2d8      	uxtb	r0, r3
 8002266:	2322      	movs	r3, #34	@ 0x22
 8002268:	18fa      	adds	r2, r7, r3
 800226a:	2323      	movs	r3, #35	@ 0x23
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2201      	movs	r2, #1
 800227c:	0019      	movs	r1, r3
 800227e:	f001 f90d 	bl	800349c <ssd1306_DrawPixel>
    for (uint8_t x = 0; x < 110; x++) {
 8002282:	193b      	adds	r3, r7, r4
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	193b      	adds	r3, r7, r4
 8002288:	3201      	adds	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	233e      	movs	r3, #62	@ 0x3e
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b6d      	cmp	r3, #109	@ 0x6d
 8002294:	d9e2      	bls.n	800225c <Display_Graphics+0x184>
    }

    // Plot data points (optimized for reduced data points)
    for (uint8_t i = 0; i < GRAPH_DATA_POINTS - 1; i++) {
 8002296:	233d      	movs	r3, #61	@ 0x3d
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e0a6      	b.n	80023ee <Display_Graphics+0x316>
        uint8_t data_index = (graph_data_index + i) % GRAPH_DATA_POINTS;
 80022a0:	4b86      	ldr	r3, [pc, #536]	@ (80024bc <Display_Graphics+0x3e4>)
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	203d      	movs	r0, #61	@ 0x3d
 80022a6:	183b      	adds	r3, r7, r0
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	2321      	movs	r3, #33	@ 0x21
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	211f      	movs	r1, #31
 80022b4:	400a      	ands	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
        uint8_t next_index = (graph_data_index + i + 1) % GRAPH_DATA_POINTS;
 80022b8:	4b80      	ldr	r3, [pc, #512]	@ (80024bc <Display_Graphics+0x3e4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	001a      	movs	r2, r3
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a7e      	ldr	r2, [pc, #504]	@ (80024c0 <Display_Graphics+0x3e8>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	d504      	bpl.n	80022d6 <Display_Graphics+0x1fe>
 80022cc:	3b01      	subs	r3, #1
 80022ce:	2220      	movs	r2, #32
 80022d0:	4252      	negs	r2, r2
 80022d2:	4313      	orrs	r3, r2
 80022d4:	3301      	adds	r3, #1
 80022d6:	001a      	movs	r2, r3
 80022d8:	2320      	movs	r3, #32
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	701a      	strb	r2, [r3, #0]

        uint8_t y1 = graph_y_offset + graph_height - 1 -
 80022de:	2222      	movs	r2, #34	@ 0x22
 80022e0:	18ba      	adds	r2, r7, r2
 80022e2:	2623      	movs	r6, #35	@ 0x23
 80022e4:	19bb      	adds	r3, r7, r6
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	18d3      	adds	r3, r2, r3
 80022ec:	b2dc      	uxtb	r4, r3
                     (uint8_t)((data_array[data_index] / max_value) * (graph_height - 2));
 80022ee:	2121      	movs	r1, #33	@ 0x21
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80022fe:	1c18      	adds	r0, r3, #0
 8002300:	f7fe fac6 	bl	8000890 <__aeabi_fdiv>
 8002304:	1c03      	adds	r3, r0, #0
 8002306:	1c1d      	adds	r5, r3, #0
 8002308:	19bb      	adds	r3, r7, r6
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3b02      	subs	r3, #2
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff f86a 	bl	80013e8 <__aeabi_i2f>
 8002314:	1c03      	adds	r3, r0, #0
 8002316:	1c19      	adds	r1, r3, #0
 8002318:	1c28      	adds	r0, r5, #0
 800231a:	f7fe fc87 	bl	8000c2c <__aeabi_fmul>
 800231e:	1c03      	adds	r3, r0, #0
 8002320:	1c18      	adds	r0, r3, #0
 8002322:	f7fe f8ab 	bl	800047c <__aeabi_f2uiz>
 8002326:	0003      	movs	r3, r0
 8002328:	b2db      	uxtb	r3, r3
        uint8_t y1 = graph_y_offset + graph_height - 1 -
 800232a:	1ae3      	subs	r3, r4, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	211f      	movs	r1, #31
 8002330:	187b      	adds	r3, r7, r1
 8002332:	3a01      	subs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
        uint8_t y2 = graph_y_offset + graph_height - 1 -
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	18ba      	adds	r2, r7, r2
 800233a:	19bb      	adds	r3, r7, r6
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	b2dc      	uxtb	r4, r3
                     (uint8_t)((data_array[next_index] / max_value) * (graph_height - 2));
 8002344:	2320      	movs	r3, #32
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800234e:	18d3      	adds	r3, r2, r3
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002354:	1c18      	adds	r0, r3, #0
 8002356:	f7fe fa9b 	bl	8000890 <__aeabi_fdiv>
 800235a:	1c03      	adds	r3, r0, #0
 800235c:	1c1d      	adds	r5, r3, #0
 800235e:	19bb      	adds	r3, r7, r6
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3b02      	subs	r3, #2
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff f83f 	bl	80013e8 <__aeabi_i2f>
 800236a:	1c03      	adds	r3, r0, #0
 800236c:	1c19      	adds	r1, r3, #0
 800236e:	1c28      	adds	r0, r5, #0
 8002370:	f7fe fc5c 	bl	8000c2c <__aeabi_fmul>
 8002374:	1c03      	adds	r3, r0, #0
 8002376:	1c18      	adds	r0, r3, #0
 8002378:	f7fe f880 	bl	800047c <__aeabi_f2uiz>
 800237c:	0003      	movs	r3, r0
 800237e:	b2db      	uxtb	r3, r3
        uint8_t y2 = graph_y_offset + graph_height - 1 -
 8002380:	1ae3      	subs	r3, r4, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	241e      	movs	r4, #30
 8002386:	193b      	adds	r3, r7, r4
 8002388:	3a01      	subs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]

        uint8_t x1 = 11 + (i * 110) / (GRAPH_DATA_POINTS - 1);
 800238c:	253d      	movs	r5, #61	@ 0x3d
 800238e:	197b      	adds	r3, r7, r5
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	226e      	movs	r2, #110	@ 0x6e
 8002394:	4353      	muls	r3, r2
 8002396:	211f      	movs	r1, #31
 8002398:	0018      	movs	r0, r3
 800239a:	f7fd ff49 	bl	8000230 <__divsi3>
 800239e:	0003      	movs	r3, r0
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	261d      	movs	r6, #29
 80023a4:	19bb      	adds	r3, r7, r6
 80023a6:	320b      	adds	r2, #11
 80023a8:	701a      	strb	r2, [r3, #0]
        uint8_t x2 = 11 + ((i + 1) * 110) / (GRAPH_DATA_POINTS - 1);
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	226e      	movs	r2, #110	@ 0x6e
 80023b2:	4353      	muls	r3, r2
 80023b4:	211f      	movs	r1, #31
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7fd ff3a 	bl	8000230 <__divsi3>
 80023bc:	0003      	movs	r3, r0
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	201c      	movs	r0, #28
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	320b      	adds	r2, #11
 80023c6:	701a      	strb	r2, [r3, #0]

        ssd1306_Line(x1, y1, x2, y2, White);
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	781c      	ldrb	r4, [r3, #0]
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	211f      	movs	r1, #31
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	7819      	ldrb	r1, [r3, #0]
 80023d6:	19bb      	adds	r3, r7, r6
 80023d8:	7818      	ldrb	r0, [r3, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	0023      	movs	r3, r4
 80023e0:	f001 f99a 	bl	8003718 <ssd1306_Line>
    for (uint8_t i = 0; i < GRAPH_DATA_POINTS - 1; i++) {
 80023e4:	197b      	adds	r3, r7, r5
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	3201      	adds	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	233d      	movs	r3, #61	@ 0x3d
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b1e      	cmp	r3, #30
 80023f6:	d800      	bhi.n	80023fa <Display_Graphics+0x322>
 80023f8:	e752      	b.n	80022a0 <Display_Graphics+0x1c8>
    }

    // Add scale labels
    ssd1306_SetCursor(0, graph_y_offset);
 80023fa:	2322      	movs	r3, #34	@ 0x22
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	0019      	movs	r1, r3
 8002402:	2000      	movs	r0, #0
 8002404:	f001 f96e 	bl	80036e4 <ssd1306_SetCursor>
    if (graphics_parameter == 0) {
 8002408:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <Display_Graphics+0x3a4>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <Display_Graphics+0x348>
        ssd1306_WriteString("30", Font_6x8, White);
 8002410:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <Display_Graphics+0x3e0>)
 8002412:	482c      	ldr	r0, [pc, #176]	@ (80024c4 <Display_Graphics+0x3ec>)
 8002414:	2301      	movs	r3, #1
 8002416:	6811      	ldr	r1, [r2, #0]
 8002418:	6852      	ldr	r2, [r2, #4]
 800241a:	f001 f939 	bl	8003690 <ssd1306_WriteString>
 800241e:	e012      	b.n	8002446 <Display_Graphics+0x36e>
    } else if (graphics_parameter == 1) {
 8002420:	4b16      	ldr	r3, [pc, #88]	@ (800247c <Display_Graphics+0x3a4>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <Display_Graphics+0x360>
        ssd1306_WriteString("5", Font_6x8, White);
 8002428:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <Display_Graphics+0x3e0>)
 800242a:	4827      	ldr	r0, [pc, #156]	@ (80024c8 <Display_Graphics+0x3f0>)
 800242c:	2301      	movs	r3, #1
 800242e:	6811      	ldr	r1, [r2, #0]
 8002430:	6852      	ldr	r2, [r2, #4]
 8002432:	f001 f92d 	bl	8003690 <ssd1306_WriteString>
 8002436:	e006      	b.n	8002446 <Display_Graphics+0x36e>
    } else {
        ssd1306_WriteString("150", Font_6x8, White);
 8002438:	4a1f      	ldr	r2, [pc, #124]	@ (80024b8 <Display_Graphics+0x3e0>)
 800243a:	4824      	ldr	r0, [pc, #144]	@ (80024cc <Display_Graphics+0x3f4>)
 800243c:	2301      	movs	r3, #1
 800243e:	6811      	ldr	r1, [r2, #0]
 8002440:	6852      	ldr	r2, [r2, #4]
 8002442:	f001 f925 	bl	8003690 <ssd1306_WriteString>
    }

    ssd1306_SetCursor(0, graph_y_offset + graph_height - 8);
 8002446:	2322      	movs	r3, #34	@ 0x22
 8002448:	18fa      	adds	r2, r7, r3
 800244a:	2323      	movs	r3, #35	@ 0x23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	18d3      	adds	r3, r2, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3b08      	subs	r3, #8
 8002458:	b2db      	uxtb	r3, r3
 800245a:	0019      	movs	r1, r3
 800245c:	2000      	movs	r0, #0
 800245e:	f001 f941 	bl	80036e4 <ssd1306_SetCursor>
    ssd1306_WriteString("0", Font_6x8, White);
 8002462:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <Display_Graphics+0x3e0>)
 8002464:	481a      	ldr	r0, [pc, #104]	@ (80024d0 <Display_Graphics+0x3f8>)
 8002466:	2301      	movs	r3, #1
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	6852      	ldr	r2, [r2, #4]
 800246c:	f001 f910 	bl	8003690 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002470:	f000 ffe6 	bl	8003440 <ssd1306_UpdateScreen>
}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b013      	add	sp, #76	@ 0x4c
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247c:	20000339 	.word	0x20000339
 8002480:	20000180 	.word	0x20000180
 8002484:	41200000 	.word	0x41200000
 8002488:	08006d8c 	.word	0x08006d8c
 800248c:	200001b8 	.word	0x200001b8
 8002490:	41f00000 	.word	0x41f00000
 8002494:	20000184 	.word	0x20000184
 8002498:	42c80000 	.word	0x42c80000
 800249c:	08006d9c 	.word	0x08006d9c
 80024a0:	20000238 	.word	0x20000238
 80024a4:	40a00000 	.word	0x40a00000
 80024a8:	20000188 	.word	0x20000188
 80024ac:	08006db0 	.word	0x08006db0
 80024b0:	200002b8 	.word	0x200002b8
 80024b4:	43160000 	.word	0x43160000
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000338 	.word	0x20000338
 80024c0:	8000001f 	.word	0x8000001f
 80024c4:	08006dc0 	.word	0x08006dc0
 80024c8:	08006dc4 	.word	0x08006dc4
 80024cc:	08006dc8 	.word	0x08006dc8
 80024d0:	08006dcc 	.word	0x08006dcc

080024d4 <Display_Power_Meter>:

/**
  * @brief  Display power meter data (production version)
  */
void Display_Power_Meter(void)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b09f      	sub	sp, #124	@ 0x7c
 80024d8:	af02      	add	r7, sp, #8
    char line1_str[21] = {0};
 80024da:	2334      	movs	r3, #52	@ 0x34
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	2315      	movs	r3, #21
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f003 fef9 	bl	80062dc <memset>
    char line2_str[21] = {0};
 80024ea:	231c      	movs	r3, #28
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	0018      	movs	r0, r3
 80024f0:	2315      	movs	r3, #21
 80024f2:	001a      	movs	r2, r3
 80024f4:	2100      	movs	r1, #0
 80024f6:	f003 fef1 	bl	80062dc <memset>
    char line3_str[21] = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	0018      	movs	r0, r3
 80024fe:	2315      	movs	r3, #21
 8002500:	001a      	movs	r2, r3
 8002502:	2100      	movs	r1, #0
 8002504:	f003 feea 	bl	80062dc <memset>

    // Convert float to integer parts for display
    int v_int = (int)measured_voltage;
 8002508:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <Display_Power_Meter+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c18      	adds	r0, r3, #0
 800250e:	f7fe ff4b 	bl	80013a8 <__aeabi_f2iz>
 8002512:	0003      	movs	r3, r0
 8002514:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int v_frac = (int)((measured_voltage - v_int) * 10.0f);
 8002516:	4b7f      	ldr	r3, [pc, #508]	@ (8002714 <Display_Power_Meter+0x240>)
 8002518:	681c      	ldr	r4, [r3, #0]
 800251a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800251c:	f7fe ff64 	bl	80013e8 <__aeabi_i2f>
 8002520:	1c03      	adds	r3, r0, #0
 8002522:	1c19      	adds	r1, r3, #0
 8002524:	1c20      	adds	r0, r4, #0
 8002526:	f7fe fcdb 	bl	8000ee0 <__aeabi_fsub>
 800252a:	1c03      	adds	r3, r0, #0
 800252c:	497a      	ldr	r1, [pc, #488]	@ (8002718 <Display_Power_Meter+0x244>)
 800252e:	1c18      	adds	r0, r3, #0
 8002530:	f7fe fb7c 	bl	8000c2c <__aeabi_fmul>
 8002534:	1c03      	adds	r3, r0, #0
 8002536:	1c18      	adds	r0, r3, #0
 8002538:	f7fe ff36 	bl	80013a8 <__aeabi_f2iz>
 800253c:	0003      	movs	r3, r0
 800253e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (v_frac < 0) v_frac = -v_frac;
 8002540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002542:	2b00      	cmp	r3, #0
 8002544:	da02      	bge.n	800254c <Display_Power_Meter+0x78>
 8002546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002548:	425b      	negs	r3, r3
 800254a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    int i_int = (int)measured_current;
 800254c:	4b73      	ldr	r3, [pc, #460]	@ (800271c <Display_Power_Meter+0x248>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c18      	adds	r0, r3, #0
 8002552:	f7fe ff29 	bl	80013a8 <__aeabi_f2iz>
 8002556:	0003      	movs	r3, r0
 8002558:	65bb      	str	r3, [r7, #88]	@ 0x58
    int i_frac = (int)((measured_current - i_int) * 100.0f);
 800255a:	4b70      	ldr	r3, [pc, #448]	@ (800271c <Display_Power_Meter+0x248>)
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002560:	f7fe ff42 	bl	80013e8 <__aeabi_i2f>
 8002564:	1c03      	adds	r3, r0, #0
 8002566:	1c19      	adds	r1, r3, #0
 8002568:	1c20      	adds	r0, r4, #0
 800256a:	f7fe fcb9 	bl	8000ee0 <__aeabi_fsub>
 800256e:	1c03      	adds	r3, r0, #0
 8002570:	496b      	ldr	r1, [pc, #428]	@ (8002720 <Display_Power_Meter+0x24c>)
 8002572:	1c18      	adds	r0, r3, #0
 8002574:	f7fe fb5a 	bl	8000c2c <__aeabi_fmul>
 8002578:	1c03      	adds	r3, r0, #0
 800257a:	1c18      	adds	r0, r3, #0
 800257c:	f7fe ff14 	bl	80013a8 <__aeabi_f2iz>
 8002580:	0003      	movs	r3, r0
 8002582:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (i_frac < 0) i_frac = -i_frac;
 8002584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002586:	2b00      	cmp	r3, #0
 8002588:	da02      	bge.n	8002590 <Display_Power_Meter+0xbc>
 800258a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800258c:	425b      	negs	r3, r3
 800258e:	66bb      	str	r3, [r7, #104]	@ 0x68

    int p_int = (int)calculated_power;
 8002590:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <Display_Power_Meter+0x250>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c18      	adds	r0, r3, #0
 8002596:	f7fe ff07 	bl	80013a8 <__aeabi_f2iz>
 800259a:	0003      	movs	r3, r0
 800259c:	657b      	str	r3, [r7, #84]	@ 0x54
    int p_frac = (int)((calculated_power - p_int) * 10.0f);
 800259e:	4b61      	ldr	r3, [pc, #388]	@ (8002724 <Display_Power_Meter+0x250>)
 80025a0:	681c      	ldr	r4, [r3, #0]
 80025a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025a4:	f7fe ff20 	bl	80013e8 <__aeabi_i2f>
 80025a8:	1c03      	adds	r3, r0, #0
 80025aa:	1c19      	adds	r1, r3, #0
 80025ac:	1c20      	adds	r0, r4, #0
 80025ae:	f7fe fc97 	bl	8000ee0 <__aeabi_fsub>
 80025b2:	1c03      	adds	r3, r0, #0
 80025b4:	4958      	ldr	r1, [pc, #352]	@ (8002718 <Display_Power_Meter+0x244>)
 80025b6:	1c18      	adds	r0, r3, #0
 80025b8:	f7fe fb38 	bl	8000c2c <__aeabi_fmul>
 80025bc:	1c03      	adds	r3, r0, #0
 80025be:	1c18      	adds	r0, r3, #0
 80025c0:	f7fe fef2 	bl	80013a8 <__aeabi_f2iz>
 80025c4:	0003      	movs	r3, r0
 80025c6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (p_frac < 0) p_frac = -p_frac;
 80025c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da02      	bge.n	80025d4 <Display_Power_Meter+0x100>
 80025ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025d0:	425b      	negs	r3, r3
 80025d2:	667b      	str	r3, [r7, #100]	@ 0x64

    // Energy handling
    if (accumulated_energy < 1.0f) {
 80025d4:	4b54      	ldr	r3, [pc, #336]	@ (8002728 <Display_Power_Meter+0x254>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	21fe      	movs	r1, #254	@ 0xfe
 80025da:	0589      	lsls	r1, r1, #22
 80025dc:	1c18      	adds	r0, r3, #0
 80025de:	f7fd ff25 	bl	800042c <__aeabi_fcmplt>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d022      	beq.n	800262c <Display_Power_Meter+0x158>
        int e_wh = (int)(accumulated_energy * 1000.0f);
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <Display_Power_Meter+0x254>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4950      	ldr	r1, [pc, #320]	@ (800272c <Display_Power_Meter+0x258>)
 80025ec:	1c18      	adds	r0, r3, #0
 80025ee:	f7fe fb1d 	bl	8000c2c <__aeabi_fmul>
 80025f2:	1c03      	adds	r3, r0, #0
 80025f4:	1c18      	adds	r0, r3, #0
 80025f6:	f7fe fed7 	bl	80013a8 <__aeabi_f2iz>
 80025fa:	0003      	movs	r3, r0
 80025fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        sprintf(line1_str, "V:%d.%dV  I:%d.%02dA", v_int, v_frac, i_int, i_frac);
 80025fe:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8002600:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002602:	494b      	ldr	r1, [pc, #300]	@ (8002730 <Display_Power_Meter+0x25c>)
 8002604:	2334      	movs	r3, #52	@ 0x34
 8002606:	18f8      	adds	r0, r7, r3
 8002608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	0023      	movs	r3, r4
 8002612:	f003 fe2f 	bl	8006274 <siprintf>
        sprintf(line2_str, "P:%d.%dW E:%dmWh", p_int, p_frac, e_wh);
 8002616:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8002618:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800261a:	4946      	ldr	r1, [pc, #280]	@ (8002734 <Display_Power_Meter+0x260>)
 800261c:	231c      	movs	r3, #28
 800261e:	18f8      	adds	r0, r7, r3
 8002620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	0023      	movs	r3, r4
 8002626:	f003 fe25 	bl	8006274 <siprintf>
 800262a:	e039      	b.n	80026a0 <Display_Power_Meter+0x1cc>
    } else {
        int e_int = (int)accumulated_energy;
 800262c:	4b3e      	ldr	r3, [pc, #248]	@ (8002728 <Display_Power_Meter+0x254>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c18      	adds	r0, r3, #0
 8002632:	f7fe feb9 	bl	80013a8 <__aeabi_f2iz>
 8002636:	0003      	movs	r3, r0
 8002638:	653b      	str	r3, [r7, #80]	@ 0x50
        int e_frac = (int)((accumulated_energy - e_int) * 1000.0f);
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <Display_Power_Meter+0x254>)
 800263c:	681c      	ldr	r4, [r3, #0]
 800263e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002640:	f7fe fed2 	bl	80013e8 <__aeabi_i2f>
 8002644:	1c03      	adds	r3, r0, #0
 8002646:	1c19      	adds	r1, r3, #0
 8002648:	1c20      	adds	r0, r4, #0
 800264a:	f7fe fc49 	bl	8000ee0 <__aeabi_fsub>
 800264e:	1c03      	adds	r3, r0, #0
 8002650:	4936      	ldr	r1, [pc, #216]	@ (800272c <Display_Power_Meter+0x258>)
 8002652:	1c18      	adds	r0, r3, #0
 8002654:	f7fe faea 	bl	8000c2c <__aeabi_fmul>
 8002658:	1c03      	adds	r3, r0, #0
 800265a:	1c18      	adds	r0, r3, #0
 800265c:	f7fe fea4 	bl	80013a8 <__aeabi_f2iz>
 8002660:	0003      	movs	r3, r0
 8002662:	663b      	str	r3, [r7, #96]	@ 0x60
        if (e_frac < 0) e_frac = -e_frac;
 8002664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002666:	2b00      	cmp	r3, #0
 8002668:	da02      	bge.n	8002670 <Display_Power_Meter+0x19c>
 800266a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266c:	425b      	negs	r3, r3
 800266e:	663b      	str	r3, [r7, #96]	@ 0x60
        sprintf(line1_str, "V:%d.%dV  I:%d.%02dA", v_int, v_frac, i_int, i_frac);
 8002670:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8002672:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002674:	492e      	ldr	r1, [pc, #184]	@ (8002730 <Display_Power_Meter+0x25c>)
 8002676:	2334      	movs	r3, #52	@ 0x34
 8002678:	18f8      	adds	r0, r7, r3
 800267a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0023      	movs	r3, r4
 8002684:	f003 fdf6 	bl	8006274 <siprintf>
        sprintf(line2_str, "P:%d.%dW E:%d.%03dkWh", p_int, p_frac, e_int, e_frac);
 8002688:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 800268a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800268c:	492a      	ldr	r1, [pc, #168]	@ (8002738 <Display_Power_Meter+0x264>)
 800268e:	231c      	movs	r3, #28
 8002690:	18f8      	adds	r0, r7, r3
 8002692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	0023      	movs	r3, r4
 800269c:	f003 fdea 	bl	8006274 <siprintf>
    }

    sprintf(line3_str, "ROT:%03u BTN:%s", rotary_counter, button_state ? "ON " : "OFF");
 80026a0:	4b26      	ldr	r3, [pc, #152]	@ (800273c <Display_Power_Meter+0x268>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	001a      	movs	r2, r3
 80026a6:	4b26      	ldr	r3, [pc, #152]	@ (8002740 <Display_Power_Meter+0x26c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <Display_Power_Meter+0x1de>
 80026ae:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <Display_Power_Meter+0x270>)
 80026b0:	e000      	b.n	80026b4 <Display_Power_Meter+0x1e0>
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <Display_Power_Meter+0x274>)
 80026b4:	4925      	ldr	r1, [pc, #148]	@ (800274c <Display_Power_Meter+0x278>)
 80026b6:	1d38      	adds	r0, r7, #4
 80026b8:	f003 fddc 	bl	8006274 <siprintf>

    ssd1306_Fill(Black);
 80026bc:	2000      	movs	r0, #0
 80026be:	f000 fe9b 	bl	80033f8 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	2000      	movs	r0, #0
 80026c6:	f001 f80d 	bl	80036e4 <ssd1306_SetCursor>
    ssd1306_WriteString(line1_str, Font_7x10, White);
 80026ca:	4a21      	ldr	r2, [pc, #132]	@ (8002750 <Display_Power_Meter+0x27c>)
 80026cc:	2334      	movs	r3, #52	@ 0x34
 80026ce:	18f8      	adds	r0, r7, r3
 80026d0:	2301      	movs	r3, #1
 80026d2:	6811      	ldr	r1, [r2, #0]
 80026d4:	6852      	ldr	r2, [r2, #4]
 80026d6:	f000 ffdb 	bl	8003690 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 11);
 80026da:	210b      	movs	r1, #11
 80026dc:	2000      	movs	r0, #0
 80026de:	f001 f801 	bl	80036e4 <ssd1306_SetCursor>
    ssd1306_WriteString(line2_str, Font_7x10, White);
 80026e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <Display_Power_Meter+0x27c>)
 80026e4:	231c      	movs	r3, #28
 80026e6:	18f8      	adds	r0, r7, r3
 80026e8:	2301      	movs	r3, #1
 80026ea:	6811      	ldr	r1, [r2, #0]
 80026ec:	6852      	ldr	r2, [r2, #4]
 80026ee:	f000 ffcf 	bl	8003690 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 22);
 80026f2:	2116      	movs	r1, #22
 80026f4:	2000      	movs	r0, #0
 80026f6:	f000 fff5 	bl	80036e4 <ssd1306_SetCursor>
    ssd1306_WriteString(line3_str, Font_6x8, White);
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <Display_Power_Meter+0x280>)
 80026fc:	1d38      	adds	r0, r7, #4
 80026fe:	2301      	movs	r3, #1
 8002700:	6811      	ldr	r1, [r2, #0]
 8002702:	6852      	ldr	r2, [r2, #4]
 8002704:	f000 ffc4 	bl	8003690 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002708:	f000 fe9a 	bl	8003440 <ssd1306_UpdateScreen>
}
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b01d      	add	sp, #116	@ 0x74
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	20000180 	.word	0x20000180
 8002718:	41200000 	.word	0x41200000
 800271c:	20000184 	.word	0x20000184
 8002720:	42c80000 	.word	0x42c80000
 8002724:	20000188 	.word	0x20000188
 8002728:	2000018c 	.word	0x2000018c
 800272c:	447a0000 	.word	0x447a0000
 8002730:	08006dd0 	.word	0x08006dd0
 8002734:	08006de8 	.word	0x08006de8
 8002738:	08006dfc 	.word	0x08006dfc
 800273c:	2000017d 	.word	0x2000017d
 8002740:	2000017e 	.word	0x2000017e
 8002744:	08006e14 	.word	0x08006e14
 8002748:	08006e18 	.word	0x08006e18
 800274c:	08006e1c 	.word	0x08006e1c
 8002750:	20000010 	.word	0x20000010
 8002754:	20000008 	.word	0x20000008

08002758 <Timer_Interrupt_Handler>:
/**
  * @brief  Interrupt handler for TIM6 timer (production version)
  * @note   This function reads real ADC values from voltage/current sensors
  */
void Timer_Interrupt_Handler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
    // Read ADC values from real sensors (production pins)
    uint32_t voltage_adc = Get_ADC_Value(ADC_CHANNEL_3);  // PA3 - Real voltage input
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <Timer_Interrupt_Handler+0x124>)
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f9d1 	bl	8002b08 <Get_ADC_Value>
 8002766:	0003      	movs	r3, r0
 8002768:	617b      	str	r3, [r7, #20]
    uint32_t current_adc = Get_ADC_Value(ADC_CHANNEL_4);  // PA4 - Real current input
 800276a:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <Timer_Interrupt_Handler+0x128>)
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f9cb 	bl	8002b08 <Get_ADC_Value>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]

    // Convert ADC values to real physical quantities
    measured_voltage = Convert_ADC_to_Voltage(voltage_adc);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	0018      	movs	r0, r3
 800277a:	f7fe fee9 	bl	8001550 <Convert_ADC_to_Voltage>
 800277e:	1c02      	adds	r2, r0, #0
 8002780:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <Timer_Interrupt_Handler+0x12c>)
 8002782:	601a      	str	r2, [r3, #0]
    measured_current = Convert_ADC_to_Current(current_adc);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe ff04 	bl	8001594 <Convert_ADC_to_Current>
 800278c:	1c02      	adds	r2, r0, #0
 800278e:	4b3e      	ldr	r3, [pc, #248]	@ (8002888 <Timer_Interrupt_Handler+0x130>)
 8002790:	601a      	str	r2, [r3, #0]
    calculated_power = Calculate_Power(measured_voltage, measured_current);
 8002792:	4b3c      	ldr	r3, [pc, #240]	@ (8002884 <Timer_Interrupt_Handler+0x12c>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b3c      	ldr	r3, [pc, #240]	@ (8002888 <Timer_Interrupt_Handler+0x130>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1c19      	adds	r1, r3, #0
 800279c:	1c10      	adds	r0, r2, #0
 800279e:	f7fe ff1b 	bl	80015d8 <Calculate_Power>
 80027a2:	1c02      	adds	r2, r0, #0
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <Timer_Interrupt_Handler+0x134>)
 80027a6:	601a      	str	r2, [r3, #0]

    // Calculate time delta for energy integration
    uint32_t current_timestamp = HAL_GetTick();
 80027a8:	f001 f90a 	bl	80039c0 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	60fb      	str	r3, [r7, #12]
    uint32_t delta_time = current_timestamp - last_timestamp;
 80027b0:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <Timer_Interrupt_Handler+0x138>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	60bb      	str	r3, [r7, #8]
    last_timestamp = current_timestamp;
 80027ba:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <Timer_Interrupt_Handler+0x138>)
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

    // Update accumulated energy
    if (delta_time > 0 && delta_time < 1000) {
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <Timer_Interrupt_Handler+0x86>
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	23fa      	movs	r3, #250	@ 0xfa
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d206      	bcs.n	80027de <Timer_Interrupt_Handler+0x86>
        Update_Energy(calculated_power, delta_time);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <Timer_Interrupt_Handler+0x134>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	0011      	movs	r1, r2
 80027d8:	1c18      	adds	r0, r3, #0
 80027da:	f7fe ff0b 	bl	80015f4 <Update_Energy>
    }

    // Update peak values
    Update_Peaks(measured_voltage, measured_current, calculated_power);
 80027de:	4b29      	ldr	r3, [pc, #164]	@ (8002884 <Timer_Interrupt_Handler+0x12c>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <Timer_Interrupt_Handler+0x130>)
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <Timer_Interrupt_Handler+0x134>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	1c1a      	adds	r2, r3, #0
 80027ec:	f7fe ff2a 	bl	8001644 <Update_Peaks>

    // Update graphics data buffer
    Update_Graphics_Data();
 80027f0:	f7ff fc26 	bl	8002040 <Update_Graphics_Data>

    // Button long press detection
    if (button_state && !button_long_press_handled) {
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <Timer_Interrupt_Handler+0x13c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <Timer_Interrupt_Handler+0xcc>
 80027fc:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <Timer_Interrupt_Handler+0x140>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <Timer_Interrupt_Handler+0xcc>
        uint32_t press_duration = current_timestamp - button_press_time;
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <Timer_Interrupt_Handler+0x144>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	607b      	str	r3, [r7, #4]
        if (press_duration >= 2000) {
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	23fa      	movs	r3, #250	@ 0xfa
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	429a      	cmp	r2, r3
 8002816:	d305      	bcc.n	8002824 <Timer_Interrupt_Handler+0xcc>
            Handle_Menu_Action(1);
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff f811 	bl	8001840 <Handle_Menu_Action>
            button_long_press_handled = 1;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <Timer_Interrupt_Handler+0x140>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
        }
    }

    // Auto-return to power meter
    if (current_menu != MENU_POWER_METER &&
 8002824:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <Timer_Interrupt_Handler+0x148>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00f      	beq.n	800284c <Timer_Interrupt_Handler+0xf4>
        (current_timestamp - last_activity_time) > MENU_TIMEOUT_MS) {
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <Timer_Interrupt_Handler+0x14c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
    if (current_menu != MENU_POWER_METER &&
 8002834:	4a1c      	ldr	r2, [pc, #112]	@ (80028a8 <Timer_Interrupt_Handler+0x150>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d908      	bls.n	800284c <Timer_Interrupt_Handler+0xf4>
        current_menu = MENU_POWER_METER;
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <Timer_Interrupt_Handler+0x148>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
        menu_selection = 0;
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <Timer_Interrupt_Handler+0x154>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
        menu_changed = 1;
 8002846:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <Timer_Interrupt_Handler+0x158>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    }

    // Update display
    if (menu_changed) {
 800284c:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <Timer_Interrupt_Handler+0x158>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <Timer_Interrupt_Handler+0x108>
        Display_Current_Menu();
 8002854:	f7ff f8dc 	bl	8001a10 <Display_Current_Menu>
        menu_changed = 0;
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <Timer_Interrupt_Handler+0x158>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
    }
    else if (current_menu == MENU_POWER_METER || current_menu == MENU_GRAPHICS) {
        Display_Current_Menu();
    }
}
 800285e:	e009      	b.n	8002874 <Timer_Interrupt_Handler+0x11c>
    else if (current_menu == MENU_POWER_METER || current_menu == MENU_GRAPHICS) {
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <Timer_Interrupt_Handler+0x148>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <Timer_Interrupt_Handler+0x118>
 8002868:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <Timer_Interrupt_Handler+0x148>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d101      	bne.n	8002874 <Timer_Interrupt_Handler+0x11c>
        Display_Current_Menu();
 8002870:	f7ff f8ce 	bl	8001a10 <Display_Current_Menu>
}
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b006      	add	sp, #24
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0c000008 	.word	0x0c000008
 8002880:	10000010 	.word	0x10000010
 8002884:	20000180 	.word	0x20000180
 8002888:	20000184 	.word	0x20000184
 800288c:	20000188 	.word	0x20000188
 8002890:	20000190 	.word	0x20000190
 8002894:	2000017e 	.word	0x2000017e
 8002898:	200001a4 	.word	0x200001a4
 800289c:	200001a0 	.word	0x200001a0
 80028a0:	200001ad 	.word	0x200001ad
 80028a4:	200001b0 	.word	0x200001b0
 80028a8:	00007530 	.word	0x00007530
 80028ac:	200001ae 	.word	0x200001ae
 80028b0:	20000000 	.word	0x20000000

080028b4 <User_Button_Interrupt_Handler>:
/**
  * @brief  Interrupt handler for User Button GPIO (production version)
  * @note   Button pin might need to be changed due to PA4 conflict with ADC
  */
void User_Button_Interrupt_Handler(void)
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80028ba:	f001 f881 	bl	80039c0 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	60fb      	str	r3, [r7, #12]
    uint8_t raw_button_state = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 80028c2:	250b      	movs	r5, #11
 80028c4:	197c      	adds	r4, r7, r5
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <User_Button_Interrupt_Handler+0xb0>)
 80028c8:	2108      	movs	r1, #8
 80028ca:	0018      	movs	r0, r3
 80028cc:	f001 fe78 	bl	80045c0 <HAL_GPIO_ReadPin>
 80028d0:	0003      	movs	r3, r0
 80028d2:	7023      	strb	r3, [r4, #0]

    // Software debouncing
    if ((current_time - button_last_interrupt_time) < 20) {
 80028d4:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <User_Button_Interrupt_Handler+0xb4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b13      	cmp	r3, #19
 80028de:	d93b      	bls.n	8002958 <User_Button_Interrupt_Handler+0xa4>
        return;
    }
    button_last_interrupt_time = current_time;
 80028e0:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <User_Button_Interrupt_Handler+0xb4>)
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

    if (raw_button_state == button_stable_state) {
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <User_Button_Interrupt_Handler+0xb8>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	197a      	adds	r2, r7, r5
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d034      	beq.n	800295c <User_Button_Interrupt_Handler+0xa8>
        return;
    }

    button_stable_state = raw_button_state;
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <User_Button_Interrupt_Handler+0xb8>)
 80028f4:	197a      	adds	r2, r7, r5
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]

    if (button_stable_state && !button_state) {
 80028fa:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <User_Button_Interrupt_Handler+0xb8>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <User_Button_Interrupt_Handler+0x6a>
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <User_Button_Interrupt_Handler+0xbc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <User_Button_Interrupt_Handler+0x6a>
        // Button pressed
        button_press_time = current_time;
 800290a:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <User_Button_Interrupt_Handler+0xc0>)
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]
        button_long_press_handled = 0;
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <User_Button_Interrupt_Handler+0xc4>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
        button_state = 1;
 8002916:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <User_Button_Interrupt_Handler+0xbc>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e01f      	b.n	800295e <User_Button_Interrupt_Handler+0xaa>
    }
    else if (!button_stable_state && button_state) {
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <User_Button_Interrupt_Handler+0xb8>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11b      	bne.n	800295e <User_Button_Interrupt_Handler+0xaa>
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <User_Button_Interrupt_Handler+0xbc>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <User_Button_Interrupt_Handler+0xaa>
        // Button released
        uint32_t press_duration = current_time - button_press_time;
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <User_Button_Interrupt_Handler+0xc0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	607b      	str	r3, [r7, #4]

        if (!button_long_press_handled && press_duration < 2000) {
 8002938:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <User_Button_Interrupt_Handler+0xc4>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <User_Button_Interrupt_Handler+0x9c>
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	23fa      	movs	r3, #250	@ 0xfa
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	429a      	cmp	r2, r3
 8002948:	d202      	bcs.n	8002950 <User_Button_Interrupt_Handler+0x9c>
            Handle_Menu_Action(0);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe ff78 	bl	8001840 <Handle_Menu_Action>
        }
        button_state = 0;
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <User_Button_Interrupt_Handler+0xbc>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e002      	b.n	800295e <User_Button_Interrupt_Handler+0xaa>
        return;
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	e000      	b.n	800295e <User_Button_Interrupt_Handler+0xaa>
        return;
 800295c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bdb0      	pop	{r4, r5, r7, pc}
 8002964:	50000400 	.word	0x50000400
 8002968:	200001a8 	.word	0x200001a8
 800296c:	200001ac 	.word	0x200001ac
 8002970:	2000017e 	.word	0x2000017e
 8002974:	200001a0 	.word	0x200001a0
 8002978:	200001a4 	.word	0x200001a4

0800297c <Rotary_Encoder_Interrupt_Handler>:

/**
  * @brief  Interrupt handler for Rotary Encoder (same as test version)
  */
void Rotary_Encoder_Interrupt_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
    static int8_t rotary_buffer = 0;
    uint32_t current_time = HAL_GetTick();
 8002982:	f001 f81d 	bl	80039c0 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	60bb      	str	r3, [r7, #8]

    if ((current_time - rotary_last_interrupt_time) < 5) {
 800298a:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <Rotary_Encoder_Interrupt_Handler+0x178>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b04      	cmp	r3, #4
 8002994:	d800      	bhi.n	8002998 <Rotary_Encoder_Interrupt_Handler+0x1c>
 8002996:	e0a9      	b.n	8002aec <Rotary_Encoder_Interrupt_Handler+0x170>
        return;
    }
    rotary_last_interrupt_time = current_time;
 8002998:	4b56      	ldr	r3, [pc, #344]	@ (8002af4 <Rotary_Encoder_Interrupt_Handler+0x178>)
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	601a      	str	r2, [r3, #0]

    uint8_t rotary_new = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 800299e:	4b56      	ldr	r3, [pc, #344]	@ (8002af8 <Rotary_Encoder_Interrupt_Handler+0x17c>)
 80029a0:	2120      	movs	r1, #32
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 fe0c 	bl	80045c0 <HAL_GPIO_ReadPin>
 80029a8:	0003      	movs	r3, r0
 80029aa:	1dfa      	adds	r2, r7, #7
 80029ac:	18db      	adds	r3, r3, r3
 80029ae:	7013      	strb	r3, [r2, #0]
    rotary_new += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 80029b0:	4b51      	ldr	r3, [pc, #324]	@ (8002af8 <Rotary_Encoder_Interrupt_Handler+0x17c>)
 80029b2:	2110      	movs	r1, #16
 80029b4:	0018      	movs	r0, r3
 80029b6:	f001 fe03 	bl	80045c0 <HAL_GPIO_ReadPin>
 80029ba:	0003      	movs	r3, r0
 80029bc:	0019      	movs	r1, r3
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	1dfa      	adds	r2, r7, #7
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	188a      	adds	r2, r1, r2
 80029c6:	701a      	strb	r2, [r3, #0]

    if (rotary_new != rotary_state) {
 80029c8:	4b4c      	ldr	r3, [pc, #304]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	1dfa      	adds	r2, r7, #7
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d100      	bne.n	80029d6 <Rotary_Encoder_Interrupt_Handler+0x5a>
 80029d4:	e08b      	b.n	8002aee <Rotary_Encoder_Interrupt_Handler+0x172>
        int8_t direction = 0;
 80029d6:	230f      	movs	r3, #15
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

        // Clockwise transitions
        if (((rotary_state == 0b00) && (rotary_new == 0b10)) ||
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <Rotary_Encoder_Interrupt_Handler+0x72>
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d017      	beq.n	8002a1e <Rotary_Encoder_Interrupt_Handler+0xa2>
            ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 80029ee:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
        if (((rotary_state == 0b00) && (rotary_new == 0b10)) ||
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d103      	bne.n	80029fe <Rotary_Encoder_Interrupt_Handler+0x82>
            ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d00f      	beq.n	8002a1e <Rotary_Encoder_Interrupt_Handler+0xa2>
            ((rotary_state == 0b11) && (rotary_new == 0b01)) ||
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
            ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d103      	bne.n	8002a0e <Rotary_Encoder_Interrupt_Handler+0x92>
            ((rotary_state == 0b11) && (rotary_new == 0b01)) ||
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d007      	beq.n	8002a1e <Rotary_Encoder_Interrupt_Handler+0xa2>
            ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
            ((rotary_state == 0b11) && (rotary_new == 0b01)) ||
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10c      	bne.n	8002a30 <Rotary_Encoder_Interrupt_Handler+0xb4>
            ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <Rotary_Encoder_Interrupt_Handler+0xb4>
            rotary_buffer++;
 8002a1e:	4b38      	ldr	r3, [pc, #224]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b25b      	sxtb	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	b25a      	sxtb	r2, r3
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002a2e:	701a      	strb	r2, [r3, #0]
        }

        // Counter-clockwise transitions
        if (((rotary_state == 0b00) && (rotary_new == 0b01)) ||
 8002a30:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <Rotary_Encoder_Interrupt_Handler+0xc4>
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d017      	beq.n	8002a70 <Rotary_Encoder_Interrupt_Handler+0xf4>
            ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8002a40:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
        if (((rotary_state == 0b00) && (rotary_new == 0b01)) ||
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d103      	bne.n	8002a50 <Rotary_Encoder_Interrupt_Handler+0xd4>
            ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d00f      	beq.n	8002a70 <Rotary_Encoder_Interrupt_Handler+0xf4>
            ((rotary_state == 0b11) && (rotary_new == 0b10)) ||
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
            ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d103      	bne.n	8002a60 <Rotary_Encoder_Interrupt_Handler+0xe4>
            ((rotary_state == 0b11) && (rotary_new == 0b10)) ||
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d007      	beq.n	8002a70 <Rotary_Encoder_Interrupt_Handler+0xf4>
            ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 8002a60:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
            ((rotary_state == 0b11) && (rotary_new == 0b10)) ||
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d10c      	bne.n	8002a82 <Rotary_Encoder_Interrupt_Handler+0x106>
            ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <Rotary_Encoder_Interrupt_Handler+0x106>
            rotary_buffer--;
 8002a70:	4b23      	ldr	r3, [pc, #140]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	b25a      	sxtb	r2, r3
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002a80:	701a      	strb	r2, [r3, #0]
        }

        rotary_state = rotary_new;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <Rotary_Encoder_Interrupt_Handler+0x180>)
 8002a84:	1dfa      	adds	r2, r7, #7
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]

        if (rotary_buffer > 3) {
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	dd0c      	ble.n	8002aae <Rotary_Encoder_Interrupt_Handler+0x132>
            rotary_counter++;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8002a9e:	701a      	strb	r2, [r3, #0]
            rotary_buffer = 0;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
            direction = 1;
 8002aa6:	230f      	movs	r3, #15
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
        }
        if (rotary_buffer < -3) {
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	da0c      	bge.n	8002ad2 <Rotary_Encoder_Interrupt_Handler+0x156>
            rotary_counter--;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8002ac2:	701a      	strb	r2, [r3, #0]
            rotary_buffer = 0;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
            direction = -1;
 8002aca:	230f      	movs	r3, #15
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	22ff      	movs	r2, #255	@ 0xff
 8002ad0:	701a      	strb	r2, [r3, #0]
        }

        if (direction != 0) {
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	18bb      	adds	r3, r7, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <Rotary_Encoder_Interrupt_Handler+0x172>
            Handle_Menu_Navigation(direction);
 8002ade:	18bb      	adds	r3, r7, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fe fdfd 	bl	80016e4 <Handle_Menu_Navigation>
 8002aea:	e000      	b.n	8002aee <Rotary_Encoder_Interrupt_Handler+0x172>
        return;
 8002aec:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200001b4 	.word	0x200001b4
 8002af8:	50000400 	.word	0x50000400
 8002afc:	2000017c 	.word	0x2000017c
 8002b00:	20000340 	.word	0x20000340
 8002b04:	2000017d 	.word	0x2000017d

08002b08 <Get_ADC_Value>:
  * @brief  Get ADC value from specified channel (production version)
  * @param  adc_channel Channel macro (ADC_CHANNEL_3 or ADC_CHANNEL_4)
  * @retval Channel converted value
  */
uint32_t Get_ADC_Value(uint32_t adc_channel)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    hadc.Instance->CHSELR = 0;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <Get_ADC_Value+0x78>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
    ADC_ChannelConfTypeDef sConfig = {0};
 8002b18:	2408      	movs	r4, #8
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	2308      	movs	r3, #8
 8002b20:	001a      	movs	r2, r3
 8002b22:	2100      	movs	r1, #0
 8002b24:	f003 fbda 	bl	80062dc <memset>
    sConfig.Channel = adc_channel;
 8002b28:	0021      	movs	r1, r4
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2280      	movs	r2, #128	@ 0x80
 8002b34:	0152      	lsls	r2, r2, #5
 8002b36:	605a      	str	r2, [r3, #4]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b38:	187a      	adds	r2, r7, r1
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <Get_ADC_Value+0x78>)
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 f9dc 	bl	8003efc <HAL_ADC_ConfigChannel>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <Get_ADC_Value+0x44>
    {
        Error_Handler();
 8002b48:	f000 fa7e 	bl	8003048 <Error_Handler>
    }
    if (HAL_ADC_Start(&hadc) != HAL_OK)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <Get_ADC_Value+0x78>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 f8d8 	bl	8003d04 <HAL_ADC_Start>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <Get_ADC_Value+0x54>
    {
        Error_Handler();
 8002b58:	f000 fa76 	bl	8003048 <Error_Handler>
    }
    if (HAL_ADC_PollForConversion(&hadc, 100) != HAL_OK)
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <Get_ADC_Value+0x78>)
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 f923 	bl	8003dac <HAL_ADC_PollForConversion>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <Get_ADC_Value+0x66>
    {
        Error_Handler();
 8002b6a:	f000 fa6d 	bl	8003048 <Error_Handler>
    }
    return HAL_ADC_GetValue(&hadc);
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <Get_ADC_Value+0x78>)
 8002b70:	0018      	movs	r0, r3
 8002b72:	f001 f9b7 	bl	8003ee4 <HAL_ADC_GetValue>
 8002b76:	0003      	movs	r3, r0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b005      	add	sp, #20
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	2000008c 	.word	0x2000008c

08002b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b88:	f000 feb4 	bl	80038f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b8c:	f000 f884 	bl	8002c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b90:	f000 f9e4 	bl	8002f5c <MX_GPIO_Init>
  MX_ADC_Init();
 8002b94:	f000 f8f2 	bl	8002d7c <MX_ADC_Init>
  MX_I2C1_Init();
 8002b98:	f000 f964 	bl	8002e64 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002b9c:	f000 f9a2 	bl	8002ee4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Initialize OLED display
  ssd1306_Init();
 8002ba0:	f000 fbbe 	bl	8003320 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 fc27 	bl	80033f8 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8002baa:	2100      	movs	r1, #0
 8002bac:	2000      	movs	r0, #0
 8002bae:	f000 fd99 	bl	80036e4 <ssd1306_SetCursor>
  ssd1306_WriteString("Power Meter v1.0", Font_7x10, White);
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c64 <main+0xe0>)
 8002bb4:	482c      	ldr	r0, [pc, #176]	@ (8002c68 <main+0xe4>)
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	6811      	ldr	r1, [r2, #0]
 8002bba:	6852      	ldr	r2, [r2, #4]
 8002bbc:	f000 fd68 	bl	8003690 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 11);
 8002bc0:	210b      	movs	r1, #11
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f000 fd8e 	bl	80036e4 <ssd1306_SetCursor>
  ssd1306_WriteString("Production Ready", Font_7x10, White);
 8002bc8:	4a26      	ldr	r2, [pc, #152]	@ (8002c64 <main+0xe0>)
 8002bca:	4828      	ldr	r0, [pc, #160]	@ (8002c6c <main+0xe8>)
 8002bcc:	2301      	movs	r3, #1
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	6852      	ldr	r2, [r2, #4]
 8002bd2:	f000 fd5d 	bl	8003690 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 22);
 8002bd6:	2116      	movs	r1, #22
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 fd83 	bl	80036e4 <ssd1306_SetCursor>
  ssd1306_WriteString("STM32L052K6", Font_6x8, White);
 8002bde:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <main+0xec>)
 8002be0:	4824      	ldr	r0, [pc, #144]	@ (8002c74 <main+0xf0>)
 8002be2:	2301      	movs	r3, #1
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	f000 fd52 	bl	8003690 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002bec:	f000 fc28 	bl	8003440 <ssd1306_UpdateScreen>

  // Initialize power meter variables
  last_timestamp = HAL_GetTick();
 8002bf0:	f000 fee6 	bl	80039c0 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <main+0xf4>)
 8002bf8:	601a      	str	r2, [r3, #0]
  last_activity_time = HAL_GetTick();
 8002bfa:	f000 fee1 	bl	80039c0 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <main+0xf8>)
 8002c02:	601a      	str	r2, [r3, #0]
  Reset_Energy();
 8002c04:	f7fe fd64 	bl	80016d0 <Reset_Energy>
  Reset_Peaks();
 8002c08:	f7fe fd4e 	bl	80016a8 <Reset_Peaks>

  // Initialize menu system
  current_menu = MENU_POWER_METER;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <main+0xfc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
  menu_selection = 0;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <main+0x100>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
  menu_changed = 1;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <main+0x104>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]

  // Start timer for periodic measurements
  HAL_TIM_Base_Start_IT(&htim6);
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <main+0x108>)
 8002c20:	0018      	movs	r0, r3
 8002c22:	f003 f935 	bl	8005e90 <HAL_TIM_Base_Start_IT>

  // Brief startup delay
  HAL_Delay(1000);
 8002c26:	23fa      	movs	r3, #250	@ 0xfa
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 fed2 	bl	80039d4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rotary_state = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <main+0x10c>)
 8002c32:	2120      	movs	r1, #32
 8002c34:	0018      	movs	r0, r3
 8002c36:	f001 fcc3 	bl	80045c0 <HAL_GPIO_ReadPin>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	18db      	adds	r3, r3, r3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <main+0x110>)
 8002c42:	701a      	strb	r2, [r3, #0]
  rotary_state += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 8002c44:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <main+0x10c>)
 8002c46:	2110      	movs	r1, #16
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fcb9 	bl	80045c0 <HAL_GPIO_ReadPin>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	001a      	movs	r2, r3
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <main+0x110>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <main+0x110>)
 8002c5c:	701a      	strb	r2, [r3, #0]
  while (1)
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	e7fd      	b.n	8002c5e <main+0xda>
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	20000010 	.word	0x20000010
 8002c68:	08006ca4 	.word	0x08006ca4
 8002c6c:	08006e2c 	.word	0x08006e2c
 8002c70:	20000008 	.word	0x20000008
 8002c74:	08006cb8 	.word	0x08006cb8
 8002c78:	20000190 	.word	0x20000190
 8002c7c:	200001b0 	.word	0x200001b0
 8002c80:	200001ad 	.word	0x200001ad
 8002c84:	200001ae 	.word	0x200001ae
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	2000013c 	.word	0x2000013c
 8002c90:	50000400 	.word	0x50000400
 8002c94:	2000017c 	.word	0x2000017c

08002c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b09d      	sub	sp, #116	@ 0x74
 8002c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9e:	2438      	movs	r4, #56	@ 0x38
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	2338      	movs	r3, #56	@ 0x38
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f003 fb17 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cae:	2324      	movs	r3, #36	@ 0x24
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2314      	movs	r3, #20
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f003 fb0f 	bl	80062dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f003 fb08 	bl	80062dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ccc:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <SystemClock_Config+0xdc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <SystemClock_Config+0xe0>)
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <SystemClock_Config+0xdc>)
 8002cd6:	2180      	movs	r1, #128	@ 0x80
 8002cd8:	0109      	lsls	r1, r1, #4
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cde:	0021      	movs	r1, r4
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2201      	movs	r2, #1
 8002cea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2210      	movs	r2, #16
 8002cf0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	02d2      	lsls	r2, r2, #11
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	03d2      	lsls	r2, r2, #15
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	0018      	movs	r0, r3
 8002d12:	f002 f99f 	bl	8005054 <HAL_RCC_OscConfig>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002d1a:	f000 f995 	bl	8003048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1e:	2124      	movs	r1, #36	@ 0x24
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	220f      	movs	r2, #15
 8002d24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2101      	movs	r1, #1
 8002d42:	0018      	movs	r0, r3
 8002d44:	f002 fd4a 	bl	80057dc <HAL_RCC_ClockConfig>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d001      	beq.n	8002d50 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002d4c:	f000 f97c 	bl	8003048 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2208      	movs	r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f002 ff0a 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d001      	beq.n	8002d6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002d68:	f000 f96e 	bl	8003048 <Error_Handler>
  }
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b01d      	add	sp, #116	@ 0x74
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	40007000 	.word	0x40007000
 8002d78:	ffffe7ff 	.word	0xffffe7ff

08002d7c <MX_ADC_Init>:
  * @brief ADC Initialization Function (Production - Channels 3&4)
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d82:	003b      	movs	r3, r7
 8002d84:	0018      	movs	r0, r3
 8002d86:	2308      	movs	r3, #8
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f003 faa6 	bl	80062dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002d90:	4b30      	ldr	r3, [pc, #192]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002d92:	4a31      	ldr	r2, [pc, #196]	@ (8002e58 <MX_ADC_Init+0xdc>)
 8002d94:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002d96:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	05d2      	lsls	r2, r2, #23
 8002da2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002da4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002db0:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002db6:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002dbc:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dc6:	2221      	movs	r2, #33	@ 0x21
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dd4:	22c2      	movs	r2, #194	@ 0xc2
 8002dd6:	32ff      	adds	r2, #255	@ 0xff
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002ddc:	222c      	movs	r2, #44	@ 0x2c
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002de4:	2204      	movs	r2, #4
 8002de6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002dee:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fe0a 	bl	8003a1c <HAL_ADC_Init>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002e0c:	f000 f91c 	bl	8003048 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;  // PA3 - Voltage Input
 8002e10:	003b      	movs	r3, r7
 8002e12:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <MX_ADC_Init+0xe0>)
 8002e14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e16:	003b      	movs	r3, r7
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	0152      	lsls	r2, r2, #5
 8002e1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e1e:	003a      	movs	r2, r7
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f001 f869 	bl	8003efc <HAL_ADC_ConfigChannel>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002e2e:	f000 f90b 	bl	8003048 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;  // PA4 - Current Input (NOTE: Pin conflict with button!)
 8002e32:	003b      	movs	r3, r7
 8002e34:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <MX_ADC_Init+0xe4>)
 8002e36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e38:	003a      	movs	r2, r7
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_ADC_Init+0xd8>)
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f001 f85c 	bl	8003efc <HAL_ADC_ConfigChannel>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002e48:	f000 f8fe 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000008c 	.word	0x2000008c
 8002e58:	40012400 	.word	0x40012400
 8002e5c:	0c000008 	.word	0x0c000008
 8002e60:	10000010 	.word	0x10000010

08002e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function (Same as test version)
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002edc <MX_I2C1_Init+0x78>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <MX_I2C1_Init+0x7c>)
 8002e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e74:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e80:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e86:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 fbd1 	bl	8004648 <HAL_I2C_Init>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002eaa:	f000 f8cd 	bl	8003048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f002 f836 	bl	8004f24 <HAL_I2CEx_ConfigAnalogFilter>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ebc:	f000 f8c4 	bl	8003048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <MX_I2C1_Init+0x74>)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f002 f879 	bl	8004fbc <HAL_I2CEx_ConfigDigitalFilter>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ece:	f000 f8bb 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200000e8 	.word	0x200000e8
 8002edc:	40005400 	.word	0x40005400
 8002ee0:	0060112f 	.word	0x0060112f

08002ee4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function (Same as test version)
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eea:	003b      	movs	r3, r7
 8002eec:	0018      	movs	r0, r3
 8002eee:	2308      	movs	r3, #8
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f003 f9f2 	bl	80062dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ef8:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002efa:	4a16      	ldr	r2, [pc, #88]	@ (8002f54 <MX_TIM6_Init+0x70>)
 8002efc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2096;
 8002efe:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f00:	2283      	movs	r2, #131	@ 0x83
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <MX_TIM6_Init+0x74>)
 8002f10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f18:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f002 ff78 	bl	8005e10 <HAL_TIM_Base_Init>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002f24:	f000 f890 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	003b      	movs	r3, r7
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2e:	003b      	movs	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f34:	003a      	movs	r2, r7
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <MX_TIM6_Init+0x6c>)
 8002f38:	0011      	movs	r1, r2
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f003 f942 	bl	80061c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002f44:	f000 f880 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000013c 	.word	0x2000013c
 8002f54:	40001000 	.word	0x40001000
 8002f58:	000003e7 	.word	0x000003e7

08002f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function (Production pin mapping)
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f62:	240c      	movs	r4, #12
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	0018      	movs	r0, r3
 8002f68:	2314      	movs	r3, #20
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f003 f9b5 	bl	80062dc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f72:	4b33      	ldr	r3, [pc, #204]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f76:	4b32      	ldr	r3, [pc, #200]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f7e:	4b30      	ldr	r3, [pc, #192]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	2201      	movs	r2, #1
 8002f84:	4013      	ands	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f90:	2102      	movs	r1, #2
 8002f92:	430a      	orrs	r2, r1
 8002f94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f96:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <MX_GPIO_Init+0xe4>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USER_BUTTON_Pin (PB3) */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	22c4      	movs	r2, #196	@ 0xc4
 8002fac:	0392      	lsls	r2, r2, #14
 8002fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <MX_GPIO_Init+0xe8>)
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f001 f989 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT_CHA_Pin (PA0) */
  GPIO_InitStruct.Pin = ROT_CHA_Pin;
 8002fc2:	0021      	movs	r1, r4
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	22c4      	movs	r2, #196	@ 0xc4
 8002fce:	0392      	lsls	r2, r2, #14
 8002fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ROT_CHA_GPIO_Port, &GPIO_InitStruct);
 8002fd8:	000c      	movs	r4, r1
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <MX_GPIO_Init+0xe8>)
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	f001 f977 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT_CHB_Pin (PA1) */
  GPIO_InitStruct.Pin = ROT_CHB_Pin;
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2210      	movs	r2, #16
 8002fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2288      	movs	r2, #136	@ 0x88
 8002ff2:	0352      	lsls	r2, r2, #13
 8002ff4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ROT_CHB_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <MX_GPIO_Init+0xe8>)
 8003000:	0019      	movs	r1, r3
 8003002:	0010      	movs	r0, r2
 8003004:	f001 f966 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2101      	movs	r1, #1
 800300c:	2005      	movs	r0, #5
 800300e:	f001 f92f 	bl	8004270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003012:	2005      	movs	r0, #5
 8003014:	f001 f941 	bl	800429a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2102      	movs	r1, #2
 800301c:	2006      	movs	r0, #6
 800301e:	f001 f927 	bl	8004270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003022:	2006      	movs	r0, #6
 8003024:	f001 f939 	bl	800429a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2102      	movs	r1, #2
 800302c:	2007      	movs	r0, #7
 800302e:	f001 f91f 	bl	8004270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003032:	2007      	movs	r0, #7
 8003034:	f001 f931 	bl	800429a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003038:	46c0      	nop			@ (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b009      	add	sp, #36	@ 0x24
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	50000400 	.word	0x50000400

08003048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	e7fd      	b.n	8003050 <Error_Handler+0x8>

08003054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_MspInit+0x24>)
 800305a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_MspInit+0x24>)
 800305e:	2101      	movs	r1, #1
 8003060:	430a      	orrs	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_MspInit+0x24>)
 8003066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_MspInit+0x24>)
 800306a:	2180      	movs	r1, #128	@ 0x80
 800306c:	0549      	lsls	r1, r1, #21
 800306e:	430a      	orrs	r2, r1
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	240c      	movs	r4, #12
 8003086:	193b      	adds	r3, r7, r4
 8003088:	0018      	movs	r0, r3
 800308a:	2314      	movs	r3, #20
 800308c:	001a      	movs	r2, r3
 800308e:	2100      	movs	r1, #0
 8003090:	f003 f924 	bl	80062dc <memset>
  if(hadc->Instance==ADC1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <HAL_ADC_MspInit+0x70>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d122      	bne.n	80030e4 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800309e:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <HAL_ADC_MspInit+0x74>)
 80030a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a2:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <HAL_ADC_MspInit+0x74>)
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	0089      	lsls	r1, r1, #2
 80030a8:	430a      	orrs	r2, r1
 80030aa:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <HAL_ADC_MspInit+0x74>)
 80030ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <HAL_ADC_MspInit+0x74>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	430a      	orrs	r2, r1
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030b8:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <HAL_ADC_MspInit+0x74>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|VOLTAGE_IN_Pin;
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2218      	movs	r2, #24
 80030c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2203      	movs	r2, #3
 80030ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	193a      	adds	r2, r7, r4
 80030d8:	23a0      	movs	r3, #160	@ 0xa0
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f001 f8f8 	bl	80042d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b009      	add	sp, #36	@ 0x24
 80030ea:	bd90      	pop	{r4, r7, pc}
 80030ec:	40012400 	.word	0x40012400
 80030f0:	40021000 	.word	0x40021000

080030f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	240c      	movs	r4, #12
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	0018      	movs	r0, r3
 8003102:	2314      	movs	r3, #20
 8003104:	001a      	movs	r2, r3
 8003106:	2100      	movs	r1, #0
 8003108:	f003 f8e8 	bl	80062dc <memset>
  if(hi2c->Instance==I2C1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <HAL_I2C_MspInit+0x7c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d128      	bne.n	8003168 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <HAL_I2C_MspInit+0x80>)
 8003118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <HAL_I2C_MspInit+0x80>)
 800311c:	2102      	movs	r1, #2
 800311e:	430a      	orrs	r2, r1
 8003120:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003122:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <HAL_I2C_MspInit+0x80>)
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312e:	0021      	movs	r1, r4
 8003130:	187b      	adds	r3, r7, r1
 8003132:	22c0      	movs	r2, #192	@ 0xc0
 8003134:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2212      	movs	r2, #18
 800313a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2203      	movs	r2, #3
 8003146:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003148:	187b      	adds	r3, r7, r1
 800314a:	2201      	movs	r2, #1
 800314c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	187b      	adds	r3, r7, r1
 8003150:	4a09      	ldr	r2, [pc, #36]	@ (8003178 <HAL_I2C_MspInit+0x84>)
 8003152:	0019      	movs	r1, r3
 8003154:	0010      	movs	r0, r2
 8003156:	f001 f8bd 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_I2C_MspInit+0x80>)
 800315c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_I2C_MspInit+0x80>)
 8003160:	2180      	movs	r1, #128	@ 0x80
 8003162:	0389      	lsls	r1, r1, #14
 8003164:	430a      	orrs	r2, r1
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b009      	add	sp, #36	@ 0x24
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	40005400 	.word	0x40005400
 8003174:	40021000 	.word	0x40021000
 8003178:	50000400 	.word	0x50000400

0800317c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_TIM_Base_MspInit+0x38>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10d      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003194:	2110      	movs	r1, #16
 8003196:	430a      	orrs	r2, r1
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2103      	movs	r1, #3
 800319e:	2011      	movs	r0, #17
 80031a0:	f001 f866 	bl	8004270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031a4:	2011      	movs	r0, #17
 80031a6:	f001 f878 	bl	800429a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b002      	add	sp, #8
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	40001000 	.word	0x40001000
 80031b8:	40021000 	.word	0x40021000

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c0:	46c0      	nop			@ (mov r8, r8)
 80031c2:	e7fd      	b.n	80031c0 <NMI_Handler+0x4>

080031c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	e7fd      	b.n	80031c8 <HardFault_Handler+0x4>

080031cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e4:	f000 fbda 	bl	800399c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  User_Button_Interrupt_Handler();
 80031f2:	f7ff fb5f 	bl	80028b4 <User_Button_Interrupt_Handler>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80031f6:	2008      	movs	r0, #8
 80031f8:	f001 fa00 	bl	80045fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  Rotary_Encoder_Interrupt_Handler();
 8003206:	f7ff fbb9 	bl	800297c <Rotary_Encoder_Interrupt_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_CHB_Pin);
 800320a:	2010      	movs	r0, #16
 800320c:	f001 f9f6 	bl	80045fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_CHA_Pin);
 8003210:	2020      	movs	r0, #32
 8003212:	f001 f9f3 	bl	80045fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  Timer_Interrupt_Handler();
 8003220:	f7ff fa9a 	bl	8002758 <Timer_Interrupt_Handler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <TIM6_DAC_IRQHandler+0x18>)
 8003226:	0018      	movs	r0, r3
 8003228:	f002 fe7e 	bl	8005f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	2000013c 	.word	0x2000013c

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	18d3      	adds	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f003 f840 	bl	80062ec <__errno>
 800326c:	0003      	movs	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	2301      	movs	r3, #1
 8003274:	425b      	negs	r3, r3
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	@ (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	18d2      	adds	r2, r2, r3
 8003286:	4b05      	ldr	r3, [pc, #20]	@ (800329c <_sbrk+0x64>)
 8003288:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20002000 	.word	0x20002000
 8003298:	00000400 	.word	0x00000400
 800329c:	20000344 	.word	0x20000344
 80032a0:	200006a0 	.word	0x200006a0

080032a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af04      	add	r7, sp, #16
 80032be:	0002      	movs	r2, r0
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80032c4:	4808      	ldr	r0, [pc, #32]	@ (80032e8 <ssd1306_WriteCommand+0x30>)
 80032c6:	2301      	movs	r3, #1
 80032c8:	425b      	negs	r3, r3
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	2301      	movs	r3, #1
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2301      	movs	r3, #1
 80032d6:	2200      	movs	r2, #0
 80032d8:	2178      	movs	r1, #120	@ 0x78
 80032da:	f001 fa5b 	bl	8004794 <HAL_I2C_Mem_Write>
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	200000e8 	.word	0x200000e8

080032ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af04      	add	r7, sp, #16
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4808      	ldr	r0, [pc, #32]	@ (800331c <ssd1306_WriteData+0x30>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	4252      	negs	r2, r2
 8003300:	9202      	str	r2, [sp, #8]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2301      	movs	r3, #1
 800330a:	2240      	movs	r2, #64	@ 0x40
 800330c:	2178      	movs	r1, #120	@ 0x78
 800330e:	f001 fa41 	bl	8004794 <HAL_I2C_Mem_Write>
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	200000e8 	.word	0x200000e8

08003320 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003324:	f7ff ffc3 	bl	80032ae <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003328:	2064      	movs	r0, #100	@ 0x64
 800332a:	f000 fb53 	bl	80039d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800332e:	2000      	movs	r0, #0
 8003330:	f000 fa90 	bl	8003854 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003334:	2020      	movs	r0, #32
 8003336:	f7ff ffbf 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800333a:	2000      	movs	r0, #0
 800333c:	f7ff ffbc 	bl	80032b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003340:	20b0      	movs	r0, #176	@ 0xb0
 8003342:	f7ff ffb9 	bl	80032b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003346:	20c8      	movs	r0, #200	@ 0xc8
 8003348:	f7ff ffb6 	bl	80032b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800334c:	2000      	movs	r0, #0
 800334e:	f7ff ffb3 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003352:	2010      	movs	r0, #16
 8003354:	f7ff ffb0 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003358:	2040      	movs	r0, #64	@ 0x40
 800335a:	f7ff ffad 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800335e:	20ff      	movs	r0, #255	@ 0xff
 8003360:	f000 fa60 	bl	8003824 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003364:	20a1      	movs	r0, #161	@ 0xa1
 8003366:	f7ff ffa7 	bl	80032b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800336a:	20a6      	movs	r0, #166	@ 0xa6
 800336c:	f7ff ffa4 	bl	80032b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003370:	20a8      	movs	r0, #168	@ 0xa8
 8003372:	f7ff ffa1 	bl	80032b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8003376:	201f      	movs	r0, #31
 8003378:	f7ff ff9e 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800337c:	20a4      	movs	r0, #164	@ 0xa4
 800337e:	f7ff ff9b 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003382:	20d3      	movs	r0, #211	@ 0xd3
 8003384:	f7ff ff98 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003388:	2000      	movs	r0, #0
 800338a:	f7ff ff95 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800338e:	20d5      	movs	r0, #213	@ 0xd5
 8003390:	f7ff ff92 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003394:	20f0      	movs	r0, #240	@ 0xf0
 8003396:	f7ff ff8f 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800339a:	20d9      	movs	r0, #217	@ 0xd9
 800339c:	f7ff ff8c 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80033a0:	2022      	movs	r0, #34	@ 0x22
 80033a2:	f7ff ff89 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80033a6:	20da      	movs	r0, #218	@ 0xda
 80033a8:	f7ff ff86 	bl	80032b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80033ac:	2002      	movs	r0, #2
 80033ae:	f7ff ff83 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80033b2:	20db      	movs	r0, #219	@ 0xdb
 80033b4:	f7ff ff80 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80033b8:	2020      	movs	r0, #32
 80033ba:	f7ff ff7d 	bl	80032b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80033be:	208d      	movs	r0, #141	@ 0x8d
 80033c0:	f7ff ff7a 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80033c4:	2014      	movs	r0, #20
 80033c6:	f7ff ff77 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80033ca:	2001      	movs	r0, #1
 80033cc:	f000 fa42 	bl	8003854 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f000 f811 	bl	80033f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80033d6:	f000 f833 	bl	8003440 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <ssd1306_Init+0xd4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <ssd1306_Init+0xd4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80033e6:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <ssd1306_Init+0xd4>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	711a      	strb	r2, [r3, #4]
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	20000548 	.word	0x20000548

080033f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	0002      	movs	r2, r0
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e00e      	b.n	8003428 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <ssd1306_Fill+0x1e>
 8003412:	2100      	movs	r1, #0
 8003414:	e000      	b.n	8003418 <ssd1306_Fill+0x20>
 8003416:	21ff      	movs	r1, #255	@ 0xff
 8003418:	4a08      	ldr	r2, [pc, #32]	@ (800343c <ssd1306_Fill+0x44>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	1c0a      	adds	r2, r1, #0
 8003420:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3301      	adds	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	429a      	cmp	r2, r3
 8003430:	d3eb      	bcc.n	800340a <ssd1306_Fill+0x12>
    }
}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000348 	.word	0x20000348

08003440 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e01a      	b.n	8003484 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	3b50      	subs	r3, #80	@ 0x50
 8003454:	b2db      	uxtb	r3, r3
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff ff2e 	bl	80032b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800345c:	2000      	movs	r0, #0
 800345e:	f7ff ff2b 	bl	80032b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003462:	2010      	movs	r0, #16
 8003464:	f7ff ff28 	bl	80032b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	01da      	lsls	r2, r3, #7
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <ssd1306_UpdateScreen+0x58>)
 8003470:	18d3      	adds	r3, r2, r3
 8003472:	2180      	movs	r1, #128	@ 0x80
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff ff39 	bl	80032ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	3201      	adds	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	1dfb      	adds	r3, r7, #7
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d9e0      	bls.n	800344e <ssd1306_UpdateScreen+0xe>
    }
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	20000348 	.word	0x20000348

0800349c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	0004      	movs	r4, r0
 80034a4:	0008      	movs	r0, r1
 80034a6:	0011      	movs	r1, r2
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	1c22      	adds	r2, r4, #0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	1dbb      	adds	r3, r7, #6
 80034b0:	1c02      	adds	r2, r0, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	1d7b      	adds	r3, r7, #5
 80034b6:	1c0a      	adds	r2, r1, #0
 80034b8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db47      	blt.n	8003554 <ssd1306_DrawPixel+0xb8>
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b1f      	cmp	r3, #31
 80034ca:	d843      	bhi.n	8003554 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80034cc:	1d7b      	adds	r3, r7, #5
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11e      	bne.n	8003512 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2d8      	uxtb	r0, r3
 80034e0:	0003      	movs	r3, r0
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <ssd1306_DrawPixel+0xc0>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	b25a      	sxtb	r2, r3
 80034ec:	1dbb      	adds	r3, r7, #6
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2107      	movs	r1, #7
 80034f2:	400b      	ands	r3, r1
 80034f4:	2101      	movs	r1, #1
 80034f6:	4099      	lsls	r1, r3
 80034f8:	000b      	movs	r3, r1
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b259      	sxtb	r1, r3
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	0003      	movs	r3, r0
 8003506:	01db      	lsls	r3, r3, #7
 8003508:	18d3      	adds	r3, r2, r3
 800350a:	b2c9      	uxtb	r1, r1
 800350c:	4a13      	ldr	r2, [pc, #76]	@ (800355c <ssd1306_DrawPixel+0xc0>)
 800350e:	54d1      	strb	r1, [r2, r3]
 8003510:	e021      	b.n	8003556 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	1dbb      	adds	r3, r7, #6
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	08db      	lsrs	r3, r3, #3
 800351c:	b2d8      	uxtb	r0, r3
 800351e:	0003      	movs	r3, r0
 8003520:	01db      	lsls	r3, r3, #7
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <ssd1306_DrawPixel+0xc0>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	b25b      	sxtb	r3, r3
 800352a:	1dba      	adds	r2, r7, #6
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	2107      	movs	r1, #7
 8003530:	400a      	ands	r2, r1
 8003532:	2101      	movs	r1, #1
 8003534:	4091      	lsls	r1, r2
 8003536:	000a      	movs	r2, r1
 8003538:	b252      	sxtb	r2, r2
 800353a:	43d2      	mvns	r2, r2
 800353c:	b252      	sxtb	r2, r2
 800353e:	4013      	ands	r3, r2
 8003540:	b259      	sxtb	r1, r3
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	0003      	movs	r3, r0
 8003548:	01db      	lsls	r3, r3, #7
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	b2c9      	uxtb	r1, r1
 800354e:	4a03      	ldr	r2, [pc, #12]	@ (800355c <ssd1306_DrawPixel+0xc0>)
 8003550:	54d1      	strb	r1, [r2, r3]
 8003552:	e000      	b.n	8003556 <ssd1306_DrawPixel+0xba>
        return;
 8003554:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003556:	46bd      	mov	sp, r7
 8003558:	b003      	add	sp, #12
 800355a:	bd90      	pop	{r4, r7, pc}
 800355c:	20000348 	.word	0x20000348

08003560 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b089      	sub	sp, #36	@ 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	0004      	movs	r4, r0
 8003568:	1d38      	adds	r0, r7, #4
 800356a:	6001      	str	r1, [r0, #0]
 800356c:	6042      	str	r2, [r0, #4]
 800356e:	0019      	movs	r1, r3
 8003570:	200f      	movs	r0, #15
 8003572:	183b      	adds	r3, r7, r0
 8003574:	1c22      	adds	r2, r4, #0
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	230e      	movs	r3, #14
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	1c0a      	adds	r2, r1, #0
 800357e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003580:	183b      	adds	r3, r7, r0
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b1f      	cmp	r3, #31
 8003586:	d903      	bls.n	8003590 <ssd1306_WriteChar+0x30>
 8003588:	183b      	adds	r3, r7, r0
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b7e      	cmp	r3, #126	@ 0x7e
 800358e:	d901      	bls.n	8003594 <ssd1306_WriteChar+0x34>
        return 0;
 8003590:	2300      	movs	r3, #0
 8003592:	e077      	b.n	8003684 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003594:	4b3d      	ldr	r3, [pc, #244]	@ (800368c <ssd1306_WriteChar+0x12c>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	001a      	movs	r2, r3
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	2b80      	cmp	r3, #128	@ 0x80
 80035a2:	dc07      	bgt.n	80035b4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80035a4:	4b39      	ldr	r3, [pc, #228]	@ (800368c <ssd1306_WriteChar+0x12c>)
 80035a6:	885b      	ldrh	r3, [r3, #2]
 80035a8:	001a      	movs	r2, r3
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	dd01      	ble.n	80035b8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e065      	b.n	8003684 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e051      	b.n	8003662 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	230f      	movs	r3, #15
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3b20      	subs	r3, #32
 80035ca:	1d39      	adds	r1, r7, #4
 80035cc:	7849      	ldrb	r1, [r1, #1]
 80035ce:	434b      	muls	r3, r1
 80035d0:	0019      	movs	r1, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	18cb      	adds	r3, r1, r3
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	18d3      	adds	r3, r2, r3
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e035      	b.n	8003650 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	409a      	lsls	r2, r3
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	4013      	ands	r3, r2
 80035f0:	d014      	beq.n	800361c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80035f2:	4b26      	ldr	r3, [pc, #152]	@ (800368c <ssd1306_WriteChar+0x12c>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	18d3      	adds	r3, r2, r3
 80035fe:	b2d8      	uxtb	r0, r3
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <ssd1306_WriteChar+0x12c>)
 8003602:	885b      	ldrh	r3, [r3, #2]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	b2d9      	uxtb	r1, r3
 800360e:	230e      	movs	r3, #14
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	001a      	movs	r2, r3
 8003616:	f7ff ff41 	bl	800349c <ssd1306_DrawPixel>
 800361a:	e016      	b.n	800364a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <ssd1306_WriteChar+0x12c>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	18d3      	adds	r3, r2, r3
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	4b18      	ldr	r3, [pc, #96]	@ (800368c <ssd1306_WriteChar+0x12c>)
 800362c:	885b      	ldrh	r3, [r3, #2]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	b2d9      	uxtb	r1, r3
 8003638:	230e      	movs	r3, #14
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	425a      	negs	r2, r3
 8003640:	4153      	adcs	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	001a      	movs	r2, r3
 8003646:	f7ff ff29 	bl	800349c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	3301      	adds	r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	001a      	movs	r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4293      	cmp	r3, r2
 800365a:	d3c3      	bcc.n	80035e4 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	001a      	movs	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4293      	cmp	r3, r2
 800366c:	d3a7      	bcc.n	80035be <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <ssd1306_WriteChar+0x12c>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	1d3a      	adds	r2, r7, #4
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	189b      	adds	r3, r3, r2
 8003678:	b29a      	uxth	r2, r3
 800367a:	4b04      	ldr	r3, [pc, #16]	@ (800368c <ssd1306_WriteChar+0x12c>)
 800367c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800367e:	230f      	movs	r3, #15
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	781b      	ldrb	r3, [r3, #0]
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b009      	add	sp, #36	@ 0x24
 800368a:	bd90      	pop	{r4, r7, pc}
 800368c:	20000548 	.word	0x20000548

08003690 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	1d38      	adds	r0, r7, #4
 800369a:	6001      	str	r1, [r0, #0]
 800369c:	6042      	str	r2, [r0, #4]
 800369e:	001a      	movs	r2, r3
 80036a0:	1cfb      	adds	r3, r7, #3
 80036a2:	701a      	strb	r2, [r3, #0]
    while (*str) {
 80036a4:	e014      	b.n	80036d0 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	7818      	ldrb	r0, [r3, #0]
 80036aa:	1cfb      	adds	r3, r7, #3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	1d3a      	adds	r2, r7, #4
 80036b0:	6811      	ldr	r1, [r2, #0]
 80036b2:	6852      	ldr	r2, [r2, #4]
 80036b4:	f7ff ff54 	bl	8003560 <ssd1306_WriteChar>
 80036b8:	0003      	movs	r3, r0
 80036ba:	001a      	movs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d002      	beq.n	80036ca <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	e008      	b.n	80036dc <ssd1306_WriteString+0x4c>
        }
        str++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e6      	bne.n	80036a6 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	781b      	ldrb	r3, [r3, #0]
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	0002      	movs	r2, r0
 80036ec:	1dfb      	adds	r3, r7, #7
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	1c0a      	adds	r2, r1, #0
 80036f4:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <ssd1306_SetCursor+0x30>)
 80036fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003700:	1dbb      	adds	r3, r7, #6
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <ssd1306_SetCursor+0x30>)
 8003708:	805a      	strh	r2, [r3, #2]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b002      	add	sp, #8
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000548 	.word	0x20000548

08003718 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	0005      	movs	r5, r0
 8003720:	000c      	movs	r4, r1
 8003722:	0010      	movs	r0, r2
 8003724:	0019      	movs	r1, r3
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	1c2a      	adds	r2, r5, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	1dbb      	adds	r3, r7, #6
 800372e:	1c22      	adds	r2, r4, #0
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	1d7b      	adds	r3, r7, #5
 8003734:	1c02      	adds	r2, r0, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	1c0a      	adds	r2, r1, #0
 800373c:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 800373e:	1d7b      	adds	r3, r7, #5
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	17da      	asrs	r2, r3, #31
 800374a:	189b      	adds	r3, r3, r2
 800374c:	4053      	eors	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	17da      	asrs	r2, r3, #31
 800375c:	189b      	adds	r3, r3, r2
 800375e:	4053      	eors	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003762:	1dfa      	adds	r2, r7, #7
 8003764:	1d7b      	adds	r3, r7, #5
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d201      	bcs.n	8003772 <ssd1306_Line+0x5a>
 800376e:	2301      	movs	r3, #1
 8003770:	e001      	b.n	8003776 <ssd1306_Line+0x5e>
 8003772:	2301      	movs	r3, #1
 8003774:	425b      	negs	r3, r3
 8003776:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003778:	1dba      	adds	r2, r7, #6
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d201      	bcs.n	8003788 <ssd1306_Line+0x70>
 8003784:	2301      	movs	r3, #1
 8003786:	e001      	b.n	800378c <ssd1306_Line+0x74>
 8003788:	2301      	movs	r3, #1
 800378a:	425b      	negs	r3, r3
 800378c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003796:	2330      	movs	r3, #48	@ 0x30
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	1d7b      	adds	r3, r7, #5
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fe79 	bl	800349c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80037aa:	e02b      	b.n	8003804 <ssd1306_Line+0xec>
        ssd1306_DrawPixel(x1, y1, color);
 80037ac:	2330      	movs	r3, #48	@ 0x30
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	7819      	ldrb	r1, [r3, #0]
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fe6e 	bl	800349c <ssd1306_DrawPixel>
        error2 = error * 2;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	425b      	negs	r3, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dd0a      	ble.n	80037e6 <ssd1306_Line+0xce>
            error -= deltaY;
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	1dfa      	adds	r2, r7, #7
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	188a      	adds	r2, r1, r2
 80037e4:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	da0a      	bge.n	8003804 <ssd1306_Line+0xec>
            error += deltaX;
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	b2d9      	uxtb	r1, r3
 80037fa:	1dbb      	adds	r3, r7, #6
 80037fc:	1dba      	adds	r2, r7, #6
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	188a      	adds	r2, r1, r2
 8003802:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8003804:	1dfa      	adds	r2, r7, #7
 8003806:	1d7b      	adds	r3, r7, #5
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1cd      	bne.n	80037ac <ssd1306_Line+0x94>
 8003810:	1dba      	adds	r2, r7, #6
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	7812      	ldrb	r2, [r2, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d1c7      	bne.n	80037ac <ssd1306_Line+0x94>
        }
    }
    return;
 800381c:	46c0      	nop			@ (mov r8, r8)
}
 800381e:	46bd      	mov	sp, r7
 8003820:	b008      	add	sp, #32
 8003822:	bdb0      	pop	{r4, r5, r7, pc}

08003824 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	0002      	movs	r2, r0
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003830:	210f      	movs	r1, #15
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2281      	movs	r2, #129	@ 0x81
 8003836:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003838:	187b      	adds	r3, r7, r1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fd3b 	bl	80032b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff fd36 	bl	80032b8 <ssd1306_WriteCommand>
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b004      	add	sp, #16
 8003852:	bd80      	pop	{r7, pc}

08003854 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	0002      	movs	r2, r0
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003868:	230f      	movs	r3, #15
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	22af      	movs	r2, #175	@ 0xaf
 800386e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <ssd1306_SetDisplayOn+0x48>)
 8003872:	2201      	movs	r2, #1
 8003874:	715a      	strb	r2, [r3, #5]
 8003876:	e006      	b.n	8003886 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	22ae      	movs	r2, #174	@ 0xae
 800387e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <ssd1306_SetDisplayOn+0x48>)
 8003882:	2200      	movs	r2, #0
 8003884:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003886:	230f      	movs	r3, #15
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff fd13 	bl	80032b8 <ssd1306_WriteCommand>
}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	20000548 	.word	0x20000548

080038a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80038a0:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80038a2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038a4:	f7ff fcfe 	bl	80032a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a8:	480c      	ldr	r0, [pc, #48]	@ (80038dc <LoopForever+0x6>)
  ldr r1, =_edata
 80038aa:	490d      	ldr	r1, [pc, #52]	@ (80038e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038ac:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <LoopForever+0xe>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b0:	e002      	b.n	80038b8 <LoopCopyDataInit>

080038b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b6:	3304      	adds	r3, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038bc:	d3f9      	bcc.n	80038b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038be:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038c0:	4c0a      	ldr	r4, [pc, #40]	@ (80038ec <LoopForever+0x16>)
  movs r3, #0
 80038c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c4:	e001      	b.n	80038ca <LoopFillZerobss>

080038c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c8:	3204      	adds	r2, #4

080038ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038cc:	d3fb      	bcc.n	80038c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ce:	f002 fd13 	bl	80062f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d2:	f7ff f957 	bl	8002b84 <main>

080038d6 <LoopForever>:

LoopForever:
    b LoopForever
 80038d6:	e7fe      	b.n	80038d6 <LoopForever>
   ldr   r0, =_estack
 80038d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038e4:	08007cc4 	.word	0x08007cc4
  ldr r2, =_sbss
 80038e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038ec:	2000069c 	.word	0x2000069c

080038f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f0:	e7fe      	b.n	80038f0 <ADC1_COMP_IRQHandler>
	...

080038f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_Init+0x3c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <HAL_Init+0x3c>)
 8003906:	2140      	movs	r1, #64	@ 0x40
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800390c:	2000      	movs	r0, #0
 800390e:	f000 f811 	bl	8003934 <HAL_InitTick>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d003      	beq.n	800391e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e001      	b.n	8003922 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800391e:	f7ff fb99 	bl	8003054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003922:	1dfb      	adds	r3, r7, #7
 8003924:	781b      	ldrb	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	40022000 	.word	0x40022000

08003934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800393c:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <HAL_InitTick+0x5c>)
 800393e:	681c      	ldr	r4, [r3, #0]
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_InitTick+0x60>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	0019      	movs	r1, r3
 8003946:	23fa      	movs	r3, #250	@ 0xfa
 8003948:	0098      	lsls	r0, r3, #2
 800394a:	f7fc fbe7 	bl	800011c <__udivsi3>
 800394e:	0003      	movs	r3, r0
 8003950:	0019      	movs	r1, r3
 8003952:	0020      	movs	r0, r4
 8003954:	f7fc fbe2 	bl	800011c <__udivsi3>
 8003958:	0003      	movs	r3, r0
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fcad 	bl	80042ba <HAL_SYSTICK_Config>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e00f      	b.n	8003988 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d80b      	bhi.n	8003986 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	2301      	movs	r3, #1
 8003972:	425b      	negs	r3, r3
 8003974:	2200      	movs	r2, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fc7a 	bl	8004270 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_InitTick+0x64>)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b003      	add	sp, #12
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	20000004 	.word	0x20000004
 8003994:	2000001c 	.word	0x2000001c
 8003998:	20000018 	.word	0x20000018

0800399c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_IncTick+0x1c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	001a      	movs	r2, r3
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_IncTick+0x20>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_IncTick+0x20>)
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	2000001c 	.word	0x2000001c
 80039bc:	20000550 	.word	0x20000550

080039c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <HAL_GetTick+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	20000550 	.word	0x20000550

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	f7ff ffe0 	bl	80039c0 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	2000001c 	.word	0x2000001c

08003a1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e159      	b.n	8003ce2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2250      	movs	r2, #80	@ 0x50
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7ff fb18 	bl	800307c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	2210      	movs	r2, #16
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d005      	beq.n	8003a64 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003a62:	d00b      	beq.n	8003a7c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	2210      	movs	r2, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2250      	movs	r2, #80	@ 0x50
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e132      	b.n	8003ce2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	4a9a      	ldr	r2, [pc, #616]	@ (8003cec <HAL_ADC_Init+0x2d0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	2202      	movs	r2, #2
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2203      	movs	r2, #3
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_ADC_Init+0x90>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_Init+0x90>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_Init+0x92>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d149      	bne.n	8003b46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	23c0      	movs	r3, #192	@ 0xc0
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d00b      	beq.n	8003ad6 <HAL_ADC_Init+0xba>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	05db      	lsls	r3, r3, #23
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d005      	beq.n	8003ad6 <HAL_ADC_Init+0xba>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d111      	bne.n	8003afa <HAL_ADC_Init+0xde>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	0892      	lsrs	r2, r2, #2
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6919      	ldr	r1, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	611a      	str	r2, [r3, #16]
 8003af8:	e014      	b.n	8003b24 <HAL_ADC_Init+0x108>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0092      	lsls	r2, r2, #2
 8003b06:	0892      	lsrs	r2, r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	4b79      	ldr	r3, [pc, #484]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b78      	ldr	r3, [pc, #480]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b10:	4978      	ldr	r1, [pc, #480]	@ (8003cf4 <HAL_ADC_Init+0x2d8>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	4b76      	ldr	r3, [pc, #472]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4b74      	ldr	r3, [pc, #464]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2118      	movs	r1, #24
 8003b30:	438a      	bics	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68d9      	ldr	r1, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003b46:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b69      	ldr	r3, [pc, #420]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b4c:	496a      	ldr	r1, [pc, #424]	@ (8003cf8 <HAL_ADC_Init+0x2dc>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003b52:	4b67      	ldr	r3, [pc, #412]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5a:	065a      	lsls	r2, r3, #25
 8003b5c:	4b64      	ldr	r3, [pc, #400]	@ (8003cf0 <HAL_ADC_Init+0x2d4>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	055b      	lsls	r3, r3, #21
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2180      	movs	r1, #128	@ 0x80
 8003b7c:	0549      	lsls	r1, r1, #21
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	495b      	ldr	r1, [pc, #364]	@ (8003cfc <HAL_ADC_Init+0x2e0>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_Init+0x18c>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e000      	b.n	8003baa <HAL_ADC_Init+0x18e>
 8003ba8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003baa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2020      	movs	r0, #32
 8003bb0:	5c1b      	ldrb	r3, [r3, r0]
 8003bb2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003bb4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	202c      	movs	r0, #44	@ 0x2c
 8003bba:	5c1b      	ldrb	r3, [r3, r0]
 8003bbc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003bbe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003bc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003bcc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003bd4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003be2:	23c2      	movs	r3, #194	@ 0xc2
 8003be4:	33ff      	adds	r3, #255	@ 0xff
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d00b      	beq.n	8003c02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68d9      	ldr	r1, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2221      	movs	r2, #33	@ 0x21
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d11a      	bne.n	8003c42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2180      	movs	r1, #128	@ 0x80
 8003c22:	0249      	lsls	r1, r1, #9
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e00b      	b.n	8003c42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	2220      	movs	r2, #32
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11f      	bne.n	8003c8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	492a      	ldr	r1, [pc, #168]	@ (8003d00 <HAL_ADC_Init+0x2e4>)
 8003c56:	400a      	ands	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6919      	ldr	r1, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003c68:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003c6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]
 8003c88:	e00e      	b.n	8003ca8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2201      	movs	r2, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2107      	movs	r1, #7
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6959      	ldr	r1, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	2201      	movs	r2, #1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	fffffefd 	.word	0xfffffefd
 8003cf0:	40012708 	.word	0x40012708
 8003cf4:	ffc3ffff 	.word	0xffc3ffff
 8003cf8:	fdffffff 	.word	0xfdffffff
 8003cfc:	fffe0219 	.word	0xfffe0219
 8003d00:	fffffc03 	.word	0xfffffc03

08003d04 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d138      	bne.n	8003d92 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2250      	movs	r2, #80	@ 0x50
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_Start+0x2a>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e038      	b.n	8003da0 <HAL_ADC_Start+0x9c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2250      	movs	r2, #80	@ 0x50
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d007      	beq.n	8003d4e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003d3e:	230f      	movs	r3, #15
 8003d40:	18fc      	adds	r4, r7, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f95f 	bl	8004008 <ADC_Enable>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d4e:	230f      	movs	r3, #15
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d120      	bne.n	8003d9a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <HAL_ADC_Start+0xa4>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2280      	movs	r2, #128	@ 0x80
 8003d62:	0052      	lsls	r2, r2, #1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2250      	movs	r2, #80	@ 0x50
 8003d74:	2100      	movs	r1, #0
 8003d76:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	221c      	movs	r2, #28
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	e003      	b.n	8003d9a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d92:	230f      	movs	r3, #15
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	781b      	ldrb	r3, [r3, #0]
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b005      	add	sp, #20
 8003da6:	bd90      	pop	{r4, r7, pc}
 8003da8:	fffff0fe 	.word	0xfffff0fe

08003dac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d102      	bne.n	8003dcc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e014      	b.n	8003df6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10b      	bne.n	8003df2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dde:	2220      	movs	r2, #32
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2250      	movs	r2, #80	@ 0x50
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e072      	b.n	8003ed8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003df2:	230c      	movs	r3, #12
 8003df4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003df6:	f7ff fde3 	bl	80039c0 <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003dfe:	e01f      	b.n	8003e40 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	d01c      	beq.n	8003e40 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_ADC_PollForConversion+0x70>
 8003e0c:	f7ff fdd8 	bl	80039c0 <HAL_GetTick>
 8003e10:	0002      	movs	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d211      	bcs.n	8003e40 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	d10b      	bne.n	8003e40 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2250      	movs	r2, #80	@ 0x50
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e04b      	b.n	8003ed8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d0d9      	beq.n	8003e00 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e50:	2280      	movs	r2, #128	@ 0x80
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	23c0      	movs	r3, #192	@ 0xc0
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	4013      	ands	r3, r2
 8003e66:	d12e      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d129      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d122      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2204      	movs	r2, #4
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d110      	bne.n	8003eae <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	210c      	movs	r1, #12
 8003e98:	438a      	bics	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <HAL_ADC_PollForConversion+0x134>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003eac:	e00b      	b.n	8003ec6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b004      	add	sp, #16
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	fffffefe 	.word	0xfffffefe

08003ee4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2250      	movs	r2, #80	@ 0x50
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e06c      	b.n	8003fee <HAL_ADC_ConfigChannel+0xf2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2250      	movs	r2, #80	@ 0x50
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2204      	movs	r2, #4
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2250      	movs	r2, #80	@ 0x50
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e056      	b.n	8003fee <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <HAL_ADC_ConfigChannel+0xfc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d028      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	035b      	lsls	r3, r3, #13
 8003f56:	0b5a      	lsrs	r2, r3, #13
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	02db      	lsls	r3, r3, #11
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	0409      	lsls	r1, r1, #16
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f000 f8ac 	bl	80040d8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	029b      	lsls	r3, r3, #10
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d02b      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b1a      	ldr	r3, [pc, #104]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003f92:	2180      	movs	r1, #128	@ 0x80
 8003f94:	03c9      	lsls	r1, r1, #15
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e023      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	035b      	lsls	r3, r3, #13
 8003fa8:	0b5b      	lsrs	r3, r3, #13
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	02db      	lsls	r3, r3, #11
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d005      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003fc6:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_ADC_ConfigChannel+0x104>)
 8003fc8:	400a      	ands	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d005      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_ADC_ConfigChannel+0x100>)
 8003fde:	4909      	ldr	r1, [pc, #36]	@ (8004004 <HAL_ADC_ConfigChannel+0x108>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2250      	movs	r2, #80	@ 0x50
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b002      	add	sp, #8
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	00001001 	.word	0x00001001
 8003ffc:	40012708 	.word	0x40012708
 8004000:	ff7fffff 	.word	0xff7fffff
 8004004:	ffbfffff 	.word	0xffbfffff

08004008 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2203      	movs	r2, #3
 800401c:	4013      	ands	r3, r2
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <ADC_Enable+0x2c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	4013      	ands	r3, r2
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <ADC_Enable+0x2c>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <ADC_Enable+0x2e>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d146      	bne.n	80040c8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a24      	ldr	r2, [pc, #144]	@ (80040d4 <ADC_Enable+0xcc>)
 8004042:	4013      	ands	r3, r2
 8004044:	d00d      	beq.n	8004062 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	2210      	movs	r2, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	2201      	movs	r2, #1
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e033      	b.n	80040ca <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004072:	2001      	movs	r0, #1
 8004074:	f000 f830 	bl	80040d8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004078:	f7ff fca2 	bl	80039c0 <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004080:	e01b      	b.n	80040ba <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004082:	f7ff fc9d 	bl	80039c0 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b0a      	cmp	r3, #10
 800408e:	d914      	bls.n	80040ba <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	4013      	ands	r3, r2
 800409a:	2b01      	cmp	r3, #1
 800409c:	d00d      	beq.n	80040ba <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	2210      	movs	r2, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	2201      	movs	r2, #1
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e007      	b.n	80040ca <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d1dc      	bne.n	8004082 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	80000017 	.word	0x80000017

080040d8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <ADC_DelayMicroSecond+0x38>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	490b      	ldr	r1, [pc, #44]	@ (8004114 <ADC_DelayMicroSecond+0x3c>)
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fc f818 	bl	800011c <__udivsi3>
 80040ec:	0003      	movs	r3, r0
 80040ee:	001a      	movs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4353      	muls	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80040f6:	e002      	b.n	80040fe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f9      	bne.n	80040f8 <ADC_DelayMicroSecond+0x20>
  }
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b004      	add	sp, #16
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	20000004 	.word	0x20000004
 8004114:	000f4240 	.word	0x000f4240

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	0002      	movs	r2, r0
 8004120:	1dfb      	adds	r3, r7, #7
 8004122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b7f      	cmp	r3, #127	@ 0x7f
 800412a:	d809      	bhi.n	8004140 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	001a      	movs	r2, r3
 8004132:	231f      	movs	r3, #31
 8004134:	401a      	ands	r2, r3
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <__NVIC_EnableIRQ+0x30>)
 8004138:	2101      	movs	r1, #1
 800413a:	4091      	lsls	r1, r2
 800413c:	000a      	movs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
  }
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000e100 	.word	0xe000e100

0800414c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	0002      	movs	r2, r0
 8004154:	6039      	str	r1, [r7, #0]
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004160:	d828      	bhi.n	80041b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004162:	4a2f      	ldr	r2, [pc, #188]	@ (8004220 <__NVIC_SetPriority+0xd4>)
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b25b      	sxtb	r3, r3
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	33c0      	adds	r3, #192	@ 0xc0
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	589b      	ldr	r3, [r3, r2]
 8004172:	1dfa      	adds	r2, r7, #7
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	0011      	movs	r1, r2
 8004178:	2203      	movs	r2, #3
 800417a:	400a      	ands	r2, r1
 800417c:	00d2      	lsls	r2, r2, #3
 800417e:	21ff      	movs	r1, #255	@ 0xff
 8004180:	4091      	lsls	r1, r2
 8004182:	000a      	movs	r2, r1
 8004184:	43d2      	mvns	r2, r2
 8004186:	401a      	ands	r2, r3
 8004188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	22ff      	movs	r2, #255	@ 0xff
 8004190:	401a      	ands	r2, r3
 8004192:	1dfb      	adds	r3, r7, #7
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	0018      	movs	r0, r3
 8004198:	2303      	movs	r3, #3
 800419a:	4003      	ands	r3, r0
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041a0:	481f      	ldr	r0, [pc, #124]	@ (8004220 <__NVIC_SetPriority+0xd4>)
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	430a      	orrs	r2, r1
 80041ac:	33c0      	adds	r3, #192	@ 0xc0
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80041b2:	e031      	b.n	8004218 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <__NVIC_SetPriority+0xd8>)
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	0019      	movs	r1, r3
 80041bc:	230f      	movs	r3, #15
 80041be:	400b      	ands	r3, r1
 80041c0:	3b08      	subs	r3, #8
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	3306      	adds	r3, #6
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	18d3      	adds	r3, r2, r3
 80041ca:	3304      	adds	r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	1dfa      	adds	r2, r7, #7
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	0011      	movs	r1, r2
 80041d4:	2203      	movs	r2, #3
 80041d6:	400a      	ands	r2, r1
 80041d8:	00d2      	lsls	r2, r2, #3
 80041da:	21ff      	movs	r1, #255	@ 0xff
 80041dc:	4091      	lsls	r1, r2
 80041de:	000a      	movs	r2, r1
 80041e0:	43d2      	mvns	r2, r2
 80041e2:	401a      	ands	r2, r3
 80041e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	019b      	lsls	r3, r3, #6
 80041ea:	22ff      	movs	r2, #255	@ 0xff
 80041ec:	401a      	ands	r2, r3
 80041ee:	1dfb      	adds	r3, r7, #7
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	0018      	movs	r0, r3
 80041f4:	2303      	movs	r3, #3
 80041f6:	4003      	ands	r3, r0
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041fc:	4809      	ldr	r0, [pc, #36]	@ (8004224 <__NVIC_SetPriority+0xd8>)
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	001c      	movs	r4, r3
 8004204:	230f      	movs	r3, #15
 8004206:	4023      	ands	r3, r4
 8004208:	3b08      	subs	r3, #8
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	430a      	orrs	r2, r1
 800420e:	3306      	adds	r3, #6
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	18c3      	adds	r3, r0, r3
 8004214:	3304      	adds	r3, #4
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b003      	add	sp, #12
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	e000e100 	.word	0xe000e100
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	045b      	lsls	r3, r3, #17
 8004238:	429a      	cmp	r2, r3
 800423a:	d301      	bcc.n	8004240 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800423c:	2301      	movs	r3, #1
 800423e:	e010      	b.n	8004262 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <SysTick_Config+0x44>)
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	3a01      	subs	r2, #1
 8004246:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004248:	2301      	movs	r3, #1
 800424a:	425b      	negs	r3, r3
 800424c:	2103      	movs	r1, #3
 800424e:	0018      	movs	r0, r3
 8004250:	f7ff ff7c 	bl	800414c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <SysTick_Config+0x44>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	4b04      	ldr	r3, [pc, #16]	@ (800426c <SysTick_Config+0x44>)
 800425c:	2207      	movs	r2, #7
 800425e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	210f      	movs	r1, #15
 800427c:	187b      	adds	r3, r7, r1
 800427e:	1c02      	adds	r2, r0, #0
 8004280:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	187b      	adds	r3, r7, r1
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b25b      	sxtb	r3, r3
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ff5d 	bl	800414c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	0002      	movs	r2, r0
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a6:	1dfb      	adds	r3, r7, #7
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff ff33 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff ffaf 	bl	8004228 <SysTick_Config>
 80042ca:	0003      	movs	r3, r0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80042ea:	e14f      	b.n	800458c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2101      	movs	r1, #1
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4091      	lsls	r1, r2
 80042f6:	000a      	movs	r2, r1
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d100      	bne.n	8004304 <HAL_GPIO_Init+0x30>
 8004302:	e140      	b.n	8004586 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2203      	movs	r2, #3
 800430a:	4013      	ands	r3, r2
 800430c:	2b01      	cmp	r3, #1
 800430e:	d005      	beq.n	800431c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2203      	movs	r2, #3
 8004316:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004318:	2b02      	cmp	r3, #2
 800431a:	d130      	bne.n	800437e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	43da      	mvns	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	409a      	lsls	r2, r3
 800433e:	0013      	movs	r3, r2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004352:	2201      	movs	r2, #1
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
 8004358:	0013      	movs	r3, r2
 800435a:	43da      	mvns	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	2201      	movs	r2, #1
 800436a:	401a      	ands	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	409a      	lsls	r2, r3
 8004370:	0013      	movs	r3, r2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2203      	movs	r2, #3
 8004384:	4013      	ands	r3, r2
 8004386:	2b03      	cmp	r3, #3
 8004388:	d017      	beq.n	80043ba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	2203      	movs	r2, #3
 8004396:	409a      	lsls	r2, r3
 8004398:	0013      	movs	r3, r2
 800439a:	43da      	mvns	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	0013      	movs	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d123      	bne.n	800440e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	08da      	lsrs	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3208      	adds	r2, #8
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	58d3      	ldr	r3, [r2, r3]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2207      	movs	r2, #7
 80043d8:	4013      	ands	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	220f      	movs	r2, #15
 80043de:	409a      	lsls	r2, r3
 80043e0:	0013      	movs	r3, r2
 80043e2:	43da      	mvns	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2107      	movs	r1, #7
 80043f2:	400b      	ands	r3, r1
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	409a      	lsls	r2, r3
 80043f8:	0013      	movs	r3, r2
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	08da      	lsrs	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3208      	adds	r2, #8
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	2203      	movs	r2, #3
 800441a:	409a      	lsls	r2, r3
 800441c:	0013      	movs	r3, r2
 800441e:	43da      	mvns	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2203      	movs	r2, #3
 800442c:	401a      	ands	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	0013      	movs	r3, r2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	23c0      	movs	r3, #192	@ 0xc0
 8004448:	029b      	lsls	r3, r3, #10
 800444a:	4013      	ands	r3, r2
 800444c:	d100      	bne.n	8004450 <HAL_GPIO_Init+0x17c>
 800444e:	e09a      	b.n	8004586 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004450:	4b54      	ldr	r3, [pc, #336]	@ (80045a4 <HAL_GPIO_Init+0x2d0>)
 8004452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004454:	4b53      	ldr	r3, [pc, #332]	@ (80045a4 <HAL_GPIO_Init+0x2d0>)
 8004456:	2101      	movs	r1, #1
 8004458:	430a      	orrs	r2, r1
 800445a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_GPIO_Init+0x2d4>)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	3302      	adds	r3, #2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	589b      	ldr	r3, [r3, r2]
 8004468:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2203      	movs	r2, #3
 800446e:	4013      	ands	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	409a      	lsls	r2, r3
 8004476:	0013      	movs	r3, r2
 8004478:	43da      	mvns	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	23a0      	movs	r3, #160	@ 0xa0
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	429a      	cmp	r2, r3
 8004488:	d019      	beq.n	80044be <HAL_GPIO_Init+0x1ea>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a47      	ldr	r2, [pc, #284]	@ (80045ac <HAL_GPIO_Init+0x2d8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_GPIO_Init+0x1e6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a46      	ldr	r2, [pc, #280]	@ (80045b0 <HAL_GPIO_Init+0x2dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00d      	beq.n	80044b6 <HAL_GPIO_Init+0x1e2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a45      	ldr	r2, [pc, #276]	@ (80045b4 <HAL_GPIO_Init+0x2e0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <HAL_GPIO_Init+0x1de>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a44      	ldr	r2, [pc, #272]	@ (80045b8 <HAL_GPIO_Init+0x2e4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_GPIO_Init+0x1da>
 80044aa:	2305      	movs	r3, #5
 80044ac:	e008      	b.n	80044c0 <HAL_GPIO_Init+0x1ec>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e006      	b.n	80044c0 <HAL_GPIO_Init+0x1ec>
 80044b2:	2303      	movs	r3, #3
 80044b4:	e004      	b.n	80044c0 <HAL_GPIO_Init+0x1ec>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e002      	b.n	80044c0 <HAL_GPIO_Init+0x1ec>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_GPIO_Init+0x1ec>
 80044be:	2300      	movs	r3, #0
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	2103      	movs	r1, #3
 80044c4:	400a      	ands	r2, r1
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	4093      	lsls	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d0:	4935      	ldr	r1, [pc, #212]	@ (80045a8 <HAL_GPIO_Init+0x2d4>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	3302      	adds	r3, #2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044de:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	43da      	mvns	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	035b      	lsls	r3, r3, #13
 80044f6:	4013      	ands	r3, r2
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004502:	4b2e      	ldr	r3, [pc, #184]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004508:	4b2c      	ldr	r3, [pc, #176]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	43da      	mvns	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	039b      	lsls	r3, r3, #14
 8004520:	4013      	ands	r3, r2
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800452c:	4b23      	ldr	r3, [pc, #140]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43da      	mvns	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	4013      	ands	r3, r2
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004556:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800455c:	4b17      	ldr	r3, [pc, #92]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43da      	mvns	r2, r3
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	025b      	lsls	r3, r3, #9
 8004574:	4013      	ands	r3, r2
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004580:	4b0e      	ldr	r3, [pc, #56]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3301      	adds	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	40da      	lsrs	r2, r3
 8004594:	1e13      	subs	r3, r2, #0
 8004596:	d000      	beq.n	800459a <HAL_GPIO_Init+0x2c6>
 8004598:	e6a8      	b.n	80042ec <HAL_GPIO_Init+0x18>
  }
}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b006      	add	sp, #24
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40010000 	.word	0x40010000
 80045ac:	50000400 	.word	0x50000400
 80045b0:	50000800 	.word	0x50000800
 80045b4:	50000c00 	.word	0x50000c00
 80045b8:	50001c00 	.word	0x50001c00
 80045bc:	40010400 	.word	0x40010400

080045c0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	000a      	movs	r2, r1
 80045ca:	1cbb      	adds	r3, r7, #2
 80045cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	1cba      	adds	r2, r7, #2
 80045d4:	8812      	ldrh	r2, [r2, #0]
 80045d6:	4013      	ands	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80045da:	230f      	movs	r3, #15
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e003      	b.n	80045ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045e4:	230f      	movs	r3, #15
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80045ec:	230f      	movs	r3, #15
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	781b      	ldrb	r3, [r3, #0]
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b004      	add	sp, #16
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	0002      	movs	r2, r0
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	1dba      	adds	r2, r7, #6
 800460e:	8812      	ldrh	r2, [r2, #0]
 8004610:	4013      	ands	r3, r2
 8004612:	d008      	beq.n	8004626 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004616:	1dba      	adds	r2, r7, #6
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 f807 	bl	8004634 <HAL_GPIO_EXTI_Callback>
  }
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	40010400 	.word	0x40010400

08004634 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	0002      	movs	r2, r0
 800463c:	1dbb      	adds	r3, r7, #6
 800463e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e08f      	b.n	800477a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2241      	movs	r2, #65	@ 0x41
 800465e:	5c9b      	ldrb	r3, [r3, r2]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2240      	movs	r2, #64	@ 0x40
 800466a:	2100      	movs	r1, #0
 800466c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f7fe fd3f 	bl	80030f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2241      	movs	r2, #65	@ 0x41
 800467a:	2124      	movs	r1, #36	@ 0x24
 800467c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	438a      	bics	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	493b      	ldr	r1, [pc, #236]	@ (8004784 <HAL_I2C_Init+0x13c>)
 8004698:	400a      	ands	r2, r1
 800469a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4938      	ldr	r1, [pc, #224]	@ (8004788 <HAL_I2C_Init+0x140>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d108      	bne.n	80046c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	0209      	lsls	r1, r1, #8
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e007      	b.n	80046d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2184      	movs	r1, #132	@ 0x84
 80046d0:	0209      	lsls	r1, r1, #8
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d109      	bne.n	80046f2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2180      	movs	r1, #128	@ 0x80
 80046ea:	0109      	lsls	r1, r1, #4
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	e007      	b.n	8004702 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4923      	ldr	r1, [pc, #140]	@ (800478c <HAL_I2C_Init+0x144>)
 80046fe:	400a      	ands	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4920      	ldr	r1, [pc, #128]	@ (8004790 <HAL_I2C_Init+0x148>)
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	491a      	ldr	r1, [pc, #104]	@ (8004788 <HAL_I2C_Init+0x140>)
 800471e:	400a      	ands	r2, r1
 8004720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
 800472c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	430a      	orrs	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2241      	movs	r2, #65	@ 0x41
 8004766:	2120      	movs	r1, #32
 8004768:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2242      	movs	r2, #66	@ 0x42
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	f0ffffff 	.word	0xf0ffffff
 8004788:	ffff7fff 	.word	0xffff7fff
 800478c:	fffff7ff 	.word	0xfffff7ff
 8004790:	02008000 	.word	0x02008000

08004794 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	000c      	movs	r4, r1
 800479e:	0010      	movs	r0, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	230a      	movs	r3, #10
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	1c22      	adds	r2, r4, #0
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	2308      	movs	r3, #8
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	1c02      	adds	r2, r0, #0
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	1dbb      	adds	r3, r7, #6
 80047b4:	1c0a      	adds	r2, r1, #0
 80047b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	5c9b      	ldrb	r3, [r3, r2]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d000      	beq.n	80047c6 <HAL_I2C_Mem_Write+0x32>
 80047c4:	e10c      	b.n	80049e0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_I2C_Mem_Write+0x42>
 80047cc:	232c      	movs	r3, #44	@ 0x2c
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0ff      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2240      	movs	r2, #64	@ 0x40
 80047e6:	5c9b      	ldrb	r3, [r3, r2]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_I2C_Mem_Write+0x5c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0f8      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	2101      	movs	r1, #1
 80047f6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047f8:	f7ff f8e2 	bl	80039c0 <HAL_GetTick>
 80047fc:	0003      	movs	r3, r0
 80047fe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	0219      	lsls	r1, r3, #8
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2319      	movs	r3, #25
 800480c:	2201      	movs	r2, #1
 800480e:	f000 f975 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0e3      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2241      	movs	r2, #65	@ 0x41
 800481e:	2121      	movs	r1, #33	@ 0x21
 8004820:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2242      	movs	r2, #66	@ 0x42
 8004826:	2140      	movs	r1, #64	@ 0x40
 8004828:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	222c      	movs	r2, #44	@ 0x2c
 800483a:	18ba      	adds	r2, r7, r2
 800483c:	8812      	ldrh	r2, [r2, #0]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004846:	1dbb      	adds	r3, r7, #6
 8004848:	881c      	ldrh	r4, [r3, #0]
 800484a:	2308      	movs	r3, #8
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	230a      	movs	r3, #10
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	8819      	ldrh	r1, [r3, #0]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	0023      	movs	r3, r4
 8004862:	f000 f8c5 	bl	80049f0 <I2C_RequestMemoryWrite>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d005      	beq.n	8004876 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2240      	movs	r2, #64	@ 0x40
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0b5      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2bff      	cmp	r3, #255	@ 0xff
 800487e:	d911      	bls.n	80048a4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	@ 0xff
 8004884:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	2380      	movs	r3, #128	@ 0x80
 800488e:	045c      	lsls	r4, r3, #17
 8004890:	230a      	movs	r3, #10
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	8819      	ldrh	r1, [r3, #0]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	0023      	movs	r3, r4
 800489e:	f000 fb07 	bl	8004eb0 <I2C_TransferConfig>
 80048a2:	e012      	b.n	80048ca <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	049c      	lsls	r4, r3, #18
 80048b8:	230a      	movs	r3, #10
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	8819      	ldrh	r1, [r3, #0]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	2300      	movs	r3, #0
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	0023      	movs	r3, r4
 80048c6:	f000 faf3 	bl	8004eb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 f96b 	bl	8004bac <I2C_WaitOnTXISFlagUntilTimeout>
 80048d6:	1e03      	subs	r3, r0, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e081      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d03a      	beq.n	800498e <HAL_I2C_Mem_Write+0x1fa>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d136      	bne.n	800498e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	0013      	movs	r3, r2
 800492a:	2200      	movs	r2, #0
 800492c:	2180      	movs	r1, #128	@ 0x80
 800492e:	f000 f8e5 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e053      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	2bff      	cmp	r3, #255	@ 0xff
 8004942:	d911      	bls.n	8004968 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	22ff      	movs	r2, #255	@ 0xff
 8004948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	b2da      	uxtb	r2, r3
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	045c      	lsls	r4, r3, #17
 8004954:	230a      	movs	r3, #10
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	8819      	ldrh	r1, [r3, #0]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	0023      	movs	r3, r4
 8004962:	f000 faa5 	bl	8004eb0 <I2C_TransferConfig>
 8004966:	e012      	b.n	800498e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004976:	b2da      	uxtb	r2, r3
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	049c      	lsls	r4, r3, #18
 800497c:	230a      	movs	r3, #10
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	8819      	ldrh	r1, [r3, #0]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	2300      	movs	r3, #0
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	0023      	movs	r3, r4
 800498a:	f000 fa91 	bl	8004eb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d198      	bne.n	80048ca <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 f94a 	bl	8004c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01a      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2220      	movs	r2, #32
 80049b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	490b      	ldr	r1, [pc, #44]	@ (80049ec <HAL_I2C_Mem_Write+0x258>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2241      	movs	r2, #65	@ 0x41
 80049c8:	2120      	movs	r1, #32
 80049ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2242      	movs	r2, #66	@ 0x42
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b007      	add	sp, #28
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	fe00e800 	.word	0xfe00e800

080049f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	000c      	movs	r4, r1
 80049fa:	0010      	movs	r0, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	250a      	movs	r5, #10
 8004a00:	197b      	adds	r3, r7, r5
 8004a02:	1c22      	adds	r2, r4, #0
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	2308      	movs	r3, #8
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	1c02      	adds	r2, r0, #0
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	1dbb      	adds	r3, r7, #6
 8004a10:	1c0a      	adds	r2, r1, #0
 8004a12:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	045c      	lsls	r4, r3, #17
 8004a1e:	197b      	adds	r3, r7, r5
 8004a20:	8819      	ldrh	r1, [r3, #0]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <I2C_RequestMemoryWrite+0xc4>)
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	0023      	movs	r3, r4
 8004a2a:	f000 fa41 	bl	8004eb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f8b9 	bl	8004bac <I2C_WaitOnTXISFlagUntilTimeout>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e033      	b.n	8004aaa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a42:	1dbb      	adds	r3, r7, #6
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d107      	bne.n	8004a5a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a58:	e019      	b.n	8004a8e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6e:	6a39      	ldr	r1, [r7, #32]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 f89a 	bl	8004bac <I2C_WaitOnTXISFlagUntilTimeout>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d001      	beq.n	8004a80 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e014      	b.n	8004aaa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a80:	2308      	movs	r3, #8
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	0013      	movs	r3, r2
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2180      	movs	r1, #128	@ 0x80
 8004a9c:	f000 f82e 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	80002000 	.word	0x80002000

08004ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d103      	bne.n	8004ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d007      	beq.n	8004af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2101      	movs	r1, #1
 8004af0:	430a      	orrs	r2, r1
 8004af2:	619a      	str	r2, [r3, #24]
  }
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	1dfb      	adds	r3, r7, #7
 8004b0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0c:	e03a      	b.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f8d3 	bl	8004cc0 <I2C_IsErrorOccurred>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e040      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	d02d      	beq.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fe ff4a 	bl	80039c0 <HAL_GetTick>
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d122      	bne.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	4153      	adcs	r3, r2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	001a      	movs	r2, r3
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d113      	bne.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	2220      	movs	r2, #32
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2241      	movs	r2, #65	@ 0x41
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2242      	movs	r2, #66	@ 0x42
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e00f      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	425a      	negs	r2, r3
 8004b94:	4153      	adcs	r3, r2
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	001a      	movs	r2, r3
 8004b9a:	1dfb      	adds	r3, r7, #7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d0b5      	beq.n	8004b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b004      	add	sp, #16
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb8:	e032      	b.n	8004c20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f000 f87d 	bl	8004cc0 <I2C_IsErrorOccurred>
 8004bc6:	1e03      	subs	r3, r0, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e030      	b.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	d025      	beq.n	8004c20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd4:	f7fe fef4 	bl	80039c0 <HAL_GetTick>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11a      	bne.n	8004c20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d013      	beq.n	8004c20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2241      	movs	r2, #65	@ 0x41
 8004c08:	2120      	movs	r1, #32
 8004c0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2242      	movs	r2, #66	@ 0x42
 8004c10:	2100      	movs	r1, #0
 8004c12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2240      	movs	r2, #64	@ 0x40
 8004c18:	2100      	movs	r1, #0
 8004c1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e007      	b.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2202      	movs	r2, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d1c5      	bne.n	8004bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b004      	add	sp, #16
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c44:	e02f      	b.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 f837 	bl	8004cc0 <I2C_IsErrorOccurred>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d001      	beq.n	8004c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e02d      	b.n	8004cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fe feb1 	bl	80039c0 <HAL_GetTick>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11a      	bne.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2220      	movs	r2, #32
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d013      	beq.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	2220      	movs	r2, #32
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2241      	movs	r2, #65	@ 0x41
 8004c8e:	2120      	movs	r1, #32
 8004c90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2242      	movs	r2, #66	@ 0x42
 8004c96:	2100      	movs	r1, #0
 8004c98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2240      	movs	r2, #64	@ 0x40
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e007      	b.n	8004cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2220      	movs	r2, #32
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d1c8      	bne.n	8004c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2327      	movs	r3, #39	@ 0x27
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d100      	bne.n	8004cee <I2C_IsErrorOccurred+0x2e>
 8004cec:	e079      	b.n	8004de2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cf6:	e057      	b.n	8004da8 <I2C_IsErrorOccurred+0xe8>
 8004cf8:	2227      	movs	r2, #39	@ 0x27
 8004cfa:	18bb      	adds	r3, r7, r2
 8004cfc:	18ba      	adds	r2, r7, r2
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3301      	adds	r3, #1
 8004d06:	d04f      	beq.n	8004da8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d08:	f7fe fe5a 	bl	80039c0 <HAL_GetTick>
 8004d0c:	0002      	movs	r2, r0
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d302      	bcc.n	8004d1e <I2C_IsErrorOccurred+0x5e>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d144      	bne.n	8004da8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	4013      	ands	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d2c:	2013      	movs	r0, #19
 8004d2e:	183b      	adds	r3, r7, r0
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	2142      	movs	r1, #66	@ 0x42
 8004d34:	5c52      	ldrb	r2, [r2, r1]
 8004d36:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	401a      	ands	r2, r3
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d126      	bne.n	8004d9a <I2C_IsErrorOccurred+0xda>
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	2380      	movs	r3, #128	@ 0x80
 8004d50:	01db      	lsls	r3, r3, #7
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d021      	beq.n	8004d9a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d01d      	beq.n	8004d9a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2180      	movs	r1, #128	@ 0x80
 8004d6a:	01c9      	lsls	r1, r1, #7
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d70:	f7fe fe26 	bl	80039c0 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d78:	e00f      	b.n	8004d9a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d7a:	f7fe fe21 	bl	80039c0 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b19      	cmp	r3, #25
 8004d86:	d908      	bls.n	8004d9a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d90:	2327      	movs	r3, #39	@ 0x27
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]

              break;
 8004d98:	e006      	b.n	8004da8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2220      	movs	r2, #32
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d1e8      	bne.n	8004d7a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2220      	movs	r2, #32
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d004      	beq.n	8004dc0 <I2C_IsErrorOccurred+0x100>
 8004db6:	2327      	movs	r3, #39	@ 0x27
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d09b      	beq.n	8004cf8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dc0:	2327      	movs	r3, #39	@ 0x27
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dda:	2327      	movs	r3, #39	@ 0x27
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00c      	beq.n	8004e0e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2201      	movs	r2, #1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2280      	movs	r2, #128	@ 0x80
 8004e02:	0052      	lsls	r2, r2, #1
 8004e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e06:	2327      	movs	r3, #39	@ 0x27
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4013      	ands	r3, r2
 8004e16:	d00c      	beq.n	8004e32 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2280      	movs	r2, #128	@ 0x80
 8004e26:	00d2      	lsls	r2, r2, #3
 8004e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e2a:	2327      	movs	r3, #39	@ 0x27
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00c      	beq.n	8004e56 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	4313      	orrs	r3, r2
 8004e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e4e:	2327      	movs	r3, #39	@ 0x27
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e56:	2327      	movs	r3, #39	@ 0x27
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01d      	beq.n	8004e9c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff fe28 	bl	8004ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	490e      	ldr	r1, [pc, #56]	@ (8004eac <I2C_IsErrorOccurred+0x1ec>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2241      	movs	r2, #65	@ 0x41
 8004e88:	2120      	movs	r1, #32
 8004e8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2242      	movs	r2, #66	@ 0x42
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2240      	movs	r2, #64	@ 0x40
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e9c:	2327      	movs	r3, #39	@ 0x27
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	781b      	ldrb	r3, [r3, #0]
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b00a      	add	sp, #40	@ 0x28
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	fe00e800 	.word	0xfe00e800

08004eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	0008      	movs	r0, r1
 8004eba:	0011      	movs	r1, r2
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	240a      	movs	r4, #10
 8004ec0:	193b      	adds	r3, r7, r4
 8004ec2:	1c02      	adds	r2, r0, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	2009      	movs	r0, #9
 8004ec8:	183b      	adds	r3, r7, r0
 8004eca:	1c0a      	adds	r2, r1, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	059b      	lsls	r3, r3, #22
 8004ed4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ed6:	183b      	adds	r3, r7, r0
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	0419      	lsls	r1, r3, #16
 8004edc:	23ff      	movs	r3, #255	@ 0xff
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	4313      	orrs	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004efa:	0d51      	lsrs	r1, r2, #21
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	00d2      	lsls	r2, r2, #3
 8004f00:	400a      	ands	r2, r1
 8004f02:	4907      	ldr	r1, [pc, #28]	@ (8004f20 <I2C_TransferConfig+0x70>)
 8004f04:	430a      	orrs	r2, r1
 8004f06:	43d2      	mvns	r2, r2
 8004f08:	401a      	ands	r2, r3
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b007      	add	sp, #28
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	03ff63ff 	.word	0x03ff63ff

08004f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2241      	movs	r2, #65	@ 0x41
 8004f32:	5c9b      	ldrb	r3, [r3, r2]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d138      	bne.n	8004fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2240      	movs	r2, #64	@ 0x40
 8004f3e:	5c9b      	ldrb	r3, [r3, r2]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e032      	b.n	8004fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2240      	movs	r2, #64	@ 0x40
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2241      	movs	r2, #65	@ 0x41
 8004f54:	2124      	movs	r1, #36	@ 0x24
 8004f56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2101      	movs	r1, #1
 8004f64:	438a      	bics	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4911      	ldr	r1, [pc, #68]	@ (8004fb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6819      	ldr	r1, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2101      	movs	r1, #1
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2241      	movs	r2, #65	@ 0x41
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2240      	movs	r2, #64	@ 0x40
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b002      	add	sp, #8
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	ffffefff 	.word	0xffffefff

08004fbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2241      	movs	r2, #65	@ 0x41
 8004fca:	5c9b      	ldrb	r3, [r3, r2]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d139      	bne.n	8005046 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2240      	movs	r2, #64	@ 0x40
 8004fd6:	5c9b      	ldrb	r3, [r3, r2]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e033      	b.n	8005048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2240      	movs	r2, #64	@ 0x40
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2241      	movs	r2, #65	@ 0x41
 8004fec:	2124      	movs	r1, #36	@ 0x24
 8004fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	438a      	bics	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800500c:	4013      	ands	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2101      	movs	r1, #1
 800502e:	430a      	orrs	r2, r1
 8005030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2241      	movs	r2, #65	@ 0x41
 8005036:	2120      	movs	r1, #32
 8005038:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2240      	movs	r2, #64	@ 0x40
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	fffff0ff 	.word	0xfffff0ff

08005054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b08a      	sub	sp, #40	@ 0x28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f000 fbaf 	bl	80057c6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005068:	4bcf      	ldr	r3, [pc, #828]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	220c      	movs	r2, #12
 800506e:	4013      	ands	r3, r2
 8005070:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005072:	4bcd      	ldr	r3, [pc, #820]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	025b      	lsls	r3, r3, #9
 800507a:	4013      	ands	r3, r2
 800507c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x36>
 8005088:	e07e      	b.n	8005188 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d007      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d112      	bne.n	80050bc <HAL_RCC_OscConfig+0x68>
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	025b      	lsls	r3, r3, #9
 800509c:	429a      	cmp	r2, r3
 800509e:	d10d      	bne.n	80050bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	4bc1      	ldr	r3, [pc, #772]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	4013      	ands	r3, r2
 80050aa:	d100      	bne.n	80050ae <HAL_RCC_OscConfig+0x5a>
 80050ac:	e06b      	b.n	8005186 <HAL_RCC_OscConfig+0x132>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d167      	bne.n	8005186 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f000 fb85 	bl	80057c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	025b      	lsls	r3, r3, #9
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x84>
 80050c8:	4bb7      	ldr	r3, [pc, #732]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4bb6      	ldr	r3, [pc, #728]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	0249      	lsls	r1, r1, #9
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e027      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	23a0      	movs	r3, #160	@ 0xa0
 80050de:	02db      	lsls	r3, r3, #11
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d10e      	bne.n	8005102 <HAL_RCC_OscConfig+0xae>
 80050e4:	4bb0      	ldr	r3, [pc, #704]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4baf      	ldr	r3, [pc, #700]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	02c9      	lsls	r1, r1, #11
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	4bad      	ldr	r3, [pc, #692]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4bac      	ldr	r3, [pc, #688]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80050f8:	2180      	movs	r1, #128	@ 0x80
 80050fa:	0249      	lsls	r1, r1, #9
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e012      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 8005102:	4ba9      	ldr	r3, [pc, #676]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4ba8      	ldr	r3, [pc, #672]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005108:	49a8      	ldr	r1, [pc, #672]	@ (80053ac <HAL_RCC_OscConfig+0x358>)
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	4ba6      	ldr	r3, [pc, #664]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	025b      	lsls	r3, r3, #9
 8005116:	4013      	ands	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4ba2      	ldr	r3, [pc, #648]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4ba1      	ldr	r3, [pc, #644]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005122:	49a3      	ldr	r1, [pc, #652]	@ (80053b0 <HAL_RCC_OscConfig+0x35c>)
 8005124:	400a      	ands	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe fc46 	bl	80039c0 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005138:	e009      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513a:	f7fe fc41 	bl	80039c0 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d902      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	f000 fb3c 	bl	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514e:	4b96      	ldr	r3, [pc, #600]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	4013      	ands	r3, r2
 8005158:	d0ef      	beq.n	800513a <HAL_RCC_OscConfig+0xe6>
 800515a:	e015      	b.n	8005188 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fe fc30 	bl	80039c0 <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005166:	f7fe fc2b 	bl	80039c0 <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b64      	cmp	r3, #100	@ 0x64
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e326      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005178:	4b8b      	ldr	r3, [pc, #556]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	@ 0x80
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	4013      	ands	r3, r2
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_OscConfig+0x112>
 8005184:	e000      	b.n	8005188 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005186:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2202      	movs	r2, #2
 800518e:	4013      	ands	r3, r2
 8005190:	d100      	bne.n	8005194 <HAL_RCC_OscConfig+0x140>
 8005192:	e08b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d13e      	bne.n	8005224 <HAL_RCC_OscConfig+0x1d0>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d13b      	bne.n	8005224 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80051ac:	4b7e      	ldr	r3, [pc, #504]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2204      	movs	r2, #4
 80051b2:	4013      	ands	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_RCC_OscConfig+0x16c>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e302      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b79      	ldr	r3, [pc, #484]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a7b      	ldr	r2, [pc, #492]	@ (80053b4 <HAL_RCC_OscConfig+0x360>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	021a      	lsls	r2, r3, #8
 80051d0:	4b75      	ldr	r3, [pc, #468]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80051d6:	4b74      	ldr	r3, [pc, #464]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2209      	movs	r2, #9
 80051dc:	4393      	bics	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	4b71      	ldr	r3, [pc, #452]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051e8:	f000 fc40 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80051ec:	0001      	movs	r1, r0
 80051ee:	4b6e      	ldr	r3, [pc, #440]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	220f      	movs	r2, #15
 80051f6:	4013      	ands	r3, r2
 80051f8:	4a6f      	ldr	r2, [pc, #444]	@ (80053b8 <HAL_RCC_OscConfig+0x364>)
 80051fa:	5cd3      	ldrb	r3, [r2, r3]
 80051fc:	000a      	movs	r2, r1
 80051fe:	40da      	lsrs	r2, r3
 8005200:	4b6e      	ldr	r3, [pc, #440]	@ (80053bc <HAL_RCC_OscConfig+0x368>)
 8005202:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005204:	4b6e      	ldr	r3, [pc, #440]	@ (80053c0 <HAL_RCC_OscConfig+0x36c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2513      	movs	r5, #19
 800520a:	197c      	adds	r4, r7, r5
 800520c:	0018      	movs	r0, r3
 800520e:	f7fe fb91 	bl	8003934 <HAL_InitTick>
 8005212:	0003      	movs	r3, r0
 8005214:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005216:	197b      	adds	r3, r7, r5
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d046      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800521e:	197b      	adds	r3, r7, r5
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	e2d0      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d027      	beq.n	800527a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800522a:	4b5f      	ldr	r3, [pc, #380]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2209      	movs	r2, #9
 8005230:	4393      	bics	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fe fbc0 	bl	80039c0 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7fe fbbb 	bl	80039c0 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e2b6      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005258:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	4013      	ands	r3, r2
 8005260:	d0f1      	beq.n	8005246 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b51      	ldr	r3, [pc, #324]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4a53      	ldr	r2, [pc, #332]	@ (80053b4 <HAL_RCC_OscConfig+0x360>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	021a      	lsls	r2, r3, #8
 8005272:	4b4d      	ldr	r3, [pc, #308]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	e018      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b4b      	ldr	r3, [pc, #300]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b4a      	ldr	r3, [pc, #296]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005280:	2101      	movs	r1, #1
 8005282:	438a      	bics	r2, r1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005286:	f7fe fb9b 	bl	80039c0 <HAL_GetTick>
 800528a:	0003      	movs	r3, r0
 800528c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005290:	f7fe fb96 	bl	80039c0 <HAL_GetTick>
 8005294:	0002      	movs	r2, r0
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e291      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052a2:	4b41      	ldr	r3, [pc, #260]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	d1f1      	bne.n	8005290 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2210      	movs	r2, #16
 80052b2:	4013      	ands	r3, r2
 80052b4:	d100      	bne.n	80052b8 <HAL_RCC_OscConfig+0x264>
 80052b6:	e0a1      	b.n	80053fc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d140      	bne.n	8005340 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052be:	4b3a      	ldr	r3, [pc, #232]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4013      	ands	r3, r2
 80052c8:	d005      	beq.n	80052d6 <HAL_RCC_OscConfig+0x282>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e277      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d6:	4b34      	ldr	r3, [pc, #208]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <HAL_RCC_OscConfig+0x370>)
 80052dc:	4013      	ands	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e4:	4b30      	ldr	r3, [pc, #192]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ea:	4b2f      	ldr	r3, [pc, #188]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	0a19      	lsrs	r1, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	061a      	lsls	r2, r3, #24
 80052f8:	4b2b      	ldr	r3, [pc, #172]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	3301      	adds	r3, #1
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	0212      	lsls	r2, r2, #8
 800530a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800530c:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	210f      	movs	r1, #15
 8005314:	400b      	ands	r3, r1
 8005316:	4928      	ldr	r1, [pc, #160]	@ (80053b8 <HAL_RCC_OscConfig+0x364>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800531c:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <HAL_RCC_OscConfig+0x368>)
 800531e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005320:	4b27      	ldr	r3, [pc, #156]	@ (80053c0 <HAL_RCC_OscConfig+0x36c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2513      	movs	r5, #19
 8005326:	197c      	adds	r4, r7, r5
 8005328:	0018      	movs	r0, r3
 800532a:	f7fe fb03 	bl	8003934 <HAL_InitTick>
 800532e:	0003      	movs	r3, r0
 8005330:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005332:	197b      	adds	r3, r7, r5
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d060      	beq.n	80053fc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800533a:	197b      	adds	r3, r7, r5
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	e242      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d03f      	beq.n	80053c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4b16      	ldr	r3, [pc, #88]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	0049      	lsls	r1, r1, #1
 8005352:	430a      	orrs	r2, r1
 8005354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005356:	f7fe fb33 	bl	80039c0 <HAL_GetTick>
 800535a:	0003      	movs	r3, r0
 800535c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005360:	f7fe fb2e 	bl	80039c0 <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e229      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	2380      	movs	r3, #128	@ 0x80
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4a10      	ldr	r2, [pc, #64]	@ (80053c4 <HAL_RCC_OscConfig+0x370>)
 8005384:	4013      	ands	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800538c:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005392:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	0a19      	lsrs	r1, r3, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	061a      	lsls	r2, r3, #24
 80053a0:	4b01      	ldr	r3, [pc, #4]	@ (80053a8 <HAL_RCC_OscConfig+0x354>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e029      	b.n	80053fc <HAL_RCC_OscConfig+0x3a8>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	fffeffff 	.word	0xfffeffff
 80053b0:	fffbffff 	.word	0xfffbffff
 80053b4:	ffffe0ff 	.word	0xffffe0ff
 80053b8:	08006f10 	.word	0x08006f10
 80053bc:	20000004 	.word	0x20000004
 80053c0:	20000018 	.word	0x20000018
 80053c4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053c8:	4bbd      	ldr	r3, [pc, #756]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4bbc      	ldr	r3, [pc, #752]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80053ce:	49bd      	ldr	r1, [pc, #756]	@ (80056c4 <HAL_RCC_OscConfig+0x670>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fe faf4 	bl	80039c0 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053de:	f7fe faef 	bl	80039c0 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1ea      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053f0:	4bb3      	ldr	r3, [pc, #716]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4013      	ands	r3, r2
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	4013      	ands	r3, r2
 8005404:	d036      	beq.n	8005474 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d019      	beq.n	8005442 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540e:	4bac      	ldr	r3, [pc, #688]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005412:	4bab      	ldr	r3, [pc, #684]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005414:	2101      	movs	r1, #1
 8005416:	430a      	orrs	r2, r1
 8005418:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541a:	f7fe fad1 	bl	80039c0 <HAL_GetTick>
 800541e:	0003      	movs	r3, r0
 8005420:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005424:	f7fe facc 	bl	80039c0 <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e1c7      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005436:	4ba2      	ldr	r3, [pc, #648]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	2202      	movs	r2, #2
 800543c:	4013      	ands	r3, r2
 800543e:	d0f1      	beq.n	8005424 <HAL_RCC_OscConfig+0x3d0>
 8005440:	e018      	b.n	8005474 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005442:	4b9f      	ldr	r3, [pc, #636]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005444:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005446:	4b9e      	ldr	r3, [pc, #632]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005448:	2101      	movs	r1, #1
 800544a:	438a      	bics	r2, r1
 800544c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544e:	f7fe fab7 	bl	80039c0 <HAL_GetTick>
 8005452:	0003      	movs	r3, r0
 8005454:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005458:	f7fe fab2 	bl	80039c0 <HAL_GetTick>
 800545c:	0002      	movs	r2, r0
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1ad      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800546a:	4b95      	ldr	r3, [pc, #596]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800546c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546e:	2202      	movs	r2, #2
 8005470:	4013      	ands	r3, r2
 8005472:	d1f1      	bne.n	8005458 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2204      	movs	r2, #4
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <HAL_RCC_OscConfig+0x42c>
 800547e:	e0ae      	b.n	80055de <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005480:	2027      	movs	r0, #39	@ 0x27
 8005482:	183b      	adds	r3, r7, r0
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005488:	4b8d      	ldr	r3, [pc, #564]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800548a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	055b      	lsls	r3, r3, #21
 8005490:	4013      	ands	r3, r2
 8005492:	d109      	bne.n	80054a8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b8a      	ldr	r3, [pc, #552]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005498:	4b89      	ldr	r3, [pc, #548]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800549a:	2180      	movs	r1, #128	@ 0x80
 800549c:	0549      	lsls	r1, r1, #21
 800549e:	430a      	orrs	r2, r1
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a8:	4b87      	ldr	r3, [pc, #540]	@ (80056c8 <HAL_RCC_OscConfig+0x674>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	2380      	movs	r3, #128	@ 0x80
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4013      	ands	r3, r2
 80054b2:	d11a      	bne.n	80054ea <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b4:	4b84      	ldr	r3, [pc, #528]	@ (80056c8 <HAL_RCC_OscConfig+0x674>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b83      	ldr	r3, [pc, #524]	@ (80056c8 <HAL_RCC_OscConfig+0x674>)
 80054ba:	2180      	movs	r1, #128	@ 0x80
 80054bc:	0049      	lsls	r1, r1, #1
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c2:	f7fe fa7d 	bl	80039c0 <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fe fa78 	bl	80039c0 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e173      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b7a      	ldr	r3, [pc, #488]	@ (80056c8 <HAL_RCC_OscConfig+0x674>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4013      	ands	r3, r2
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_OscConfig+0x4b2>
 80054f6:	4b72      	ldr	r3, [pc, #456]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80054f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054fa:	4b71      	ldr	r3, [pc, #452]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80054fc:	2180      	movs	r1, #128	@ 0x80
 80054fe:	0049      	lsls	r1, r1, #1
 8005500:	430a      	orrs	r2, r1
 8005502:	651a      	str	r2, [r3, #80]	@ 0x50
 8005504:	e031      	b.n	800556a <HAL_RCC_OscConfig+0x516>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0x4d4>
 800550e:	4b6c      	ldr	r3, [pc, #432]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005512:	4b6b      	ldr	r3, [pc, #428]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005514:	496b      	ldr	r1, [pc, #428]	@ (80056c4 <HAL_RCC_OscConfig+0x670>)
 8005516:	400a      	ands	r2, r1
 8005518:	651a      	str	r2, [r3, #80]	@ 0x50
 800551a:	4b69      	ldr	r3, [pc, #420]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800551c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800551e:	4b68      	ldr	r3, [pc, #416]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005520:	496a      	ldr	r1, [pc, #424]	@ (80056cc <HAL_RCC_OscConfig+0x678>)
 8005522:	400a      	ands	r2, r1
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50
 8005526:	e020      	b.n	800556a <HAL_RCC_OscConfig+0x516>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	23a0      	movs	r3, #160	@ 0xa0
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	429a      	cmp	r2, r3
 8005532:	d10e      	bne.n	8005552 <HAL_RCC_OscConfig+0x4fe>
 8005534:	4b62      	ldr	r3, [pc, #392]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005536:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005538:	4b61      	ldr	r3, [pc, #388]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	00c9      	lsls	r1, r1, #3
 800553e:	430a      	orrs	r2, r1
 8005540:	651a      	str	r2, [r3, #80]	@ 0x50
 8005542:	4b5f      	ldr	r3, [pc, #380]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005546:	4b5e      	ldr	r3, [pc, #376]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005548:	2180      	movs	r1, #128	@ 0x80
 800554a:	0049      	lsls	r1, r1, #1
 800554c:	430a      	orrs	r2, r1
 800554e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005550:	e00b      	b.n	800556a <HAL_RCC_OscConfig+0x516>
 8005552:	4b5b      	ldr	r3, [pc, #364]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005556:	4b5a      	ldr	r3, [pc, #360]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005558:	495a      	ldr	r1, [pc, #360]	@ (80056c4 <HAL_RCC_OscConfig+0x670>)
 800555a:	400a      	ands	r2, r1
 800555c:	651a      	str	r2, [r3, #80]	@ 0x50
 800555e:	4b58      	ldr	r3, [pc, #352]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005562:	4b57      	ldr	r3, [pc, #348]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005564:	4959      	ldr	r1, [pc, #356]	@ (80056cc <HAL_RCC_OscConfig+0x678>)
 8005566:	400a      	ands	r2, r1
 8005568:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d015      	beq.n	800559e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005572:	f7fe fa25 	bl	80039c0 <HAL_GetTick>
 8005576:	0003      	movs	r3, r0
 8005578:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800557a:	e009      	b.n	8005590 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fe fa20 	bl	80039c0 <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	4a52      	ldr	r2, [pc, #328]	@ (80056d0 <HAL_RCC_OscConfig+0x67c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e11a      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005590:	4b4b      	ldr	r3, [pc, #300]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d0ef      	beq.n	800557c <HAL_RCC_OscConfig+0x528>
 800559c:	e014      	b.n	80055c8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559e:	f7fe fa0f 	bl	80039c0 <HAL_GetTick>
 80055a2:	0003      	movs	r3, r0
 80055a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a6:	e009      	b.n	80055bc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fe fa0a 	bl	80039c0 <HAL_GetTick>
 80055ac:	0002      	movs	r2, r0
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <HAL_RCC_OscConfig+0x67c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e104      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055bc:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4013      	ands	r3, r2
 80055c6:	d1ef      	bne.n	80055a8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055c8:	2327      	movs	r3, #39	@ 0x27
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d105      	bne.n	80055de <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d6:	4b3a      	ldr	r3, [pc, #232]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055d8:	493e      	ldr	r1, [pc, #248]	@ (80056d4 <HAL_RCC_OscConfig+0x680>)
 80055da:	400a      	ands	r2, r1
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2220      	movs	r2, #32
 80055e4:	4013      	ands	r3, r2
 80055e6:	d049      	beq.n	800567c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d026      	beq.n	800563e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80055f0:	4b33      	ldr	r3, [pc, #204]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	4b32      	ldr	r3, [pc, #200]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055f6:	2101      	movs	r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	4b30      	ldr	r3, [pc, #192]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 80055fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005600:	4b2f      	ldr	r3, [pc, #188]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005602:	2101      	movs	r1, #1
 8005604:	430a      	orrs	r2, r1
 8005606:	635a      	str	r2, [r3, #52]	@ 0x34
 8005608:	4b33      	ldr	r3, [pc, #204]	@ (80056d8 <HAL_RCC_OscConfig+0x684>)
 800560a:	6a1a      	ldr	r2, [r3, #32]
 800560c:	4b32      	ldr	r3, [pc, #200]	@ (80056d8 <HAL_RCC_OscConfig+0x684>)
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	0189      	lsls	r1, r1, #6
 8005612:	430a      	orrs	r2, r1
 8005614:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fe f9d3 	bl	80039c0 <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005620:	f7fe f9ce 	bl	80039c0 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0c9      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005632:	4b23      	ldr	r3, [pc, #140]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2202      	movs	r2, #2
 8005638:	4013      	ands	r3, r2
 800563a:	d0f1      	beq.n	8005620 <HAL_RCC_OscConfig+0x5cc>
 800563c:	e01e      	b.n	800567c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800563e:	4b20      	ldr	r3, [pc, #128]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	4b1f      	ldr	r3, [pc, #124]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005644:	2101      	movs	r1, #1
 8005646:	438a      	bics	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <HAL_RCC_OscConfig+0x684>)
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	4b22      	ldr	r3, [pc, #136]	@ (80056d8 <HAL_RCC_OscConfig+0x684>)
 8005650:	4922      	ldr	r1, [pc, #136]	@ (80056dc <HAL_RCC_OscConfig+0x688>)
 8005652:	400a      	ands	r2, r1
 8005654:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fe f9b3 	bl	80039c0 <HAL_GetTick>
 800565a:	0003      	movs	r3, r0
 800565c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005660:	f7fe f9ae 	bl	80039c0 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e0a9      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2202      	movs	r2, #2
 8005678:	4013      	ands	r3, r2
 800567a:	d1f1      	bne.n	8005660 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	d100      	bne.n	8005686 <HAL_RCC_OscConfig+0x632>
 8005684:	e09e      	b.n	80057c4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d100      	bne.n	800568e <HAL_RCC_OscConfig+0x63a>
 800568c:	e077      	b.n	800577e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	2b02      	cmp	r3, #2
 8005694:	d158      	bne.n	8005748 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_OscConfig+0x66c>)
 800569c:	4910      	ldr	r1, [pc, #64]	@ (80056e0 <HAL_RCC_OscConfig+0x68c>)
 800569e:	400a      	ands	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fe f98d 	bl	80039c0 <HAL_GetTick>
 80056a6:	0003      	movs	r3, r0
 80056a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fe f988 	bl	80039c0 <HAL_GetTick>
 80056b0:	0002      	movs	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d914      	bls.n	80056e4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e083      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	40021000 	.word	0x40021000
 80056c4:	fffffeff 	.word	0xfffffeff
 80056c8:	40007000 	.word	0x40007000
 80056cc:	fffffbff 	.word	0xfffffbff
 80056d0:	00001388 	.word	0x00001388
 80056d4:	efffffff 	.word	0xefffffff
 80056d8:	40010000 	.word	0x40010000
 80056dc:	ffffdfff 	.word	0xffffdfff
 80056e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056e4:	4b3a      	ldr	r3, [pc, #232]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	049b      	lsls	r3, r3, #18
 80056ec:	4013      	ands	r3, r2
 80056ee:	d1dd      	bne.n	80056ac <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f0:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a37      	ldr	r2, [pc, #220]	@ (80057d4 <HAL_RCC_OscConfig+0x780>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	431a      	orrs	r2, r3
 800570a:	4b31      	ldr	r3, [pc, #196]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005710:	4b2f      	ldr	r3, [pc, #188]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b2e      	ldr	r3, [pc, #184]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	0449      	lsls	r1, r1, #17
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fe f94f 	bl	80039c0 <HAL_GetTick>
 8005722:	0003      	movs	r3, r0
 8005724:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005728:	f7fe f94a 	bl	80039c0 <HAL_GetTick>
 800572c:	0002      	movs	r2, r0
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e045      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800573a:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	049b      	lsls	r3, r3, #18
 8005742:	4013      	ands	r3, r2
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x6d4>
 8005746:	e03d      	b.n	80057c4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 800574e:	4922      	ldr	r1, [pc, #136]	@ (80057d8 <HAL_RCC_OscConfig+0x784>)
 8005750:	400a      	ands	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fe f934 	bl	80039c0 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575e:	f7fe f92f 	bl	80039c0 <HAL_GetTick>
 8005762:	0002      	movs	r2, r0
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e02a      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005770:	4b17      	ldr	r3, [pc, #92]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	049b      	lsls	r3, r3, #18
 8005778:	4013      	ands	r3, r2
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x70a>
 800577c:	e022      	b.n	80057c4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e01d      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800578a:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <HAL_RCC_OscConfig+0x77c>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	025b      	lsls	r3, r3, #9
 8005796:	401a      	ands	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d10f      	bne.n	80057c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	23f0      	movs	r3, #240	@ 0xf0
 80057a4:	039b      	lsls	r3, r3, #14
 80057a6:	401a      	ands	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	23c0      	movs	r3, #192	@ 0xc0
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	401a      	ands	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b00a      	add	sp, #40	@ 0x28
 80057cc:	bdb0      	pop	{r4, r5, r7, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	40021000 	.word	0x40021000
 80057d4:	ff02ffff 	.word	0xff02ffff
 80057d8:	feffffff 	.word	0xfeffffff

080057dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b5b0      	push	{r4, r5, r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e128      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b96      	ldr	r3, [pc, #600]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d91e      	bls.n	800583c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b93      	ldr	r3, [pc, #588]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	4393      	bics	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	4b90      	ldr	r3, [pc, #576]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005810:	f7fe f8d6 	bl	80039c0 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005818:	e009      	b.n	800582e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f7fe f8d1 	bl	80039c0 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	4a8a      	ldr	r2, [pc, #552]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e109      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b87      	ldr	r3, [pc, #540]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	4013      	ands	r3, r2
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d1ee      	bne.n	800581a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005846:	4b83      	ldr	r3, [pc, #524]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	22f0      	movs	r2, #240	@ 0xf0
 800584c:	4393      	bics	r3, r2
 800584e:	0019      	movs	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b7f      	ldr	r3, [pc, #508]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005856:	430a      	orrs	r2, r1
 8005858:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	4013      	ands	r3, r2
 8005862:	d100      	bne.n	8005866 <HAL_RCC_ClockConfig+0x8a>
 8005864:	e089      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800586e:	4b79      	ldr	r3, [pc, #484]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	4013      	ands	r3, r2
 8005878:	d120      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0e1      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005886:	4b73      	ldr	r3, [pc, #460]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	049b      	lsls	r3, r3, #18
 800588e:	4013      	ands	r3, r2
 8005890:	d114      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0d5      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d106      	bne.n	80058ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800589e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2204      	movs	r2, #4
 80058a4:	4013      	ands	r3, r2
 80058a6:	d109      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ca      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058ac:	4b69      	ldr	r3, [pc, #420]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0c2      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058bc:	4b65      	ldr	r3, [pc, #404]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	4393      	bics	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	4b62      	ldr	r3, [pc, #392]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d0:	f7fe f876 	bl	80039c0 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d111      	bne.n	8005904 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058e0:	e009      	b.n	80058f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e2:	f7fe f86d 	bl	80039c0 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e0a5      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f6:	4b57      	ldr	r3, [pc, #348]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	220c      	movs	r2, #12
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d1ef      	bne.n	80058e2 <HAL_RCC_ClockConfig+0x106>
 8005902:	e03a      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d111      	bne.n	8005930 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590c:	e009      	b.n	8005922 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590e:	f7fe f857 	bl	80039c0 <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	4a4d      	ldr	r2, [pc, #308]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e08f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005922:	4b4c      	ldr	r3, [pc, #304]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	220c      	movs	r2, #12
 8005928:	4013      	ands	r3, r2
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_ClockConfig+0x132>
 800592e:	e024      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d11b      	bne.n	8005970 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005938:	e009      	b.n	800594e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fe f841 	bl	80039c0 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	4a42      	ldr	r2, [pc, #264]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e079      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	220c      	movs	r2, #12
 8005954:	4013      	ands	r3, r2
 8005956:	2b04      	cmp	r3, #4
 8005958:	d1ef      	bne.n	800593a <HAL_RCC_ClockConfig+0x15e>
 800595a:	e00e      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fe f830 	bl	80039c0 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	4a3a      	ldr	r2, [pc, #232]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e068      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005970:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	220c      	movs	r2, #12
 8005976:	4013      	ands	r3, r2
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800597a:	4b34      	ldr	r3, [pc, #208]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	4013      	ands	r3, r2
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d21e      	bcs.n	80059c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005988:	4b30      	ldr	r3, [pc, #192]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	4393      	bics	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800599a:	f7fe f811 	bl	80039c0 <HAL_GetTick>
 800599e:	0003      	movs	r3, r0
 80059a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	e009      	b.n	80059b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fe f80c 	bl	80039c0 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	4a28      	ldr	r2, [pc, #160]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e044      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b8:	4b24      	ldr	r3, [pc, #144]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d1ee      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2204      	movs	r2, #4
 80059cc:	4013      	ands	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b20      	ldr	r3, [pc, #128]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	0019      	movs	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2208      	movs	r2, #8
 80059ea:	4013      	ands	r3, r2
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ee:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <HAL_RCC_ClockConfig+0x280>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	00da      	lsls	r2, r3, #3
 80059fe:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a04:	f000 f832 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a08:	0001      	movs	r1, r0
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	220f      	movs	r2, #15
 8005a12:	4013      	ands	r3, r2
 8005a14:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <HAL_RCC_ClockConfig+0x284>)
 8005a16:	5cd3      	ldrb	r3, [r2, r3]
 8005a18:	000a      	movs	r2, r1
 8005a1a:	40da      	lsrs	r2, r3
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_RCC_ClockConfig+0x288>)
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a20:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <HAL_RCC_ClockConfig+0x28c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	250b      	movs	r5, #11
 8005a26:	197c      	adds	r4, r7, r5
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fd ff83 	bl	8003934 <HAL_InitTick>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005a32:	197b      	adds	r3, r7, r5
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005a3a:	197b      	adds	r3, r7, r5
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b004      	add	sp, #16
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	00001388 	.word	0x00001388
 8005a54:	40021000 	.word	0x40021000
 8005a58:	fffff8ff 	.word	0xfffff8ff
 8005a5c:	ffffc7ff 	.word	0xffffc7ff
 8005a60:	08006f10 	.word	0x08006f10
 8005a64:	20000004 	.word	0x20000004
 8005a68:	20000018 	.word	0x20000018

08005a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a72:	4b3c      	ldr	r3, [pc, #240]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	220c      	movs	r2, #12
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d013      	beq.n	8005aaa <HAL_RCC_GetSysClockFreq+0x3e>
 8005a82:	d85c      	bhi.n	8005b3e <HAL_RCC_GetSysClockFreq+0xd2>
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d002      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x22>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8005a8c:	e057      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a8e:	4b35      	ldr	r3, [pc, #212]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2210      	movs	r2, #16
 8005a94:	4013      	ands	r3, r2
 8005a96:	d002      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005a98:	4b33      	ldr	r3, [pc, #204]	@ (8005b68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a9a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005a9c:	e05d      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8005a9e:	4b33      	ldr	r3, [pc, #204]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x100>)
 8005aa0:	613b      	str	r3, [r7, #16]
      break;
 8005aa2:	e05a      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aa4:	4b32      	ldr	r3, [pc, #200]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8005aa6:	613b      	str	r3, [r7, #16]
      break;
 8005aa8:	e057      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	0c9b      	lsrs	r3, r3, #18
 8005aae:	220f      	movs	r2, #15
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	4a30      	ldr	r2, [pc, #192]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	0d9b      	lsrs	r3, r3, #22
 8005abc:	2203      	movs	r2, #3
 8005abe:	4013      	ands	r3, r2
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac4:	4b27      	ldr	r3, [pc, #156]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	2380      	movs	r3, #128	@ 0x80
 8005aca:	025b      	lsls	r3, r3, #9
 8005acc:	4013      	ands	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	000a      	movs	r2, r1
 8005ad4:	0152      	lsls	r2, r2, #5
 8005ad6:	1a52      	subs	r2, r2, r1
 8005ad8:	0193      	lsls	r3, r2, #6
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	185b      	adds	r3, r3, r1
 8005ae0:	025b      	lsls	r3, r3, #9
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fa fb19 	bl	800011c <__udivsi3>
 8005aea:	0003      	movs	r3, r0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e023      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005af0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2210      	movs	r2, #16
 8005af6:	4013      	ands	r3, r2
 8005af8:	d00f      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	000a      	movs	r2, r1
 8005afe:	0152      	lsls	r2, r2, #5
 8005b00:	1a52      	subs	r2, r2, r1
 8005b02:	0193      	lsls	r3, r2, #6
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	185b      	adds	r3, r3, r1
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7fa fb04 	bl	800011c <__udivsi3>
 8005b14:	0003      	movs	r3, r0
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e00e      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	000a      	movs	r2, r1
 8005b1e:	0152      	lsls	r2, r2, #5
 8005b20:	1a52      	subs	r2, r2, r1
 8005b22:	0193      	lsls	r3, r2, #6
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	185b      	adds	r3, r3, r1
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7fa faf4 	bl	800011c <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	613b      	str	r3, [r7, #16]
      break;
 8005b3c:	e00d      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	0b5b      	lsrs	r3, r3, #13
 8005b44:	2207      	movs	r2, #7
 8005b46:	4013      	ands	r3, r2
 8005b48:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	2280      	movs	r2, #128	@ 0x80
 8005b50:	0212      	lsls	r2, r2, #8
 8005b52:	409a      	lsls	r2, r3
 8005b54:	0013      	movs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
      break;
 8005b58:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b5a:	693b      	ldr	r3, [r7, #16]
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b006      	add	sp, #24
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	003d0900 	.word	0x003d0900
 8005b6c:	00f42400 	.word	0x00f42400
 8005b70:	007a1200 	.word	0x007a1200
 8005b74:	08006f20 	.word	0x08006f20

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005b80:	2017      	movs	r0, #23
 8005b82:	183b      	adds	r3, r7, r0
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d100      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005b92:	e0c7      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b94:	4b93      	ldr	r3, [pc, #588]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b98:	2380      	movs	r3, #128	@ 0x80
 8005b9a:	055b      	lsls	r3, r3, #21
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d109      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	4b90      	ldr	r3, [pc, #576]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ba6:	2180      	movs	r1, #128	@ 0x80
 8005ba8:	0549      	lsls	r1, r1, #21
 8005baa:	430a      	orrs	r2, r1
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d11a      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc0:	4b89      	ldr	r3, [pc, #548]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b88      	ldr	r3, [pc, #544]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	0049      	lsls	r1, r1, #1
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fd fef7 	bl	80039c0 <HAL_GetTick>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd6:	e008      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd8:	f7fd fef2 	bl	80039c0 <HAL_GetTick>
 8005bdc:	0002      	movs	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b64      	cmp	r3, #100	@ 0x64
 8005be4:	d901      	bls.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e0f7      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bea:	4b7f      	ldr	r3, [pc, #508]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	2380      	movs	r3, #128	@ 0x80
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	23c0      	movs	r3, #192	@ 0xc0
 8005bfc:	039b      	lsls	r3, r3, #14
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	23c0      	movs	r3, #192	@ 0xc0
 8005c08:	039b      	lsls	r3, r3, #14
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d013      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	23c0      	movs	r3, #192	@ 0xc0
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	23c0      	movs	r3, #192	@ 0xc0
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d10a      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c24:	4b6f      	ldr	r3, [pc, #444]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d101      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0cf      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c3e:	23c0      	movs	r3, #192	@ 0xc0
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03b      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	23c0      	movs	r3, #192	@ 0xc0
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	4013      	ands	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d033      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2220      	movs	r2, #32
 8005c62:	4013      	ands	r3, r2
 8005c64:	d02e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005c66:	4b5f      	ldr	r3, [pc, #380]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6a:	4a60      	ldr	r2, [pc, #384]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c70:	4b5c      	ldr	r3, [pc, #368]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c74:	4b5b      	ldr	r3, [pc, #364]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c76:	2180      	movs	r1, #128	@ 0x80
 8005c78:	0309      	lsls	r1, r1, #12
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7e:	4b59      	ldr	r3, [pc, #356]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c82:	4b58      	ldr	r3, [pc, #352]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c84:	495a      	ldr	r1, [pc, #360]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005c8a:	4b56      	ldr	r3, [pc, #344]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	2380      	movs	r3, #128	@ 0x80
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4013      	ands	r3, r2
 8005c98:	d014      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9a:	f7fd fe91 	bl	80039c0 <HAL_GetTick>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ca2:	e009      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca4:	f7fd fe8c 	bl	80039c0 <HAL_GetTick>
 8005ca8:	0002      	movs	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	4a51      	ldr	r2, [pc, #324]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e090      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d0ef      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	23c0      	movs	r3, #192	@ 0xc0
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	23c0      	movs	r3, #192	@ 0xc0
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d10c      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005ce0:	4b40      	ldr	r3, [pc, #256]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a44      	ldr	r2, [pc, #272]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	23c0      	movs	r3, #192	@ 0xc0
 8005cf0:	039b      	lsls	r3, r3, #14
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	23c0      	movs	r3, #192	@ 0xc0
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	401a      	ands	r2, r3
 8005d08:	4b36      	ldr	r3, [pc, #216]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d0e:	2317      	movs	r3, #23
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d18:	4b32      	ldr	r3, [pc, #200]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1c:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d1e:	4937      	ldr	r1, [pc, #220]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d32:	2203      	movs	r2, #3
 8005d34:	4393      	bics	r3, r2
 8005d36:	0019      	movs	r1, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	4b29      	ldr	r3, [pc, #164]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2202      	movs	r2, #2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d4c:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d50:	220c      	movs	r2, #12
 8005d52:	4393      	bics	r3, r2
 8005d54:	0019      	movs	r1, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	4b22      	ldr	r3, [pc, #136]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2204      	movs	r2, #4
 8005d66:	4013      	ands	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6e:	4a24      	ldr	r2, [pc, #144]	@ (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	0019      	movs	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	4b1a      	ldr	r3, [pc, #104]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2208      	movs	r2, #8
 8005d84:	4013      	ands	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d88:	4b16      	ldr	r3, [pc, #88]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	0019      	movs	r1, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2240      	movs	r2, #64	@ 0x40
 8005da2:	4013      	ands	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da6:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	4a17      	ldr	r2, [pc, #92]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	4a10      	ldr	r2, [pc, #64]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b006      	add	sp, #24
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40007000 	.word	0x40007000
 8005dec:	fffcffff 	.word	0xfffcffff
 8005df0:	fff7ffff 	.word	0xfff7ffff
 8005df4:	00001388 	.word	0x00001388
 8005df8:	ffcfffff 	.word	0xffcfffff
 8005dfc:	efffffff 	.word	0xefffffff
 8005e00:	fffff3ff 	.word	0xfffff3ff
 8005e04:	ffffcfff 	.word	0xffffcfff
 8005e08:	fbffffff 	.word	0xfbffffff
 8005e0c:	fff3ffff 	.word	0xfff3ffff

08005e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e032      	b.n	8005e88 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2239      	movs	r2, #57	@ 0x39
 8005e26:	5c9b      	ldrb	r3, [r3, r2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2238      	movs	r2, #56	@ 0x38
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7fd f99f 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2239      	movs	r2, #57	@ 0x39
 8005e42:	2102      	movs	r1, #2
 8005e44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	0019      	movs	r1, r3
 8005e50:	0010      	movs	r0, r2
 8005e52:	f000 f95d 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	223e      	movs	r2, #62	@ 0x3e
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	223a      	movs	r2, #58	@ 0x3a
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	223b      	movs	r2, #59	@ 0x3b
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	223c      	movs	r2, #60	@ 0x3c
 8005e72:	2101      	movs	r1, #1
 8005e74:	5499      	strb	r1, [r3, r2]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	223d      	movs	r2, #61	@ 0x3d
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2239      	movs	r2, #57	@ 0x39
 8005e82:	2101      	movs	r1, #1
 8005e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2239      	movs	r2, #57	@ 0x39
 8005e9c:	5c9b      	ldrb	r3, [r3, r2]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d001      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e036      	b.n	8005f16 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2239      	movs	r2, #57	@ 0x39
 8005eac:	2102      	movs	r1, #2
 8005eae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2101      	movs	r1, #1
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	05db      	lsls	r3, r3, #23
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d009      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x50>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <HAL_TIM_Base_Start_IT+0x90>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x50>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a12      	ldr	r2, [pc, #72]	@ (8005f24 <HAL_TIM_Base_Start_IT+0x94>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d111      	bne.n	8005f04 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2207      	movs	r2, #7
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d010      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2101      	movs	r1, #1
 8005efe:	430a      	orrs	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	e007      	b.n	8005f14 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2101      	movs	r1, #1
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	40010800 	.word	0x40010800
 8005f24:	40011400 	.word	0x40011400

08005f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2202      	movs	r2, #2
 8005f44:	4013      	ands	r3, r2
 8005f46:	d021      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d01d      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2203      	movs	r2, #3
 8005f56:	4252      	negs	r2, r2
 8005f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2203      	movs	r2, #3
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 f8b6 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005f74:	e007      	b.n	8005f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f000 f8a9 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f8b5 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	4013      	ands	r3, r2
 8005f92:	d022      	beq.n	8005fda <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d01e      	beq.n	8005fda <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2205      	movs	r2, #5
 8005fa2:	4252      	negs	r2, r2
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	23c0      	movs	r3, #192	@ 0xc0
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 f88f 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005fc2:	e007      	b.n	8005fd4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 f882 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f000 f88e 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	4013      	ands	r3, r2
 8005fe0:	d021      	beq.n	8006026 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d01d      	beq.n	8006026 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2209      	movs	r2, #9
 8005ff0:	4252      	negs	r2, r2
 8005ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	2203      	movs	r2, #3
 8006002:	4013      	ands	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 f869 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 800600e:	e007      	b.n	8006020 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f85c 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f868 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2210      	movs	r2, #16
 800602a:	4013      	ands	r3, r2
 800602c:	d022      	beq.n	8006074 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2210      	movs	r2, #16
 8006032:	4013      	ands	r3, r2
 8006034:	d01e      	beq.n	8006074 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2211      	movs	r2, #17
 800603c:	4252      	negs	r2, r2
 800603e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	23c0      	movs	r3, #192	@ 0xc0
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4013      	ands	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f842 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 800605c:	e007      	b.n	800606e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	0018      	movs	r0, r3
 8006062:	f000 f835 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f841 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2201      	movs	r2, #1
 8006078:	4013      	ands	r3, r2
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	4013      	ands	r3, r2
 8006082:	d008      	beq.n	8006096 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2202      	movs	r2, #2
 800608a:	4252      	negs	r2, r2
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 f815 	bl	80060c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2240      	movs	r2, #64	@ 0x40
 800609a:	4013      	ands	r3, r2
 800609c:	d00c      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2240      	movs	r2, #64	@ 0x40
 80060a2:	4013      	ands	r3, r2
 80060a4:	d008      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2241      	movs	r2, #65	@ 0x41
 80060ac:	4252      	negs	r2, r2
 80060ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 f824 	bl	8006100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b8:	46c0      	nop			@ (mov r8, r8)
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b004      	add	sp, #16
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060c8:	46c0      	nop			@ (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b002      	add	sp, #8
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b002      	add	sp, #8
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f8:	46c0      	nop			@ (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b002      	add	sp, #8
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006108:	46c0      	nop			@ (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	b002      	add	sp, #8
 800610e:	bd80      	pop	{r7, pc}

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	05db      	lsls	r3, r3, #23
 8006126:	429a      	cmp	r2, r3
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0x2a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <TIM_Base_SetConfig+0xa8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x2a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a21      	ldr	r2, [pc, #132]	@ (80061bc <TIM_Base_SetConfig+0xac>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2270      	movs	r2, #112	@ 0x70
 800613e:	4393      	bics	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	2380      	movs	r3, #128	@ 0x80
 8006150:	05db      	lsls	r3, r3, #23
 8006152:	429a      	cmp	r2, r3
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0x56>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <TIM_Base_SetConfig+0xa8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0x56>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <TIM_Base_SetConfig+0xac>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <TIM_Base_SetConfig+0xb0>)
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2280      	movs	r2, #128	@ 0x80
 800617c:	4393      	bics	r3, r2
 800617e:	001a      	movs	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2204      	movs	r2, #4
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	46c0      	nop			@ (mov r8, r8)
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b004      	add	sp, #16
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40010800 	.word	0x40010800
 80061bc:	40011400 	.word	0x40011400
 80061c0:	fffffcff 	.word	0xfffffcff

080061c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2238      	movs	r2, #56	@ 0x38
 80061d2:	5c9b      	ldrb	r3, [r3, r2]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e042      	b.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2238      	movs	r2, #56	@ 0x38
 80061e0:	2101      	movs	r1, #1
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2239      	movs	r2, #57	@ 0x39
 80061e8:	2102      	movs	r1, #2
 80061ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2270      	movs	r2, #112	@ 0x70
 8006200:	4393      	bics	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	05db      	lsls	r3, r3, #23
 800621e:	429a      	cmp	r2, r3
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a11      	ldr	r2, [pc, #68]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0f      	ldr	r2, [pc, #60]	@ (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10c      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2280      	movs	r2, #128	@ 0x80
 800623a:	4393      	bics	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2239      	movs	r2, #57	@ 0x39
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2238      	movs	r2, #56	@ 0x38
 800625c:	2100      	movs	r1, #0
 800625e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	0018      	movs	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	b004      	add	sp, #16
 8006268:	bd80      	pop	{r7, pc}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	40010800 	.word	0x40010800
 8006270:	40011400 	.word	0x40011400

08006274 <siprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b510      	push	{r4, lr}
 8006278:	2400      	movs	r4, #0
 800627a:	490c      	ldr	r1, [pc, #48]	@ (80062ac <siprintf+0x38>)
 800627c:	b09d      	sub	sp, #116	@ 0x74
 800627e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006280:	9002      	str	r0, [sp, #8]
 8006282:	9006      	str	r0, [sp, #24]
 8006284:	9107      	str	r1, [sp, #28]
 8006286:	9104      	str	r1, [sp, #16]
 8006288:	4809      	ldr	r0, [pc, #36]	@ (80062b0 <siprintf+0x3c>)
 800628a:	490a      	ldr	r1, [pc, #40]	@ (80062b4 <siprintf+0x40>)
 800628c:	cb04      	ldmia	r3!, {r2}
 800628e:	9105      	str	r1, [sp, #20]
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	a902      	add	r1, sp, #8
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006298:	f000 f8be 	bl	8006418 <_svfiprintf_r>
 800629c:	9b02      	ldr	r3, [sp, #8]
 800629e:	701c      	strb	r4, [r3, #0]
 80062a0:	b01d      	add	sp, #116	@ 0x74
 80062a2:	bc10      	pop	{r4}
 80062a4:	bc08      	pop	{r3}
 80062a6:	b003      	add	sp, #12
 80062a8:	4718      	bx	r3
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	7fffffff 	.word	0x7fffffff
 80062b0:	20000020 	.word	0x20000020
 80062b4:	ffff0208 	.word	0xffff0208

080062b8 <memmove>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4288      	cmp	r0, r1
 80062bc:	d902      	bls.n	80062c4 <memmove+0xc>
 80062be:	188b      	adds	r3, r1, r2
 80062c0:	4298      	cmp	r0, r3
 80062c2:	d308      	bcc.n	80062d6 <memmove+0x1e>
 80062c4:	2300      	movs	r3, #0
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d007      	beq.n	80062da <memmove+0x22>
 80062ca:	5ccc      	ldrb	r4, [r1, r3]
 80062cc:	54c4      	strb	r4, [r0, r3]
 80062ce:	3301      	adds	r3, #1
 80062d0:	e7f9      	b.n	80062c6 <memmove+0xe>
 80062d2:	5c8b      	ldrb	r3, [r1, r2]
 80062d4:	5483      	strb	r3, [r0, r2]
 80062d6:	3a01      	subs	r2, #1
 80062d8:	d2fb      	bcs.n	80062d2 <memmove+0x1a>
 80062da:	bd10      	pop	{r4, pc}

080062dc <memset>:
 80062dc:	0003      	movs	r3, r0
 80062de:	1882      	adds	r2, r0, r2
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	7019      	strb	r1, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <__errno>:
 80062ec:	4b01      	ldr	r3, [pc, #4]	@ (80062f4 <__errno+0x8>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	4770      	bx	lr
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	20000020 	.word	0x20000020

080062f8 <__libc_init_array>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	2600      	movs	r6, #0
 80062fc:	4c0c      	ldr	r4, [pc, #48]	@ (8006330 <__libc_init_array+0x38>)
 80062fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006334 <__libc_init_array+0x3c>)
 8006300:	1b64      	subs	r4, r4, r5
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	42a6      	cmp	r6, r4
 8006306:	d109      	bne.n	800631c <__libc_init_array+0x24>
 8006308:	2600      	movs	r6, #0
 800630a:	f000 fc51 	bl	8006bb0 <_init>
 800630e:	4c0a      	ldr	r4, [pc, #40]	@ (8006338 <__libc_init_array+0x40>)
 8006310:	4d0a      	ldr	r5, [pc, #40]	@ (800633c <__libc_init_array+0x44>)
 8006312:	1b64      	subs	r4, r4, r5
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	42a6      	cmp	r6, r4
 8006318:	d105      	bne.n	8006326 <__libc_init_array+0x2e>
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	00b3      	lsls	r3, r6, #2
 800631e:	58eb      	ldr	r3, [r5, r3]
 8006320:	4798      	blx	r3
 8006322:	3601      	adds	r6, #1
 8006324:	e7ee      	b.n	8006304 <__libc_init_array+0xc>
 8006326:	00b3      	lsls	r3, r6, #2
 8006328:	58eb      	ldr	r3, [r5, r3]
 800632a:	4798      	blx	r3
 800632c:	3601      	adds	r6, #1
 800632e:	e7f2      	b.n	8006316 <__libc_init_array+0x1e>
 8006330:	08007cbc 	.word	0x08007cbc
 8006334:	08007cbc 	.word	0x08007cbc
 8006338:	08007cc0 	.word	0x08007cc0
 800633c:	08007cbc 	.word	0x08007cbc

08006340 <__retarget_lock_acquire_recursive>:
 8006340:	4770      	bx	lr

08006342 <__retarget_lock_release_recursive>:
 8006342:	4770      	bx	lr

08006344 <memcpy>:
 8006344:	2300      	movs	r3, #0
 8006346:	b510      	push	{r4, lr}
 8006348:	429a      	cmp	r2, r3
 800634a:	d100      	bne.n	800634e <memcpy+0xa>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	5ccc      	ldrb	r4, [r1, r3]
 8006350:	54c4      	strb	r4, [r0, r3]
 8006352:	3301      	adds	r3, #1
 8006354:	e7f8      	b.n	8006348 <memcpy+0x4>
	...

08006358 <__ssputs_r>:
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	688e      	ldr	r6, [r1, #8]
 800635c:	b085      	sub	sp, #20
 800635e:	001f      	movs	r7, r3
 8006360:	000c      	movs	r4, r1
 8006362:	680b      	ldr	r3, [r1, #0]
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	9203      	str	r2, [sp, #12]
 8006368:	42be      	cmp	r6, r7
 800636a:	d830      	bhi.n	80063ce <__ssputs_r+0x76>
 800636c:	210c      	movs	r1, #12
 800636e:	5e62      	ldrsh	r2, [r4, r1]
 8006370:	2190      	movs	r1, #144	@ 0x90
 8006372:	00c9      	lsls	r1, r1, #3
 8006374:	420a      	tst	r2, r1
 8006376:	d028      	beq.n	80063ca <__ssputs_r+0x72>
 8006378:	2003      	movs	r0, #3
 800637a:	6921      	ldr	r1, [r4, #16]
 800637c:	1a5b      	subs	r3, r3, r1
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	6963      	ldr	r3, [r4, #20]
 8006382:	4343      	muls	r3, r0
 8006384:	9801      	ldr	r0, [sp, #4]
 8006386:	0fdd      	lsrs	r5, r3, #31
 8006388:	18ed      	adds	r5, r5, r3
 800638a:	1c7b      	adds	r3, r7, #1
 800638c:	181b      	adds	r3, r3, r0
 800638e:	106d      	asrs	r5, r5, #1
 8006390:	42ab      	cmp	r3, r5
 8006392:	d900      	bls.n	8006396 <__ssputs_r+0x3e>
 8006394:	001d      	movs	r5, r3
 8006396:	0552      	lsls	r2, r2, #21
 8006398:	d528      	bpl.n	80063ec <__ssputs_r+0x94>
 800639a:	0029      	movs	r1, r5
 800639c:	9802      	ldr	r0, [sp, #8]
 800639e:	f000 f95b 	bl	8006658 <_malloc_r>
 80063a2:	1e06      	subs	r6, r0, #0
 80063a4:	d02c      	beq.n	8006400 <__ssputs_r+0xa8>
 80063a6:	9a01      	ldr	r2, [sp, #4]
 80063a8:	6921      	ldr	r1, [r4, #16]
 80063aa:	f7ff ffcb 	bl	8006344 <memcpy>
 80063ae:	89a2      	ldrh	r2, [r4, #12]
 80063b0:	4b18      	ldr	r3, [pc, #96]	@ (8006414 <__ssputs_r+0xbc>)
 80063b2:	401a      	ands	r2, r3
 80063b4:	2380      	movs	r3, #128	@ 0x80
 80063b6:	4313      	orrs	r3, r2
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	6126      	str	r6, [r4, #16]
 80063be:	18f6      	adds	r6, r6, r3
 80063c0:	6026      	str	r6, [r4, #0]
 80063c2:	003e      	movs	r6, r7
 80063c4:	6165      	str	r5, [r4, #20]
 80063c6:	1aed      	subs	r5, r5, r3
 80063c8:	60a5      	str	r5, [r4, #8]
 80063ca:	42be      	cmp	r6, r7
 80063cc:	d900      	bls.n	80063d0 <__ssputs_r+0x78>
 80063ce:	003e      	movs	r6, r7
 80063d0:	0032      	movs	r2, r6
 80063d2:	9903      	ldr	r1, [sp, #12]
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	f7ff ff6f 	bl	80062b8 <memmove>
 80063da:	2000      	movs	r0, #0
 80063dc:	68a3      	ldr	r3, [r4, #8]
 80063de:	1b9b      	subs	r3, r3, r6
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	199b      	adds	r3, r3, r6
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	b005      	add	sp, #20
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ec:	002a      	movs	r2, r5
 80063ee:	9802      	ldr	r0, [sp, #8]
 80063f0:	f000 fb3e 	bl	8006a70 <_realloc_r>
 80063f4:	1e06      	subs	r6, r0, #0
 80063f6:	d1e0      	bne.n	80063ba <__ssputs_r+0x62>
 80063f8:	6921      	ldr	r1, [r4, #16]
 80063fa:	9802      	ldr	r0, [sp, #8]
 80063fc:	f000 fb86 	bl	8006b0c <_free_r>
 8006400:	230c      	movs	r3, #12
 8006402:	2001      	movs	r0, #1
 8006404:	9a02      	ldr	r2, [sp, #8]
 8006406:	4240      	negs	r0, r0
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	89a2      	ldrh	r2, [r4, #12]
 800640c:	3334      	adds	r3, #52	@ 0x34
 800640e:	4313      	orrs	r3, r2
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	e7e9      	b.n	80063e8 <__ssputs_r+0x90>
 8006414:	fffffb7f 	.word	0xfffffb7f

08006418 <_svfiprintf_r>:
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b0a1      	sub	sp, #132	@ 0x84
 800641c:	9003      	str	r0, [sp, #12]
 800641e:	001d      	movs	r5, r3
 8006420:	898b      	ldrh	r3, [r1, #12]
 8006422:	000f      	movs	r7, r1
 8006424:	0016      	movs	r6, r2
 8006426:	061b      	lsls	r3, r3, #24
 8006428:	d511      	bpl.n	800644e <_svfiprintf_r+0x36>
 800642a:	690b      	ldr	r3, [r1, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10e      	bne.n	800644e <_svfiprintf_r+0x36>
 8006430:	2140      	movs	r1, #64	@ 0x40
 8006432:	f000 f911 	bl	8006658 <_malloc_r>
 8006436:	6038      	str	r0, [r7, #0]
 8006438:	6138      	str	r0, [r7, #16]
 800643a:	2800      	cmp	r0, #0
 800643c:	d105      	bne.n	800644a <_svfiprintf_r+0x32>
 800643e:	230c      	movs	r3, #12
 8006440:	9a03      	ldr	r2, [sp, #12]
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	2001      	movs	r0, #1
 8006446:	4240      	negs	r0, r0
 8006448:	e0cf      	b.n	80065ea <_svfiprintf_r+0x1d2>
 800644a:	2340      	movs	r3, #64	@ 0x40
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	2300      	movs	r3, #0
 8006450:	ac08      	add	r4, sp, #32
 8006452:	6163      	str	r3, [r4, #20]
 8006454:	3320      	adds	r3, #32
 8006456:	7663      	strb	r3, [r4, #25]
 8006458:	3310      	adds	r3, #16
 800645a:	76a3      	strb	r3, [r4, #26]
 800645c:	9507      	str	r5, [sp, #28]
 800645e:	0035      	movs	r5, r6
 8006460:	782b      	ldrb	r3, [r5, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <_svfiprintf_r+0x52>
 8006466:	2b25      	cmp	r3, #37	@ 0x25
 8006468:	d148      	bne.n	80064fc <_svfiprintf_r+0xe4>
 800646a:	1bab      	subs	r3, r5, r6
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	42b5      	cmp	r5, r6
 8006470:	d00b      	beq.n	800648a <_svfiprintf_r+0x72>
 8006472:	0032      	movs	r2, r6
 8006474:	0039      	movs	r1, r7
 8006476:	9803      	ldr	r0, [sp, #12]
 8006478:	f7ff ff6e 	bl	8006358 <__ssputs_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d100      	bne.n	8006482 <_svfiprintf_r+0x6a>
 8006480:	e0ae      	b.n	80065e0 <_svfiprintf_r+0x1c8>
 8006482:	6963      	ldr	r3, [r4, #20]
 8006484:	9a05      	ldr	r2, [sp, #20]
 8006486:	189b      	adds	r3, r3, r2
 8006488:	6163      	str	r3, [r4, #20]
 800648a:	782b      	ldrb	r3, [r5, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d100      	bne.n	8006492 <_svfiprintf_r+0x7a>
 8006490:	e0a6      	b.n	80065e0 <_svfiprintf_r+0x1c8>
 8006492:	2201      	movs	r2, #1
 8006494:	2300      	movs	r3, #0
 8006496:	4252      	negs	r2, r2
 8006498:	6062      	str	r2, [r4, #4]
 800649a:	a904      	add	r1, sp, #16
 800649c:	3254      	adds	r2, #84	@ 0x54
 800649e:	1852      	adds	r2, r2, r1
 80064a0:	1c6e      	adds	r6, r5, #1
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	60e3      	str	r3, [r4, #12]
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	7013      	strb	r3, [r2, #0]
 80064aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80064ac:	4b54      	ldr	r3, [pc, #336]	@ (8006600 <_svfiprintf_r+0x1e8>)
 80064ae:	2205      	movs	r2, #5
 80064b0:	0018      	movs	r0, r3
 80064b2:	7831      	ldrb	r1, [r6, #0]
 80064b4:	9305      	str	r3, [sp, #20]
 80064b6:	f000 fb1d 	bl	8006af4 <memchr>
 80064ba:	1c75      	adds	r5, r6, #1
 80064bc:	2800      	cmp	r0, #0
 80064be:	d11f      	bne.n	8006500 <_svfiprintf_r+0xe8>
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	06d3      	lsls	r3, r2, #27
 80064c4:	d504      	bpl.n	80064d0 <_svfiprintf_r+0xb8>
 80064c6:	2353      	movs	r3, #83	@ 0x53
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	185b      	adds	r3, r3, r1
 80064cc:	2120      	movs	r1, #32
 80064ce:	7019      	strb	r1, [r3, #0]
 80064d0:	0713      	lsls	r3, r2, #28
 80064d2:	d504      	bpl.n	80064de <_svfiprintf_r+0xc6>
 80064d4:	2353      	movs	r3, #83	@ 0x53
 80064d6:	a904      	add	r1, sp, #16
 80064d8:	185b      	adds	r3, r3, r1
 80064da:	212b      	movs	r1, #43	@ 0x2b
 80064dc:	7019      	strb	r1, [r3, #0]
 80064de:	7833      	ldrb	r3, [r6, #0]
 80064e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e2:	d016      	beq.n	8006512 <_svfiprintf_r+0xfa>
 80064e4:	0035      	movs	r5, r6
 80064e6:	2100      	movs	r1, #0
 80064e8:	200a      	movs	r0, #10
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	782a      	ldrb	r2, [r5, #0]
 80064ee:	1c6e      	adds	r6, r5, #1
 80064f0:	3a30      	subs	r2, #48	@ 0x30
 80064f2:	2a09      	cmp	r2, #9
 80064f4:	d950      	bls.n	8006598 <_svfiprintf_r+0x180>
 80064f6:	2900      	cmp	r1, #0
 80064f8:	d111      	bne.n	800651e <_svfiprintf_r+0x106>
 80064fa:	e017      	b.n	800652c <_svfiprintf_r+0x114>
 80064fc:	3501      	adds	r5, #1
 80064fe:	e7af      	b.n	8006460 <_svfiprintf_r+0x48>
 8006500:	9b05      	ldr	r3, [sp, #20]
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	1ac0      	subs	r0, r0, r3
 8006506:	2301      	movs	r3, #1
 8006508:	4083      	lsls	r3, r0
 800650a:	4313      	orrs	r3, r2
 800650c:	002e      	movs	r6, r5
 800650e:	6023      	str	r3, [r4, #0]
 8006510:	e7cc      	b.n	80064ac <_svfiprintf_r+0x94>
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	1d19      	adds	r1, r3, #4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	9107      	str	r1, [sp, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	db01      	blt.n	8006522 <_svfiprintf_r+0x10a>
 800651e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006520:	e004      	b.n	800652c <_svfiprintf_r+0x114>
 8006522:	425b      	negs	r3, r3
 8006524:	60e3      	str	r3, [r4, #12]
 8006526:	2302      	movs	r3, #2
 8006528:	4313      	orrs	r3, r2
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	782b      	ldrb	r3, [r5, #0]
 800652e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006530:	d10c      	bne.n	800654c <_svfiprintf_r+0x134>
 8006532:	786b      	ldrb	r3, [r5, #1]
 8006534:	2b2a      	cmp	r3, #42	@ 0x2a
 8006536:	d134      	bne.n	80065a2 <_svfiprintf_r+0x18a>
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	3502      	adds	r5, #2
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da01      	bge.n	800654a <_svfiprintf_r+0x132>
 8006546:	2301      	movs	r3, #1
 8006548:	425b      	negs	r3, r3
 800654a:	9309      	str	r3, [sp, #36]	@ 0x24
 800654c:	4e2d      	ldr	r6, [pc, #180]	@ (8006604 <_svfiprintf_r+0x1ec>)
 800654e:	2203      	movs	r2, #3
 8006550:	0030      	movs	r0, r6
 8006552:	7829      	ldrb	r1, [r5, #0]
 8006554:	f000 face 	bl	8006af4 <memchr>
 8006558:	2800      	cmp	r0, #0
 800655a:	d006      	beq.n	800656a <_svfiprintf_r+0x152>
 800655c:	2340      	movs	r3, #64	@ 0x40
 800655e:	1b80      	subs	r0, r0, r6
 8006560:	4083      	lsls	r3, r0
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	3501      	adds	r5, #1
 8006566:	4313      	orrs	r3, r2
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	7829      	ldrb	r1, [r5, #0]
 800656c:	2206      	movs	r2, #6
 800656e:	4826      	ldr	r0, [pc, #152]	@ (8006608 <_svfiprintf_r+0x1f0>)
 8006570:	1c6e      	adds	r6, r5, #1
 8006572:	7621      	strb	r1, [r4, #24]
 8006574:	f000 fabe 	bl	8006af4 <memchr>
 8006578:	2800      	cmp	r0, #0
 800657a:	d038      	beq.n	80065ee <_svfiprintf_r+0x1d6>
 800657c:	4b23      	ldr	r3, [pc, #140]	@ (800660c <_svfiprintf_r+0x1f4>)
 800657e:	2b00      	cmp	r3, #0
 8006580:	d122      	bne.n	80065c8 <_svfiprintf_r+0x1b0>
 8006582:	2207      	movs	r2, #7
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	3307      	adds	r3, #7
 8006588:	4393      	bics	r3, r2
 800658a:	3308      	adds	r3, #8
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	6963      	ldr	r3, [r4, #20]
 8006590:	9a04      	ldr	r2, [sp, #16]
 8006592:	189b      	adds	r3, r3, r2
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	e762      	b.n	800645e <_svfiprintf_r+0x46>
 8006598:	4343      	muls	r3, r0
 800659a:	0035      	movs	r5, r6
 800659c:	2101      	movs	r1, #1
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	e7a4      	b.n	80064ec <_svfiprintf_r+0xd4>
 80065a2:	2300      	movs	r3, #0
 80065a4:	200a      	movs	r0, #10
 80065a6:	0019      	movs	r1, r3
 80065a8:	3501      	adds	r5, #1
 80065aa:	6063      	str	r3, [r4, #4]
 80065ac:	782a      	ldrb	r2, [r5, #0]
 80065ae:	1c6e      	adds	r6, r5, #1
 80065b0:	3a30      	subs	r2, #48	@ 0x30
 80065b2:	2a09      	cmp	r2, #9
 80065b4:	d903      	bls.n	80065be <_svfiprintf_r+0x1a6>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0c8      	beq.n	800654c <_svfiprintf_r+0x134>
 80065ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80065bc:	e7c6      	b.n	800654c <_svfiprintf_r+0x134>
 80065be:	4341      	muls	r1, r0
 80065c0:	0035      	movs	r5, r6
 80065c2:	2301      	movs	r3, #1
 80065c4:	1889      	adds	r1, r1, r2
 80065c6:	e7f1      	b.n	80065ac <_svfiprintf_r+0x194>
 80065c8:	aa07      	add	r2, sp, #28
 80065ca:	9200      	str	r2, [sp, #0]
 80065cc:	0021      	movs	r1, r4
 80065ce:	003a      	movs	r2, r7
 80065d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006610 <_svfiprintf_r+0x1f8>)
 80065d2:	9803      	ldr	r0, [sp, #12]
 80065d4:	e000      	b.n	80065d8 <_svfiprintf_r+0x1c0>
 80065d6:	bf00      	nop
 80065d8:	9004      	str	r0, [sp, #16]
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	3301      	adds	r3, #1
 80065de:	d1d6      	bne.n	800658e <_svfiprintf_r+0x176>
 80065e0:	89bb      	ldrh	r3, [r7, #12]
 80065e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80065e4:	065b      	lsls	r3, r3, #25
 80065e6:	d500      	bpl.n	80065ea <_svfiprintf_r+0x1d2>
 80065e8:	e72c      	b.n	8006444 <_svfiprintf_r+0x2c>
 80065ea:	b021      	add	sp, #132	@ 0x84
 80065ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ee:	aa07      	add	r2, sp, #28
 80065f0:	9200      	str	r2, [sp, #0]
 80065f2:	0021      	movs	r1, r4
 80065f4:	003a      	movs	r2, r7
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <_svfiprintf_r+0x1f8>)
 80065f8:	9803      	ldr	r0, [sp, #12]
 80065fa:	f000 f91d 	bl	8006838 <_printf_i>
 80065fe:	e7eb      	b.n	80065d8 <_svfiprintf_r+0x1c0>
 8006600:	08007c88 	.word	0x08007c88
 8006604:	08007c8e 	.word	0x08007c8e
 8006608:	08007c92 	.word	0x08007c92
 800660c:	00000000 	.word	0x00000000
 8006610:	08006359 	.word	0x08006359

08006614 <sbrk_aligned>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	4e0f      	ldr	r6, [pc, #60]	@ (8006654 <sbrk_aligned+0x40>)
 8006618:	000d      	movs	r5, r1
 800661a:	6831      	ldr	r1, [r6, #0]
 800661c:	0004      	movs	r4, r0
 800661e:	2900      	cmp	r1, #0
 8006620:	d102      	bne.n	8006628 <sbrk_aligned+0x14>
 8006622:	f000 fa55 	bl	8006ad0 <_sbrk_r>
 8006626:	6030      	str	r0, [r6, #0]
 8006628:	0029      	movs	r1, r5
 800662a:	0020      	movs	r0, r4
 800662c:	f000 fa50 	bl	8006ad0 <_sbrk_r>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d103      	bne.n	800663c <sbrk_aligned+0x28>
 8006634:	2501      	movs	r5, #1
 8006636:	426d      	negs	r5, r5
 8006638:	0028      	movs	r0, r5
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	2303      	movs	r3, #3
 800663e:	1cc5      	adds	r5, r0, #3
 8006640:	439d      	bics	r5, r3
 8006642:	42a8      	cmp	r0, r5
 8006644:	d0f8      	beq.n	8006638 <sbrk_aligned+0x24>
 8006646:	1a29      	subs	r1, r5, r0
 8006648:	0020      	movs	r0, r4
 800664a:	f000 fa41 	bl	8006ad0 <_sbrk_r>
 800664e:	3001      	adds	r0, #1
 8006650:	d1f2      	bne.n	8006638 <sbrk_aligned+0x24>
 8006652:	e7ef      	b.n	8006634 <sbrk_aligned+0x20>
 8006654:	20000690 	.word	0x20000690

08006658 <_malloc_r>:
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	2203      	movs	r2, #3
 800665c:	1ccb      	adds	r3, r1, #3
 800665e:	4393      	bics	r3, r2
 8006660:	3308      	adds	r3, #8
 8006662:	0005      	movs	r5, r0
 8006664:	001f      	movs	r7, r3
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d234      	bcs.n	80066d4 <_malloc_r+0x7c>
 800666a:	270c      	movs	r7, #12
 800666c:	42b9      	cmp	r1, r7
 800666e:	d833      	bhi.n	80066d8 <_malloc_r+0x80>
 8006670:	0028      	movs	r0, r5
 8006672:	f000 f9ed 	bl	8006a50 <__malloc_lock>
 8006676:	4e37      	ldr	r6, [pc, #220]	@ (8006754 <_malloc_r+0xfc>)
 8006678:	6833      	ldr	r3, [r6, #0]
 800667a:	001c      	movs	r4, r3
 800667c:	2c00      	cmp	r4, #0
 800667e:	d12f      	bne.n	80066e0 <_malloc_r+0x88>
 8006680:	0039      	movs	r1, r7
 8006682:	0028      	movs	r0, r5
 8006684:	f7ff ffc6 	bl	8006614 <sbrk_aligned>
 8006688:	0004      	movs	r4, r0
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	d15f      	bne.n	800674e <_malloc_r+0xf6>
 800668e:	6834      	ldr	r4, [r6, #0]
 8006690:	9400      	str	r4, [sp, #0]
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d14a      	bne.n	800672e <_malloc_r+0xd6>
 8006698:	2c00      	cmp	r4, #0
 800669a:	d052      	beq.n	8006742 <_malloc_r+0xea>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	0028      	movs	r0, r5
 80066a0:	18e3      	adds	r3, r4, r3
 80066a2:	9900      	ldr	r1, [sp, #0]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	f000 fa13 	bl	8006ad0 <_sbrk_r>
 80066aa:	9b01      	ldr	r3, [sp, #4]
 80066ac:	4283      	cmp	r3, r0
 80066ae:	d148      	bne.n	8006742 <_malloc_r+0xea>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	0028      	movs	r0, r5
 80066b4:	1aff      	subs	r7, r7, r3
 80066b6:	0039      	movs	r1, r7
 80066b8:	f7ff ffac 	bl	8006614 <sbrk_aligned>
 80066bc:	3001      	adds	r0, #1
 80066be:	d040      	beq.n	8006742 <_malloc_r+0xea>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	19db      	adds	r3, r3, r7
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	6833      	ldr	r3, [r6, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	d133      	bne.n	8006736 <_malloc_r+0xde>
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	e019      	b.n	8006708 <_malloc_r+0xb0>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dac9      	bge.n	800666c <_malloc_r+0x14>
 80066d8:	230c      	movs	r3, #12
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066e0:	6821      	ldr	r1, [r4, #0]
 80066e2:	1bc9      	subs	r1, r1, r7
 80066e4:	d420      	bmi.n	8006728 <_malloc_r+0xd0>
 80066e6:	290b      	cmp	r1, #11
 80066e8:	d90a      	bls.n	8006700 <_malloc_r+0xa8>
 80066ea:	19e2      	adds	r2, r4, r7
 80066ec:	6027      	str	r7, [r4, #0]
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	d104      	bne.n	80066fc <_malloc_r+0xa4>
 80066f2:	6032      	str	r2, [r6, #0]
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	6011      	str	r1, [r2, #0]
 80066f8:	6053      	str	r3, [r2, #4]
 80066fa:	e005      	b.n	8006708 <_malloc_r+0xb0>
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e7f9      	b.n	80066f4 <_malloc_r+0x9c>
 8006700:	6862      	ldr	r2, [r4, #4]
 8006702:	42a3      	cmp	r3, r4
 8006704:	d10e      	bne.n	8006724 <_malloc_r+0xcc>
 8006706:	6032      	str	r2, [r6, #0]
 8006708:	0028      	movs	r0, r5
 800670a:	f000 f9a9 	bl	8006a60 <__malloc_unlock>
 800670e:	0020      	movs	r0, r4
 8006710:	2207      	movs	r2, #7
 8006712:	300b      	adds	r0, #11
 8006714:	1d23      	adds	r3, r4, #4
 8006716:	4390      	bics	r0, r2
 8006718:	1ac2      	subs	r2, r0, r3
 800671a:	4298      	cmp	r0, r3
 800671c:	d0df      	beq.n	80066de <_malloc_r+0x86>
 800671e:	1a1b      	subs	r3, r3, r0
 8006720:	50a3      	str	r3, [r4, r2]
 8006722:	e7dc      	b.n	80066de <_malloc_r+0x86>
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	e7ef      	b.n	8006708 <_malloc_r+0xb0>
 8006728:	0023      	movs	r3, r4
 800672a:	6864      	ldr	r4, [r4, #4]
 800672c:	e7a6      	b.n	800667c <_malloc_r+0x24>
 800672e:	9c00      	ldr	r4, [sp, #0]
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	e7ad      	b.n	8006692 <_malloc_r+0x3a>
 8006736:	001a      	movs	r2, r3
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	42a3      	cmp	r3, r4
 800673c:	d1fb      	bne.n	8006736 <_malloc_r+0xde>
 800673e:	2300      	movs	r3, #0
 8006740:	e7da      	b.n	80066f8 <_malloc_r+0xa0>
 8006742:	230c      	movs	r3, #12
 8006744:	0028      	movs	r0, r5
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	f000 f98a 	bl	8006a60 <__malloc_unlock>
 800674c:	e7c6      	b.n	80066dc <_malloc_r+0x84>
 800674e:	6007      	str	r7, [r0, #0]
 8006750:	e7da      	b.n	8006708 <_malloc_r+0xb0>
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	20000694 	.word	0x20000694

08006758 <_printf_common>:
 8006758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800675a:	0016      	movs	r6, r2
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	688a      	ldr	r2, [r1, #8]
 8006760:	690b      	ldr	r3, [r1, #16]
 8006762:	000c      	movs	r4, r1
 8006764:	9000      	str	r0, [sp, #0]
 8006766:	4293      	cmp	r3, r2
 8006768:	da00      	bge.n	800676c <_printf_common+0x14>
 800676a:	0013      	movs	r3, r2
 800676c:	0022      	movs	r2, r4
 800676e:	6033      	str	r3, [r6, #0]
 8006770:	3243      	adds	r2, #67	@ 0x43
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	2a00      	cmp	r2, #0
 8006776:	d001      	beq.n	800677c <_printf_common+0x24>
 8006778:	3301      	adds	r3, #1
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	069b      	lsls	r3, r3, #26
 8006780:	d502      	bpl.n	8006788 <_printf_common+0x30>
 8006782:	6833      	ldr	r3, [r6, #0]
 8006784:	3302      	adds	r3, #2
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	2306      	movs	r3, #6
 800678c:	0015      	movs	r5, r2
 800678e:	401d      	ands	r5, r3
 8006790:	421a      	tst	r2, r3
 8006792:	d027      	beq.n	80067e4 <_printf_common+0x8c>
 8006794:	0023      	movs	r3, r4
 8006796:	3343      	adds	r3, #67	@ 0x43
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	1e5a      	subs	r2, r3, #1
 800679c:	4193      	sbcs	r3, r2
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d430      	bmi.n	8006806 <_printf_common+0xae>
 80067a4:	0022      	movs	r2, r4
 80067a6:	9901      	ldr	r1, [sp, #4]
 80067a8:	9800      	ldr	r0, [sp, #0]
 80067aa:	9d08      	ldr	r5, [sp, #32]
 80067ac:	3243      	adds	r2, #67	@ 0x43
 80067ae:	47a8      	blx	r5
 80067b0:	3001      	adds	r0, #1
 80067b2:	d025      	beq.n	8006800 <_printf_common+0xa8>
 80067b4:	2206      	movs	r2, #6
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	2500      	movs	r5, #0
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d105      	bne.n	80067cc <_printf_common+0x74>
 80067c0:	6833      	ldr	r3, [r6, #0]
 80067c2:	68e5      	ldr	r5, [r4, #12]
 80067c4:	1aed      	subs	r5, r5, r3
 80067c6:	43eb      	mvns	r3, r5
 80067c8:	17db      	asrs	r3, r3, #31
 80067ca:	401d      	ands	r5, r3
 80067cc:	68a3      	ldr	r3, [r4, #8]
 80067ce:	6922      	ldr	r2, [r4, #16]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	dd01      	ble.n	80067d8 <_printf_common+0x80>
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	18ed      	adds	r5, r5, r3
 80067d8:	2600      	movs	r6, #0
 80067da:	42b5      	cmp	r5, r6
 80067dc:	d120      	bne.n	8006820 <_printf_common+0xc8>
 80067de:	2000      	movs	r0, #0
 80067e0:	e010      	b.n	8006804 <_printf_common+0xac>
 80067e2:	3501      	adds	r5, #1
 80067e4:	68e3      	ldr	r3, [r4, #12]
 80067e6:	6832      	ldr	r2, [r6, #0]
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	42ab      	cmp	r3, r5
 80067ec:	ddd2      	ble.n	8006794 <_printf_common+0x3c>
 80067ee:	0022      	movs	r2, r4
 80067f0:	2301      	movs	r3, #1
 80067f2:	9901      	ldr	r1, [sp, #4]
 80067f4:	9800      	ldr	r0, [sp, #0]
 80067f6:	9f08      	ldr	r7, [sp, #32]
 80067f8:	3219      	adds	r2, #25
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	d1f0      	bne.n	80067e2 <_printf_common+0x8a>
 8006800:	2001      	movs	r0, #1
 8006802:	4240      	negs	r0, r0
 8006804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006806:	2030      	movs	r0, #48	@ 0x30
 8006808:	18e1      	adds	r1, r4, r3
 800680a:	3143      	adds	r1, #67	@ 0x43
 800680c:	7008      	strb	r0, [r1, #0]
 800680e:	0021      	movs	r1, r4
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	3145      	adds	r1, #69	@ 0x45
 8006814:	7809      	ldrb	r1, [r1, #0]
 8006816:	18a2      	adds	r2, r4, r2
 8006818:	3243      	adds	r2, #67	@ 0x43
 800681a:	3302      	adds	r3, #2
 800681c:	7011      	strb	r1, [r2, #0]
 800681e:	e7c1      	b.n	80067a4 <_printf_common+0x4c>
 8006820:	0022      	movs	r2, r4
 8006822:	2301      	movs	r3, #1
 8006824:	9901      	ldr	r1, [sp, #4]
 8006826:	9800      	ldr	r0, [sp, #0]
 8006828:	9f08      	ldr	r7, [sp, #32]
 800682a:	321a      	adds	r2, #26
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	d0e6      	beq.n	8006800 <_printf_common+0xa8>
 8006832:	3601      	adds	r6, #1
 8006834:	e7d1      	b.n	80067da <_printf_common+0x82>
	...

08006838 <_printf_i>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	b08b      	sub	sp, #44	@ 0x2c
 800683c:	9206      	str	r2, [sp, #24]
 800683e:	000a      	movs	r2, r1
 8006840:	3243      	adds	r2, #67	@ 0x43
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	9005      	str	r0, [sp, #20]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	7e0a      	ldrb	r2, [r1, #24]
 800684a:	000c      	movs	r4, r1
 800684c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800684e:	2a78      	cmp	r2, #120	@ 0x78
 8006850:	d809      	bhi.n	8006866 <_printf_i+0x2e>
 8006852:	2a62      	cmp	r2, #98	@ 0x62
 8006854:	d80b      	bhi.n	800686e <_printf_i+0x36>
 8006856:	2a00      	cmp	r2, #0
 8006858:	d100      	bne.n	800685c <_printf_i+0x24>
 800685a:	e0ba      	b.n	80069d2 <_printf_i+0x19a>
 800685c:	497a      	ldr	r1, [pc, #488]	@ (8006a48 <_printf_i+0x210>)
 800685e:	9104      	str	r1, [sp, #16]
 8006860:	2a58      	cmp	r2, #88	@ 0x58
 8006862:	d100      	bne.n	8006866 <_printf_i+0x2e>
 8006864:	e08e      	b.n	8006984 <_printf_i+0x14c>
 8006866:	0025      	movs	r5, r4
 8006868:	3542      	adds	r5, #66	@ 0x42
 800686a:	702a      	strb	r2, [r5, #0]
 800686c:	e022      	b.n	80068b4 <_printf_i+0x7c>
 800686e:	0010      	movs	r0, r2
 8006870:	3863      	subs	r0, #99	@ 0x63
 8006872:	2815      	cmp	r0, #21
 8006874:	d8f7      	bhi.n	8006866 <_printf_i+0x2e>
 8006876:	f7f9 fc47 	bl	8000108 <__gnu_thumb1_case_shi>
 800687a:	0016      	.short	0x0016
 800687c:	fff6001f 	.word	0xfff6001f
 8006880:	fff6fff6 	.word	0xfff6fff6
 8006884:	001ffff6 	.word	0x001ffff6
 8006888:	fff6fff6 	.word	0xfff6fff6
 800688c:	fff6fff6 	.word	0xfff6fff6
 8006890:	0036009f 	.word	0x0036009f
 8006894:	fff6007e 	.word	0xfff6007e
 8006898:	00b0fff6 	.word	0x00b0fff6
 800689c:	0036fff6 	.word	0x0036fff6
 80068a0:	fff6fff6 	.word	0xfff6fff6
 80068a4:	0082      	.short	0x0082
 80068a6:	0025      	movs	r5, r4
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	3542      	adds	r5, #66	@ 0x42
 80068ac:	1d11      	adds	r1, r2, #4
 80068ae:	6019      	str	r1, [r3, #0]
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	702b      	strb	r3, [r5, #0]
 80068b4:	2301      	movs	r3, #1
 80068b6:	e09e      	b.n	80069f6 <_printf_i+0x1be>
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	6809      	ldr	r1, [r1, #0]
 80068bc:	1d02      	adds	r2, r0, #4
 80068be:	060d      	lsls	r5, r1, #24
 80068c0:	d50b      	bpl.n	80068da <_printf_i+0xa2>
 80068c2:	6806      	ldr	r6, [r0, #0]
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	da03      	bge.n	80068d2 <_printf_i+0x9a>
 80068ca:	232d      	movs	r3, #45	@ 0x2d
 80068cc:	9a03      	ldr	r2, [sp, #12]
 80068ce:	4276      	negs	r6, r6
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006a48 <_printf_i+0x210>)
 80068d4:	270a      	movs	r7, #10
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	e018      	b.n	800690c <_printf_i+0xd4>
 80068da:	6806      	ldr	r6, [r0, #0]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	0649      	lsls	r1, r1, #25
 80068e0:	d5f1      	bpl.n	80068c6 <_printf_i+0x8e>
 80068e2:	b236      	sxth	r6, r6
 80068e4:	e7ef      	b.n	80068c6 <_printf_i+0x8e>
 80068e6:	6808      	ldr	r0, [r1, #0]
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	c940      	ldmia	r1!, {r6}
 80068ec:	0605      	lsls	r5, r0, #24
 80068ee:	d402      	bmi.n	80068f6 <_printf_i+0xbe>
 80068f0:	0640      	lsls	r0, r0, #25
 80068f2:	d500      	bpl.n	80068f6 <_printf_i+0xbe>
 80068f4:	b2b6      	uxth	r6, r6
 80068f6:	6019      	str	r1, [r3, #0]
 80068f8:	4b53      	ldr	r3, [pc, #332]	@ (8006a48 <_printf_i+0x210>)
 80068fa:	270a      	movs	r7, #10
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	2a6f      	cmp	r2, #111	@ 0x6f
 8006900:	d100      	bne.n	8006904 <_printf_i+0xcc>
 8006902:	3f02      	subs	r7, #2
 8006904:	0023      	movs	r3, r4
 8006906:	2200      	movs	r2, #0
 8006908:	3343      	adds	r3, #67	@ 0x43
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	60a3      	str	r3, [r4, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db06      	blt.n	8006922 <_printf_i+0xea>
 8006914:	2104      	movs	r1, #4
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	9d03      	ldr	r5, [sp, #12]
 800691a:	438a      	bics	r2, r1
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	4333      	orrs	r3, r6
 8006920:	d00c      	beq.n	800693c <_printf_i+0x104>
 8006922:	9d03      	ldr	r5, [sp, #12]
 8006924:	0030      	movs	r0, r6
 8006926:	0039      	movs	r1, r7
 8006928:	f7f9 fc7e 	bl	8000228 <__aeabi_uidivmod>
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	3d01      	subs	r5, #1
 8006930:	5c5b      	ldrb	r3, [r3, r1]
 8006932:	702b      	strb	r3, [r5, #0]
 8006934:	0033      	movs	r3, r6
 8006936:	0006      	movs	r6, r0
 8006938:	429f      	cmp	r7, r3
 800693a:	d9f3      	bls.n	8006924 <_printf_i+0xec>
 800693c:	2f08      	cmp	r7, #8
 800693e:	d109      	bne.n	8006954 <_printf_i+0x11c>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07db      	lsls	r3, r3, #31
 8006944:	d506      	bpl.n	8006954 <_printf_i+0x11c>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	dc02      	bgt.n	8006954 <_printf_i+0x11c>
 800694e:	2330      	movs	r3, #48	@ 0x30
 8006950:	3d01      	subs	r5, #1
 8006952:	702b      	strb	r3, [r5, #0]
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	1b5b      	subs	r3, r3, r5
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	9b07      	ldr	r3, [sp, #28]
 800695c:	0021      	movs	r1, r4
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	9805      	ldr	r0, [sp, #20]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	aa09      	add	r2, sp, #36	@ 0x24
 8006966:	f7ff fef7 	bl	8006758 <_printf_common>
 800696a:	3001      	adds	r0, #1
 800696c:	d148      	bne.n	8006a00 <_printf_i+0x1c8>
 800696e:	2001      	movs	r0, #1
 8006970:	4240      	negs	r0, r0
 8006972:	b00b      	add	sp, #44	@ 0x2c
 8006974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006976:	2220      	movs	r2, #32
 8006978:	6809      	ldr	r1, [r1, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	2278      	movs	r2, #120	@ 0x78
 8006980:	4932      	ldr	r1, [pc, #200]	@ (8006a4c <_printf_i+0x214>)
 8006982:	9104      	str	r1, [sp, #16]
 8006984:	0021      	movs	r1, r4
 8006986:	3145      	adds	r1, #69	@ 0x45
 8006988:	700a      	strb	r2, [r1, #0]
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	c940      	ldmia	r1!, {r6}
 8006990:	0610      	lsls	r0, r2, #24
 8006992:	d402      	bmi.n	800699a <_printf_i+0x162>
 8006994:	0650      	lsls	r0, r2, #25
 8006996:	d500      	bpl.n	800699a <_printf_i+0x162>
 8006998:	b2b6      	uxth	r6, r6
 800699a:	6019      	str	r1, [r3, #0]
 800699c:	07d3      	lsls	r3, r2, #31
 800699e:	d502      	bpl.n	80069a6 <_printf_i+0x16e>
 80069a0:	2320      	movs	r3, #32
 80069a2:	4313      	orrs	r3, r2
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d001      	beq.n	80069ae <_printf_i+0x176>
 80069aa:	2710      	movs	r7, #16
 80069ac:	e7aa      	b.n	8006904 <_printf_i+0xcc>
 80069ae:	2220      	movs	r2, #32
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4393      	bics	r3, r2
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	e7f8      	b.n	80069aa <_printf_i+0x172>
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	680d      	ldr	r5, [r1, #0]
 80069bc:	1d10      	adds	r0, r2, #4
 80069be:	6949      	ldr	r1, [r1, #20]
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	062e      	lsls	r6, r5, #24
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0x194>
 80069c8:	6019      	str	r1, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0x19a>
 80069cc:	066d      	lsls	r5, r5, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0x190>
 80069d0:	8019      	strh	r1, [r3, #0]
 80069d2:	2300      	movs	r3, #0
 80069d4:	9d03      	ldr	r5, [sp, #12]
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	e7bf      	b.n	800695a <_printf_i+0x122>
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	1d11      	adds	r1, r2, #4
 80069de:	6019      	str	r1, [r3, #0]
 80069e0:	6815      	ldr	r5, [r2, #0]
 80069e2:	2100      	movs	r1, #0
 80069e4:	0028      	movs	r0, r5
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	f000 f884 	bl	8006af4 <memchr>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d001      	beq.n	80069f4 <_printf_i+0x1bc>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	6060      	str	r0, [r4, #4]
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	2300      	movs	r3, #0
 80069fa:	9a03      	ldr	r2, [sp, #12]
 80069fc:	7013      	strb	r3, [r2, #0]
 80069fe:	e7ac      	b.n	800695a <_printf_i+0x122>
 8006a00:	002a      	movs	r2, r5
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	9906      	ldr	r1, [sp, #24]
 8006a06:	9805      	ldr	r0, [sp, #20]
 8006a08:	9d07      	ldr	r5, [sp, #28]
 8006a0a:	47a8      	blx	r5
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d0ae      	beq.n	800696e <_printf_i+0x136>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	079b      	lsls	r3, r3, #30
 8006a14:	d415      	bmi.n	8006a42 <_printf_i+0x20a>
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	68e0      	ldr	r0, [r4, #12]
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	daa9      	bge.n	8006972 <_printf_i+0x13a>
 8006a1e:	0018      	movs	r0, r3
 8006a20:	e7a7      	b.n	8006972 <_printf_i+0x13a>
 8006a22:	0022      	movs	r2, r4
 8006a24:	2301      	movs	r3, #1
 8006a26:	9906      	ldr	r1, [sp, #24]
 8006a28:	9805      	ldr	r0, [sp, #20]
 8006a2a:	9e07      	ldr	r6, [sp, #28]
 8006a2c:	3219      	adds	r2, #25
 8006a2e:	47b0      	blx	r6
 8006a30:	3001      	adds	r0, #1
 8006a32:	d09c      	beq.n	800696e <_printf_i+0x136>
 8006a34:	3501      	adds	r5, #1
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dcf0      	bgt.n	8006a22 <_printf_i+0x1ea>
 8006a40:	e7e9      	b.n	8006a16 <_printf_i+0x1de>
 8006a42:	2500      	movs	r5, #0
 8006a44:	e7f7      	b.n	8006a36 <_printf_i+0x1fe>
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	08007c99 	.word	0x08007c99
 8006a4c:	08007caa 	.word	0x08007caa

08006a50 <__malloc_lock>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4802      	ldr	r0, [pc, #8]	@ (8006a5c <__malloc_lock+0xc>)
 8006a54:	f7ff fc74 	bl	8006340 <__retarget_lock_acquire_recursive>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	2000068c 	.word	0x2000068c

08006a60 <__malloc_unlock>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	4802      	ldr	r0, [pc, #8]	@ (8006a6c <__malloc_unlock+0xc>)
 8006a64:	f7ff fc6d 	bl	8006342 <__retarget_lock_release_recursive>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	2000068c 	.word	0x2000068c

08006a70 <_realloc_r>:
 8006a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a72:	0006      	movs	r6, r0
 8006a74:	000c      	movs	r4, r1
 8006a76:	0015      	movs	r5, r2
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d105      	bne.n	8006a88 <_realloc_r+0x18>
 8006a7c:	0011      	movs	r1, r2
 8006a7e:	f7ff fdeb 	bl	8006658 <_malloc_r>
 8006a82:	0004      	movs	r4, r0
 8006a84:	0020      	movs	r0, r4
 8006a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d103      	bne.n	8006a94 <_realloc_r+0x24>
 8006a8c:	f000 f83e 	bl	8006b0c <_free_r>
 8006a90:	002c      	movs	r4, r5
 8006a92:	e7f7      	b.n	8006a84 <_realloc_r+0x14>
 8006a94:	f000 f884 	bl	8006ba0 <_malloc_usable_size_r>
 8006a98:	0007      	movs	r7, r0
 8006a9a:	4285      	cmp	r5, r0
 8006a9c:	d802      	bhi.n	8006aa4 <_realloc_r+0x34>
 8006a9e:	0843      	lsrs	r3, r0, #1
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	d3ef      	bcc.n	8006a84 <_realloc_r+0x14>
 8006aa4:	0029      	movs	r1, r5
 8006aa6:	0030      	movs	r0, r6
 8006aa8:	f7ff fdd6 	bl	8006658 <_malloc_r>
 8006aac:	9001      	str	r0, [sp, #4]
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d101      	bne.n	8006ab6 <_realloc_r+0x46>
 8006ab2:	9c01      	ldr	r4, [sp, #4]
 8006ab4:	e7e6      	b.n	8006a84 <_realloc_r+0x14>
 8006ab6:	002a      	movs	r2, r5
 8006ab8:	42bd      	cmp	r5, r7
 8006aba:	d900      	bls.n	8006abe <_realloc_r+0x4e>
 8006abc:	003a      	movs	r2, r7
 8006abe:	0021      	movs	r1, r4
 8006ac0:	9801      	ldr	r0, [sp, #4]
 8006ac2:	f7ff fc3f 	bl	8006344 <memcpy>
 8006ac6:	0021      	movs	r1, r4
 8006ac8:	0030      	movs	r0, r6
 8006aca:	f000 f81f 	bl	8006b0c <_free_r>
 8006ace:	e7f0      	b.n	8006ab2 <_realloc_r+0x42>

08006ad0 <_sbrk_r>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b570      	push	{r4, r5, r6, lr}
 8006ad4:	4d06      	ldr	r5, [pc, #24]	@ (8006af0 <_sbrk_r+0x20>)
 8006ad6:	0004      	movs	r4, r0
 8006ad8:	0008      	movs	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fc fbac 	bl	8003238 <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d103      	bne.n	8006aec <_sbrk_r+0x1c>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d000      	beq.n	8006aec <_sbrk_r+0x1c>
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	20000698 	.word	0x20000698

08006af4 <memchr>:
 8006af4:	b2c9      	uxtb	r1, r1
 8006af6:	1882      	adds	r2, r0, r2
 8006af8:	4290      	cmp	r0, r2
 8006afa:	d101      	bne.n	8006b00 <memchr+0xc>
 8006afc:	2000      	movs	r0, #0
 8006afe:	4770      	bx	lr
 8006b00:	7803      	ldrb	r3, [r0, #0]
 8006b02:	428b      	cmp	r3, r1
 8006b04:	d0fb      	beq.n	8006afe <memchr+0xa>
 8006b06:	3001      	adds	r0, #1
 8006b08:	e7f6      	b.n	8006af8 <memchr+0x4>
	...

08006b0c <_free_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	0005      	movs	r5, r0
 8006b10:	1e0c      	subs	r4, r1, #0
 8006b12:	d010      	beq.n	8006b36 <_free_r+0x2a>
 8006b14:	3c04      	subs	r4, #4
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da00      	bge.n	8006b1e <_free_r+0x12>
 8006b1c:	18e4      	adds	r4, r4, r3
 8006b1e:	0028      	movs	r0, r5
 8006b20:	f7ff ff96 	bl	8006a50 <__malloc_lock>
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <_free_r+0x90>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <_free_r+0x2c>
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6014      	str	r4, [r2, #0]
 8006b30:	0028      	movs	r0, r5
 8006b32:	f7ff ff95 	bl	8006a60 <__malloc_unlock>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d908      	bls.n	8006b4e <_free_r+0x42>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	1821      	adds	r1, r4, r0
 8006b40:	428b      	cmp	r3, r1
 8006b42:	d1f3      	bne.n	8006b2c <_free_r+0x20>
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	1809      	adds	r1, r1, r0
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	e7ee      	b.n	8006b2c <_free_r+0x20>
 8006b4e:	001a      	movs	r2, r3
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_free_r+0x4e>
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	d9f9      	bls.n	8006b4e <_free_r+0x42>
 8006b5a:	6811      	ldr	r1, [r2, #0]
 8006b5c:	1850      	adds	r0, r2, r1
 8006b5e:	42a0      	cmp	r0, r4
 8006b60:	d10b      	bne.n	8006b7a <_free_r+0x6e>
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1809      	adds	r1, r1, r0
 8006b66:	1850      	adds	r0, r2, r1
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	4283      	cmp	r3, r0
 8006b6c:	d1e0      	bne.n	8006b30 <_free_r+0x24>
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	1841      	adds	r1, r0, r1
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e7da      	b.n	8006b30 <_free_r+0x24>
 8006b7a:	42a0      	cmp	r0, r4
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x78>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7d5      	b.n	8006b30 <_free_r+0x24>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	d103      	bne.n	8006b94 <_free_r+0x88>
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	1809      	adds	r1, r1, r0
 8006b92:	6021      	str	r1, [r4, #0]
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6054      	str	r4, [r2, #4]
 8006b98:	e7ca      	b.n	8006b30 <_free_r+0x24>
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	20000694 	.word	0x20000694

08006ba0 <_malloc_usable_size_r>:
 8006ba0:	1f0b      	subs	r3, r1, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	1f18      	subs	r0, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da01      	bge.n	8006bae <_malloc_usable_size_r+0xe>
 8006baa:	580b      	ldr	r3, [r1, r0]
 8006bac:	18c0      	adds	r0, r0, r3
 8006bae:	4770      	bx	lr

08006bb0 <_init>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr

08006bbc <_fini>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr
